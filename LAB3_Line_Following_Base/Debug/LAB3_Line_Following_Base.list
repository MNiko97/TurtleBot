
LAB3_Line_Following_Base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076cc  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078dc  080078dc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078e4  080078e4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080078ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  2000002c  08007918  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006fc  08007918  000206fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a45  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000275d  00000000  00000000  00034a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  00037200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001258  00000000  00000000  000385a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a577  00000000  00000000  000397f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c58  00000000  00000000  00063d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00104a65  00000000  00000000  000789c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000cb  00000000  00000000  0017d42c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005350  00000000  00000000  0017d4f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000002c 	.word	0x2000002c
 8000214:	00000000 	.word	0x00000000
 8000218:	080078ac 	.word	0x080078ac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000030 	.word	0x20000030
 8000234:	080078ac 	.word	0x080078ac

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <cobsEncode>:
 8000538:	b480      	push	{r7}
 800053a:	b089      	sub	sp, #36	; 0x24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	4413      	add	r3, r2
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	1c5a      	adds	r2, r3, #1
 8000550:	607a      	str	r2, [r7, #4]
 8000552:	61fb      	str	r3, [r7, #28]
 8000554:	2301      	movs	r3, #1
 8000556:	76fb      	strb	r3, [r7, #27]
 8000558:	e025      	b.n	80005a6 <cobsEncode+0x6e>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d109      	bne.n	8000576 <cobsEncode+0x3e>
 8000562:	69fb      	ldr	r3, [r7, #28]
 8000564:	7efa      	ldrb	r2, [r7, #27]
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	607a      	str	r2, [r7, #4]
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	2301      	movs	r3, #1
 8000572:	76fb      	strb	r3, [r7, #27]
 8000574:	e014      	b.n	80005a0 <cobsEncode+0x68>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	68fa      	ldr	r2, [r7, #12]
 800057e:	7812      	ldrb	r2, [r2, #0]
 8000580:	701a      	strb	r2, [r3, #0]
 8000582:	7efb      	ldrb	r3, [r7, #27]
 8000584:	3301      	adds	r3, #1
 8000586:	76fb      	strb	r3, [r7, #27]
 8000588:	7efb      	ldrb	r3, [r7, #27]
 800058a:	2bff      	cmp	r3, #255	; 0xff
 800058c:	d108      	bne.n	80005a0 <cobsEncode+0x68>
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	7efa      	ldrb	r2, [r7, #27]
 8000592:	701a      	strb	r2, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	607a      	str	r2, [r7, #4]
 800059a:	61fb      	str	r3, [r7, #28]
 800059c:	2301      	movs	r3, #1
 800059e:	76fb      	strb	r3, [r7, #27]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d3d5      	bcc.n	800055a <cobsEncode+0x22>
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	7efa      	ldrb	r2, [r7, #27]
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	607a      	str	r2, [r7, #4]
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	2301      	movs	r3, #1
 80005be:	76fb      	strb	r3, [r7, #27]
 80005c0:	bf00      	nop
 80005c2:	3724      	adds	r7, #36	; 0x24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d01c      	beq.n	800061a <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	3321      	adds	r3, #33	; 0x21
 80005e4:	461a      	mov	r2, r3
 80005e6:	6879      	ldr	r1, [r7, #4]
 80005e8:	68b8      	ldr	r0, [r7, #8]
 80005ea:	f7ff ffa5 	bl	8000538 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	b29b      	uxth	r3, r3
 800060c:	3302      	adds	r3, #2
 800060e:	b29a      	uxth	r2, r3
 8000610:	2303      	movs	r3, #3
 8000612:	f006 fba5 	bl	8006d60 <HAL_UART_Transmit>
 8000616:	4603      	mov	r3, r0
 8000618:	e000      	b.n	800061c <ertc_dlog_send+0x50>
	}

	return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	1c59      	adds	r1, r3, #1
 8000636:	2303      	movs	r3, #3
 8000638:	2201      	movs	r2, #1
 800063a:	f006 fc22 	bl	8006e82 <HAL_UART_Receive>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d112      	bne.n	800066a <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	785b      	ldrb	r3, [r3, #1]
 8000648:	2b41      	cmp	r3, #65	; 0x41
 800064a:	d002      	beq.n	8000652 <ertc_dlog_update+0x2e>
 800064c:	2b42      	cmp	r3, #66	; 0x42
 800064e:	d004      	beq.n	800065a <ertc_dlog_update+0x36>
 8000650:	e007      	b.n	8000662 <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2201      	movs	r2, #1
 8000656:	701a      	strb	r2, [r3, #0]
				break;
 8000658:	e008      	b.n	800066c <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
				break;
 8000660:	e004      	b.n	800066c <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	e000      	b.n	800066c <ertc_dlog_update+0x48>
		}
	}
 800066a:	bf00      	nop
	return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <uint8_to_bin_digit>:
/* USER CODE BEGIN 0 */


/* your code here */
void uint8_to_bin_digit(uint8_t in, uint8_t* out)
{
 8000676:	b480      	push	{r7}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	6039      	str	r1, [r7, #0]
 8000680:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]
 8000686:	e00e      	b.n	80006a6 <uint8_to_bin_digit+0x30>
        out[i] = (in & (1<<i)) ? 1 : 0;
 8000688:	79fa      	ldrb	r2, [r7, #7]
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	fa42 f303 	asr.w	r3, r2, r3
 8000690:	b2da      	uxtb	r2, r3
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	6839      	ldr	r1, [r7, #0]
 8000696:	440b      	add	r3, r1
 8000698:	f002 0201 	and.w	r2, r2, #1
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	3301      	adds	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	d9ed      	bls.n	8000688 <uint8_to_bin_digit+0x12>
    }
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b0b2      	sub	sp, #200	; 0xc8
 80006bc:	af04      	add	r7, sp, #16
 80006be:	6078      	str	r0, [r7, #4]
		float u1, u2;
		float err;
	} data;

	/*	Update status led */
	if (htim->Instance == TIM6)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4ab8      	ldr	r2, [pc, #736]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d10f      	bne.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		/*  Toggle LED2 */
		if (++kLed >= 10)
 80006ca:	4bb8      	ldr	r3, [pc, #736]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4ab6      	ldr	r2, [pc, #728]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4bb5      	ldr	r3, [pc, #724]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b09      	cmp	r3, #9
 80006da:	dd06      	ble.n	80006ea <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			kLed = 0;
 80006dc:	4bb3      	ldr	r3, [pc, #716]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006e2:	2101      	movs	r1, #1
 80006e4:	48b2      	ldr	r0, [pc, #712]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80006e6:	f002 ff28 	bl	800353a <HAL_GPIO_TogglePin>
		}
	}

	/* Speed ctrl routine */
	if (htim->Instance == TIM6 && running ==1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4aae      	ldr	r2, [pc, #696]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	f040 836c 	bne.w	8000dce <HAL_TIM_PeriodElapsedCallback+0x716>
 80006f6:	4baf      	ldr	r3, [pc, #700]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	f040 8367 	bne.w	8000dce <HAL_TIM_PeriodElapsedCallback+0x716>
		/* !!!!!!!!!!!!!!!!!!!!!!!!!
		* READ THE LINE SENSOR HERE
		* !!!!!!!!!!!!!!!!!!!!!!!!! */

		uint8_t sensor_data;
		status = HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &sensor_data, 1, I2C_TIMEOUT);
 8000700:	23c8      	movs	r3, #200	; 0xc8
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	2301      	movs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2301      	movs	r3, #1
 8000710:	2210      	movs	r2, #16
 8000712:	217c      	movs	r1, #124	; 0x7c
 8000714:	48a8      	ldr	r0, [pc, #672]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8000716:	f003 f8cf 	bl	80038b8 <HAL_I2C_Mem_Read>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4ba7      	ldr	r3, [pc, #668]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x304>)
 8000720:	701a      	strb	r2, [r3, #0]
		uint8_t b_n[8];
		uint8_to_bin_digit(sensor_data, b_n);
 8000722:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000726:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800072a:	4611      	mov	r1, r2
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ffa2 	bl	8000676 <uint8_to_bin_digit>
		float w_n[8];
		float num_f = 0;
 8000732:	f04f 0300 	mov.w	r3, #0
 8000736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		float den_f = 0;
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		float error;
		for(int i=0; i<8; i++){
 8000742:	2300      	movs	r3, #0
 8000744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000748:	e016      	b.n	8000778 <HAL_TIM_PeriodElapsedCallback+0xc0>
			w_n[i]=(7/2 - i)*4; //4mm is distance between two sensors/ Output is in mm
 800074a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800074e:	f1c3 0303 	rsb	r3, r3, #3
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	ee07 3a90 	vmov	s15, r3
 8000758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800075c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8000766:	4413      	add	r3, r2
 8000768:	3bac      	subs	r3, #172	; 0xac
 800076a:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<8; i++){
 800076e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000772:	3301      	adds	r3, #1
 8000774:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000778:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800077c:	2b07      	cmp	r3, #7
 800077e:	dde4      	ble.n	800074a <HAL_TIM_PeriodElapsedCallback+0x92>
		}

		for(int i=0; i<=7; i++){
 8000780:	2300      	movs	r3, #0
 8000782:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000786:	e02f      	b.n	80007e8 <HAL_TIM_PeriodElapsedCallback+0x130>
			num_f += b_n[i]*w_n[i];
 8000788:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800078c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	ee07 3a90 	vmov	s15, r3
 8000798:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800079c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 80007a6:	4413      	add	r3, r2
 80007a8:	3bac      	subs	r3, #172	; 0xac
 80007aa:	edd3 7a00 	vldr	s15, [r3]
 80007ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b2:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 80007b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ba:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
			den_f += b_n[i];
 80007be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80007c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80007d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
		for(int i=0; i<=7; i++){
 80007de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007e2:	3301      	adds	r3, #1
 80007e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80007e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007ec:	2b07      	cmp	r3, #7
 80007ee:	ddcb      	ble.n	8000788 <HAL_TIM_PeriodElapsedCallback+0xd0>
		}
		if (den_f==0) error=0;
 80007f0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80007f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80007f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fc:	d104      	bne.n	8000808 <HAL_TIM_PeriodElapsedCallback+0x150>
 80007fe:	f04f 0300 	mov.w	r3, #0
 8000802:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000806:	e007      	b.n	8000818 <HAL_TIM_PeriodElapsedCallback+0x160>
		else error = num_f/den_f;
 8000808:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
 800080c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8000810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000814:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94

		/* !!!!!!!!!!!!!!!!!!!!!!!!!
		* COMPUTE THE REFERENCE SPEED HERE
		* !!!!!!!!!!!!!!!!!!!!!!!!! */
		if (error > -1 || error < 1){
 8000818:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800081c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000828:	dc08      	bgt.n	800083c <HAL_TIM_PeriodElapsedCallback+0x184>
 800082a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800082e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	d503      	bpl.n	8000844 <HAL_TIM_PeriodElapsedCallback+0x18c>
			V_abs = 250;
 800083c:	4b60      	ldr	r3, [pc, #384]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800083e:	4a61      	ldr	r2, [pc, #388]	; (80009c4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e002      	b.n	800084a <HAL_TIM_PeriodElapsedCallback+0x192>
		}
		else{
			V_abs = 150;
 8000844:	4b5e      	ldr	r3, [pc, #376]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000846:	4a60      	ldr	r2, [pc, #384]	; (80009c8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000848:	601a      	str	r2, [r3, #0]
		}
		psi_dot = error * P_cst;
 800084a:	4b60      	ldr	r3, [pc, #384]	; (80009cc <HAL_TIM_PeriodElapsedCallback+0x314>)
 800084c:	ed93 7a00 	vldr	s14, [r3]
 8000850:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8000854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000858:	4b5d      	ldr	r3, [pc, #372]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800085a:	edc3 7a00 	vstr	s15, [r3]
		float V_r = V_abs + psi_dot * D_wheel/2; //Right wheel velocity in mm/s
 800085e:	4b5d      	ldr	r3, [pc, #372]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800086a:	4b59      	ldr	r3, [pc, #356]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800086c:	edd3 7a00 	vldr	s15, [r3]
 8000870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000874:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000878:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800087c:	4b50      	ldr	r3, [pc, #320]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800087e:	edd3 7a00 	vldr	s15, [r3]
 8000882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000886:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
		float V_l = V_abs - psi_dot * D_wheel/2; //Left wheel velocity in mm/s
 800088a:	4b4d      	ldr	r3, [pc, #308]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800088c:	ed93 7a00 	vldr	s14, [r3]
 8000890:	4b50      	ldr	r3, [pc, #320]	; (80009d4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	ee07 3a90 	vmov	s15, r3
 8000898:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800089c:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800089e:	edd3 7a00 	vldr	s15, [r3]
 80008a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80008a6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80008aa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80008ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008b2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

		float W_r = V_r / r_wheel; //Right wheel angular speed rad/s
 80008b6:	4b48      	ldr	r3, [pc, #288]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	ee07 3a90 	vmov	s15, r3
 80008be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008c2:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 80008c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008ca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		float W_l = V_l / r_wheel; //Left wheel angular speed rad/s
 80008ce:	4b42      	ldr	r3, [pc, #264]	; (80009d8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008da:	edd7 6a21 	vldr	s13, [r7, #132]	; 0x84
 80008de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008e2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

		/*  read current values of encoders counters  */
		TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 80008e6:	4b3d      	ldr	r3, [pc, #244]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ec:	67bb      	str	r3, [r7, #120]	; 0x78
		TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 80008ee:	4b3c      	ldr	r3, [pc, #240]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f4:	677b      	str	r3, [r7, #116]	; 0x74

		/*  evaluate increment of TIM3 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 80008f6:	4b39      	ldr	r3, [pc, #228]	; (80009dc <HAL_TIM_PeriodElapsedCallback+0x324>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	2b10      	cmp	r3, #16
 8000902:	d114      	bne.n	800092e <HAL_TIM_PeriodElapsedCallback+0x276>
		{
			/* check for counter underflow */
			if (TIM3_CurrentCount <= TIM3_PreviousCount)
 8000904:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800090a:	429a      	cmp	r2, r3
 800090c:	d806      	bhi.n	800091c <HAL_TIM_PeriodElapsedCallback+0x264>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 800090e:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800091a:	e01c      	b.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x29e>
			else
				TIM3_DiffCount = -((TIM3_ARR_VALUE + 1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 800091c:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800092c:	e013      	b.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x29e>
		}
		else
		{
			/* check for counter overflow */
			if (TIM3_CurrentCount >= TIM3_PreviousCount)
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000934:	429a      	cmp	r2, r3
 8000936:	d306      	bcc.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x28e>
				TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8000938:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000944:	e007      	b.n	8000956 <HAL_TIM_PeriodElapsedCallback+0x29e>
			else
				TIM3_DiffCount = ((TIM3_ARR_VALUE + 1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8000952:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		}

		/*  evaluate increment of TIM4 counter from previous count  */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	2b10      	cmp	r3, #16
 8000962:	d114      	bne.n	800098e <HAL_TIM_PeriodElapsedCallback+0x2d6>
		{
			/* check for counter underflow */
			if (TIM4_CurrentCount <= TIM4_PreviousCount)
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800096a:	429a      	cmp	r2, r3
 800096c:	d806      	bhi.n	800097c <HAL_TIM_PeriodElapsedCallback+0x2c4>
				TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800097a:	e03f      	b.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x344>
			else
				TIM4_DiffCount = -((TIM4_ARR_VALUE + 1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 800097c:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8000988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800098c:	e036      	b.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x344>
		}
		else
		{
		  /* check for counter overflow */
		  if (TIM4_CurrentCount >= TIM4_PreviousCount)
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000994:	429a      	cmp	r2, r3
 8000996:	d329      	bcc.n	80009ec <HAL_TIM_PeriodElapsedCallback+0x334>
			TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80009a4:	e02a      	b.n	80009fc <HAL_TIM_PeriodElapsedCallback+0x344>
 80009a6:	bf00      	nop
 80009a8:	40001000 	.word	0x40001000
 80009ac:	20000050 	.word	0x20000050
 80009b0:	40020400 	.word	0x40020400
 80009b4:	2000001c 	.word	0x2000001c
 80009b8:	20000168 	.word	0x20000168
 80009bc:	200006f4 	.word	0x200006f4
 80009c0:	2000000c 	.word	0x2000000c
 80009c4:	437a0000 	.word	0x437a0000
 80009c8:	43160000 	.word	0x43160000
 80009cc:	20000018 	.word	0x20000018
 80009d0:	200006f0 	.word	0x200006f0
 80009d4:	20000010 	.word	0x20000010
 80009d8:	20000014 	.word	0x20000014
 80009dc:	20000240 	.word	0x20000240
 80009e0:	200000a8 	.word	0x200000a8
 80009e4:	20000054 	.word	0x20000054
 80009e8:	20000058 	.word	0x20000058
		  else
			TIM4_DiffCount = ((TIM4_ARR_VALUE + 1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 80009ec:	4bd6      	ldr	r3, [pc, #856]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x690>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80009f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}

		/* compute unfiltered motor speeds [rpm] */
		w1_meas_rpm = (float)TIM3_DiffCount / (TIM3_ARR_VALUE + 1) / TS * 60;
 80009fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000a00:	ee07 3a90 	vmov	s15, r3
 8000a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a08:	eddf 6ad0 	vldr	s13, [pc, #832]	; 8000d4c <HAL_TIM_PeriodElapsedCallback+0x694>
 8000a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a10:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a14:	ed9f 5bc6 	vldr	d5, [pc, #792]	; 8000d30 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000a18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a1c:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8000d38 <HAL_TIM_PeriodElapsedCallback+0x680>
 8000a20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a28:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		w2_meas_rpm = (float)TIM4_DiffCount / (TIM4_ARR_VALUE + 1) / TS * 60;
 8000a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a38:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8000d4c <HAL_TIM_PeriodElapsedCallback+0x694>
 8000a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a40:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a44:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8000d30 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000a48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a4c:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8000d38 <HAL_TIM_PeriodElapsedCallback+0x680>
 8000a50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a54:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a58:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

		/* compute tracking error [rpm] */
		w1_err_rads = W_r - RPM2RADS *w1_meas_rpm;
 8000a5c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000a60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a64:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a6c:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8000d40 <HAL_TIM_PeriodElapsedCallback+0x688>
 8000a70:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a78:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a7c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
		w2_err_rads = W_l - RPM2RADS* w2_meas_rpm;
 8000a80:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8000a84:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a88:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8000a8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a90:	ed9f 5bab 	vldr	d5, [pc, #684]	; 8000d40 <HAL_TIM_PeriodElapsedCallback+0x688>
 8000a94:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000a98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa0:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64


		/* get PI proportional terms [V] */
		u1_prop_V = Kp * w1_err_rads;
 8000aa4:	4baa      	ldr	r3, [pc, #680]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8000aa6:	edd3 7a00 	vldr	s15, [r3]
 8000aaa:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8000aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		u2_prop_V = Kp * w2_err_rads;
 8000ab6:	4ba6      	ldr	r3, [pc, #664]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8000ab8:	edd3 7a00 	vldr	s15, [r3]
 8000abc:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 8000ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ac4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

//		u1_V = u1_prop_V;
//		u2_V = u2_prop_V;

		/* get PI integral term [V] */
		u1_int_V += Ki * TS * w1_err_rads;
 8000ac8:	4ba2      	ldr	r3, [pc, #648]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000aca:	edd3 7a00 	vldr	s15, [r3]
 8000ace:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ad2:	4ba1      	ldr	r3, [pc, #644]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000ad4:	edd3 7a00 	vldr	s15, [r3]
 8000ad8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000adc:	ed9f 5b94 	vldr	d5, [pc, #592]	; 8000d30 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000ae0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ae4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000ae8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aec:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000af0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000af4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000af8:	4b96      	ldr	r3, [pc, #600]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000afa:	edc3 7a00 	vstr	s15, [r3]
		u2_int_V += Ki * TS * w2_err_rads;
 8000afe:	4b97      	ldr	r3, [pc, #604]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8000b00:	edd3 7a00 	vldr	s15, [r3]
 8000b04:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000b08:	4b93      	ldr	r3, [pc, #588]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8000b0a:	edd3 7a00 	vldr	s15, [r3]
 8000b0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b12:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8000d30 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000b16:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000b1a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000b1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b22:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b2e:	4b8b      	ldr	r3, [pc, #556]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8000b30:	edc3 7a00 	vstr	s15, [r3]

		/* get PI outputs [V]  */
		u1_V = u1_prop_V + u1_int_V;
 8000b34:	4b87      	ldr	r3, [pc, #540]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000b36:	edd3 7a00 	vldr	s15, [r3]
 8000b3a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8000b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b42:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		u2_V = u2_prop_V + u2_int_V;
 8000b46:	4b85      	ldr	r3, [pc, #532]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8000b48:	edd3 7a00 	vldr	s15, [r3]
 8000b4c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b54:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

		/* get saturated PI outputs [V]  */
		if (u1_V > VBATT)
 8000b58:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000b5c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b68:	dd04      	ble.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x4bc>
			u1_sat_V = VBATT;
 8000b6a:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8000b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b72:	e010      	b.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x4de>
		else if (u1_V < -VBATT)
 8000b74:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8000b78:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8000b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b84:	d504      	bpl.n	8000b90 <HAL_TIM_PeriodElapsedCallback+0x4d8>
			u1_sat_V = -VBATT;
 8000b86:	f04f 4341 	mov.w	r3, #3238002688	; 0xc1000000
 8000b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000b8e:	e002      	b.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x4de>
		else
			u1_sat_V = u1_V;
 8000b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (u2_V > VBATT)
 8000b96:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000b9a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba6:	dd04      	ble.n	8000bb2 <HAL_TIM_PeriodElapsedCallback+0x4fa>
			u2_sat_V = VBATT;
 8000ba8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8000bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000bb0:	e010      	b.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x51c>
		else if (u2_V < -VBATT)
 8000bb2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000bb6:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8000bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc2:	d504      	bpl.n	8000bce <HAL_TIM_PeriodElapsedCallback+0x516>
			u2_sat_V = -VBATT;
 8000bc4:	f04f 4341 	mov.w	r3, #3238002688	; 0xc1000000
 8000bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000bcc:	e002      	b.n	8000bd4 <HAL_TIM_PeriodElapsedCallback+0x51c>
		else
			u2_sat_V = u2_V;
 8000bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		/* get AWU error signals */
		e1_awu_V = u1_V - u1_sat_V;
 8000bd4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8000bd8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8000bdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000be0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		e2_awu_V = u2_V - u2_sat_V;
 8000be4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000be8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

		/* desaturate integral action */
		u1_int_V -= Kawu * TS * e1_awu_V;
 8000bf4:	4b57      	ldr	r3, [pc, #348]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000bf6:	edd3 7a00 	vldr	s15, [r3]
 8000bfa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000bfe:	4b58      	ldr	r3, [pc, #352]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8000c00:	edd3 7a00 	vldr	s15, [r3]
 8000c04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c08:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8000d30 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000c0c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c10:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000c14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c24:	4b4b      	ldr	r3, [pc, #300]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8000c26:	edc3 7a00 	vstr	s15, [r3]
		u2_int_V -= Kawu * TS * e2_awu_V;
 8000c2a:	4b4c      	ldr	r3, [pc, #304]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8000c2c:	edd3 7a00 	vldr	s15, [r3]
 8000c30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000c34:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8000c36:	edd3 7a00 	vldr	s15, [r3]
 8000c3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c3e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8000d30 <HAL_TIM_PeriodElapsedCallback+0x678>
 8000c42:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c46:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000c4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c4e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c5a:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8000c5c:	edc3 7a00 	vstr	s15, [r3]

		/* get saturated PI outputs [duty] */
		u1_sat_duty = V2DUTY * u1_sat_V;
 8000c60:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8000c64:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000d64 <HAL_TIM_PeriodElapsedCallback+0x6ac>
 8000c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		u2_sat_duty = V2DUTY * u2_sat_V;
 8000c70:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000c74:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000d64 <HAL_TIM_PeriodElapsedCallback+0x6ac>
 8000c78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c7c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

		// STOP CONDITION
		if (sensor_data == 255){
 8000c80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c84:	2bff      	cmp	r3, #255	; 0xff
 8000c86:	d10a      	bne.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x5e6>
			u1_sat_duty = 0;
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			u2_sat_duty = 0;
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			running =0;
 8000c98:	4b33      	ldr	r3, [pc, #204]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
		}

		if (u1_sat_duty >= 0) {
 8000c9e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8000ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000caa:	db12      	blt.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x61a>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
 8000cac:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f240 128f 	movw	r2, #399	; 0x18f
 8000cb4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)(TIM8_ARR_VALUE - u1_sat_duty));
 8000cb6:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000d70 <HAL_TIM_PeriodElapsedCallback+0x6b8>
 8000cba:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8000cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cca:	ee17 2a90 	vmov	r2, s15
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38
 8000cd0:	e011      	b.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x63e>
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)TIM8_ARR_VALUE);
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f240 128f 	movw	r2, #399	; 0x18f
 8000cda:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)(TIM8_ARR_VALUE + u1_sat_duty));
 8000cdc:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8000ce0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8000d70 <HAL_TIM_PeriodElapsedCallback+0x6b8>
 8000ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ce8:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cf0:	ee17 2a90 	vmov	r2, s15
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if (u2_sat_duty >= 0) {
 8000cf6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	db37      	blt.n	8000d74 <HAL_TIM_PeriodElapsedCallback+0x6bc>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f240 128f 	movw	r2, #399	; 0x18f
 8000d0c:	63da      	str	r2, [r3, #60]	; 0x3c
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)(TIM8_ARR_VALUE - u2_sat_duty));
 8000d0e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000d70 <HAL_TIM_PeriodElapsedCallback+0x6b8>
 8000d12:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d22:	ee17 2a90 	vmov	r2, s15
 8000d26:	641a      	str	r2, [r3, #64]	; 0x40
 8000d28:	e036      	b.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x6e0>
 8000d2a:	bf00      	nop
 8000d2c:	f3af 8000 	nop.w
 8000d30:	47ae147b 	.word	0x47ae147b
 8000d34:	3f847ae1 	.word	0x3f847ae1
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	404e0000 	.word	0x404e0000
 8000d40:	f37bebd5 	.word	0xf37bebd5
 8000d44:	3fbacee9 	.word	0x3fbacee9
 8000d48:	20000058 	.word	0x20000058
 8000d4c:	45700000 	.word	0x45700000
 8000d50:	20000000 	.word	0x20000000
 8000d54:	2000005c 	.word	0x2000005c
 8000d58:	20000004 	.word	0x20000004
 8000d5c:	20000060 	.word	0x20000060
 8000d60:	20000008 	.word	0x20000008
 8000d64:	42478000 	.word	0x42478000
 8000d68:	2000001c 	.word	0x2000001c
 8000d6c:	20000068 	.word	0x20000068
 8000d70:	43c78000 	.word	0x43c78000
		}
		else {
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)TIM8_ARR_VALUE);
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f240 128f 	movw	r2, #399	; 0x18f
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)(TIM8_ARR_VALUE + u2_sat_duty));
 8000d7e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8000d82:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000ddc <HAL_TIM_PeriodElapsedCallback+0x724>
 8000d86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d92:	ee17 2a90 	vmov	r2, s15
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
		}

		/*	Prepare data packet */
		data.w1 = W_l;
 8000d98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d9a:	63bb      	str	r3, [r7, #56]	; 0x38
		data.w2 = W_r;
 8000d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
		data.u1 = u1_sat_V;
 8000da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
		data.u2 = u2_sat_V;
 8000da8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
		data.err = error;
 8000dae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000db2:	64bb      	str	r3, [r7, #72]	; 0x48

		ertc_dlog_send(&logger, &data, sizeof(data));
 8000db4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000db8:	2214      	movs	r2, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8000dbe:	f7ff fc05 	bl	80005cc <ertc_dlog_send>

		/*  update previous values of encoder counts  */
		TIM3_PreviousCount = TIM3_CurrentCount;
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8000dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dc6:	6013      	str	r3, [r2, #0]
		TIM4_PreviousCount = TIM4_CurrentCount;
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8000dca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000dcc:	6013      	str	r3, [r2, #0]
	}
}
 8000dce:	bf00      	nop
 8000dd0:	37b8      	adds	r7, #184	; 0xb8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000068 	.word	0x20000068
 8000ddc:	43c78000 	.word	0x43c78000
 8000de0:	200003c8 	.word	0x200003c8
 8000de4:	20000054 	.word	0x20000054
 8000de8:	20000058 	.word	0x20000058

08000dec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000df2:	f001 fdc4 	bl	800297e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000df6:	f000 f903 	bl	8001000 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dfa:	f000 ff87 	bl	8001d0c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000dfe:	f000 ff55 	bl	8001cac <MX_USART3_UART_Init>
	MX_ADC1_Init();
 8000e02:	f000 f99b 	bl	800113c <MX_ADC1_Init>
	MX_I2C1_Init();
 8000e06:	f000 f9eb 	bl	80011e0 <MX_I2C1_Init>
	MX_I2C2_Init();
 8000e0a:	f000 fa29 	bl	8001260 <MX_I2C2_Init>
	MX_SPI1_Init();
 8000e0e:	f000 fa67 	bl	80012e0 <MX_SPI1_Init>
	MX_TIM1_Init();
 8000e12:	f000 faa3 	bl	800135c <MX_TIM1_Init>
	MX_TIM2_Init();
 8000e16:	f000 fb71 	bl	80014fc <MX_TIM2_Init>
	MX_TIM3_Init();
 8000e1a:	f000 fc09 	bl	8001630 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000e1e:	f000 fc5d 	bl	80016dc <MX_TIM4_Init>
	MX_TIM5_Init();
 8000e22:	f000 fcb1 	bl	8001788 <MX_TIM5_Init>
	MX_TIM8_Init();
 8000e26:	f000 fd5f 	bl	80018e8 <MX_TIM8_Init>
	MX_UART4_Init();
 8000e2a:	f000 fe7f 	bl	8001b2c <MX_UART4_Init>
	MX_UART5_Init();
 8000e2e:	f000 fead 	bl	8001b8c <MX_UART5_Init>
	MX_USART1_UART_Init();
 8000e32:	f000 fedb 	bl	8001bec <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000e36:	f000 ff09 	bl	8001c4c <MX_USART2_UART_Init>
	MX_TIM9_Init();
 8000e3a:	f000 fe27 	bl	8001a8c <MX_TIM9_Init>
	MX_TIM6_Init();
 8000e3e:	f000 fd1b 	bl	8001878 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */

	/* Disable LCD SPI SS */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2110      	movs	r1, #16
 8000e46:	4861      	ldr	r0, [pc, #388]	; (8000fcc <main+0x1e0>)
 8000e48:	f002 fb5e 	bl	8003508 <HAL_GPIO_WritePin>

	/* SX1509 (1) - Software reset */
	uint8_t data = 0x12;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	71fb      	strb	r3, [r7, #7]


	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000e50:	23c8      	movs	r3, #200	; 0xc8
 8000e52:	9302      	str	r3, [sp, #8]
 8000e54:	2301      	movs	r3, #1
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	227d      	movs	r2, #125	; 0x7d
 8000e60:	217c      	movs	r1, #124	; 0x7c
 8000e62:	485b      	ldr	r0, [pc, #364]	; (8000fd0 <main+0x1e4>)
 8000e64:	f002 fc14 	bl	8003690 <HAL_I2C_Mem_Write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b59      	ldr	r3, [pc, #356]	; (8000fd4 <main+0x1e8>)
 8000e6e:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8000e70:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <main+0x1e8>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d003      	beq.n	8000e80 <main+0x94>
		error = 1;
 8000e78:	4b57      	ldr	r3, [pc, #348]	; (8000fd8 <main+0x1ec>)
 8000e7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000e7e:	601a      	str	r2, [r3, #0]
	data = 0x34;
 8000e80:	2334      	movs	r3, #52	; 0x34
 8000e82:	71fb      	strb	r3, [r7, #7]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000e84:	23c8      	movs	r3, #200	; 0xc8
 8000e86:	9302      	str	r3, [sp, #8]
 8000e88:	2301      	movs	r3, #1
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	1dfb      	adds	r3, r7, #7
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	2301      	movs	r3, #1
 8000e92:	227d      	movs	r2, #125	; 0x7d
 8000e94:	217c      	movs	r1, #124	; 0x7c
 8000e96:	484e      	ldr	r0, [pc, #312]	; (8000fd0 <main+0x1e4>)
 8000e98:	f002 fbfa 	bl	8003690 <HAL_I2C_Mem_Write>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <main+0x1e8>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8000ea4:	4b4b      	ldr	r3, [pc, #300]	; (8000fd4 <main+0x1e8>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d003      	beq.n	8000eb4 <main+0xc8>
		error = 2;
 8000eac:	4b4a      	ldr	r3, [pc, #296]	; (8000fd8 <main+0x1ec>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000eb4:	2064      	movs	r0, #100	; 0x64
 8000eb6:	f001 fdbf 	bl	8002a38 <HAL_Delay>

	/* SX1509 (1) - Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000eba:	23ff      	movs	r3, #255	; 0xff
 8000ebc:	71fb      	strb	r3, [r7, #7]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 8000ebe:	23c8      	movs	r3, #200	; 0xc8
 8000ec0:	9302      	str	r3, [sp, #8]
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	220f      	movs	r2, #15
 8000ece:	217c      	movs	r1, #124	; 0x7c
 8000ed0:	483f      	ldr	r0, [pc, #252]	; (8000fd0 <main+0x1e4>)
 8000ed2:	f002 fbdd 	bl	8003690 <HAL_I2C_Mem_Write>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <main+0x1e8>)
 8000edc:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <main+0x1e8>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d002      	beq.n	8000eec <main+0x100>
	error = 3;
 8000ee6:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <main+0x1ec>)
 8000ee8:	4a3c      	ldr	r2, [pc, #240]	; (8000fdc <main+0x1f0>)
 8000eea:	601a      	str	r2, [r3, #0]
	/* SX1509 (1) - Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
	data = 0xFF; // 0 = out; 1 = in
 8000eec:	23ff      	movs	r3, #255	; 0xff
 8000eee:	71fb      	strb	r3, [r7, #7]
	status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 8000ef0:	23c8      	movs	r3, #200	; 0xc8
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	220e      	movs	r2, #14
 8000f00:	217c      	movs	r1, #124	; 0x7c
 8000f02:	4833      	ldr	r0, [pc, #204]	; (8000fd0 <main+0x1e4>)
 8000f04:	f002 fbc4 	bl	8003690 <HAL_I2C_Mem_Write>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <main+0x1e8>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	if (status != HAL_OK)
 8000f10:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <main+0x1e8>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d003      	beq.n	8000f20 <main+0x134>
	error = 4;
 8000f18:	4b2f      	ldr	r3, [pc, #188]	; (8000fd8 <main+0x1ec>)
 8000f1a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8000f1e:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f001 fd89 	bl	8002a38 <HAL_Delay>

//	logger.uart_handle = huart3; // for serial
	logger.uart_handle = huart2; // for wifi
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <main+0x1f4>)
 8000f28:	4a2e      	ldr	r2, [pc, #184]	; (8000fe4 <main+0x1f8>)
 8000f2a:	3344      	adds	r3, #68	; 0x44
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fca7 	bl	8007884 <memcpy>

	/* Reset LCD */
	HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2110      	movs	r1, #16
 8000f3a:	4824      	ldr	r0, [pc, #144]	; (8000fcc <main+0x1e0>)
 8000f3c:	f002 fae4 	bl	8003508 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000f40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f44:	f001 fd78 	bl	8002a38 <HAL_Delay>

	/* Start encoders timers */
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f48:	213c      	movs	r1, #60	; 0x3c
 8000f4a:	4827      	ldr	r0, [pc, #156]	; (8000fe8 <main+0x1fc>)
 8000f4c:	f004 fc30 	bl	80057b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000f50:	213c      	movs	r1, #60	; 0x3c
 8000f52:	4826      	ldr	r0, [pc, #152]	; (8000fec <main+0x200>)
 8000f54:	f004 fc2c 	bl	80057b0 <HAL_TIM_Encoder_Start>

	/* Start servomotors PWM (avoid floating inputs to servomotors) */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4825      	ldr	r0, [pc, #148]	; (8000ff0 <main+0x204>)
 8000f5c:	f004 fb1c 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f60:	2104      	movs	r1, #4
 8000f62:	4823      	ldr	r0, [pc, #140]	; (8000ff0 <main+0x204>)
 8000f64:	f004 fb18 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <main+0x204>)
 8000f6c:	f004 fb14 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000f70:	210c      	movs	r1, #12
 8000f72:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <main+0x204>)
 8000f74:	f004 fb10 	bl	8005598 <HAL_TIM_PWM_Start>

	/* Start motor PWM */
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <main+0x208>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000f80:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <main+0x208>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2200      	movs	r2, #0
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <main+0x208>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <main+0x208>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2200      	movs	r2, #0
 8000f96:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4816      	ldr	r0, [pc, #88]	; (8000ff4 <main+0x208>)
 8000f9c:	f004 fafc 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <main+0x208>)
 8000fa4:	f004 faf8 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <main+0x208>)
 8000fac:	f004 faf4 	bl	8005598 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000fb0:	210c      	movs	r1, #12
 8000fb2:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <main+0x208>)
 8000fb4:	f004 faf0 	bl	8005598 <HAL_TIM_PWM_Start>

	/* Start speed ctrl ISR */
	HAL_TIM_Base_Start_IT(&htim6);
 8000fb8:	480f      	ldr	r0, [pc, #60]	; (8000ff8 <main+0x20c>)
 8000fba:	f004 fa63 	bl	8005484 <HAL_TIM_Base_Start_IT>
	done = 1;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <main+0x210>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
	while (1)
	{
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
		ertc_dlog_update(&logger);
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <main+0x1f4>)
 8000fc6:	f7ff fb2d 	bl	8000624 <ertc_dlog_update>
 8000fca:	e7fb      	b.n	8000fc4 <main+0x1d8>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	20000168 	.word	0x20000168
 8000fd4:	200006f4 	.word	0x200006f4
 8000fd8:	2000004c 	.word	0x2000004c
 8000fdc:	40400000 	.word	0x40400000
 8000fe0:	200003c8 	.word	0x200003c8
 8000fe4:	20000670 	.word	0x20000670
 8000fe8:	20000240 	.word	0x20000240
 8000fec:	200000a8 	.word	0x200000a8
 8000ff0:	200004cc 	.word	0x200004cc
 8000ff4:	20000068 	.word	0x20000068
 8000ff8:	2000048c 	.word	0x2000048c
 8000ffc:	20000048 	.word	0x20000048

08001000 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0b8      	sub	sp, #224	; 0xe0
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800100a:	2234      	movs	r2, #52	; 0x34
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f006 fc43 	bl	800789a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2290      	movs	r2, #144	; 0x90
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f006 fc34 	bl	800789a <memset>

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8001032:	f003 f80f 	bl	8004054 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <SystemClock_Config+0x134>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a3e      	ldr	r2, [pc, #248]	; (8001134 <SystemClock_Config+0x134>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b3c      	ldr	r3, [pc, #240]	; (8001134 <SystemClock_Config+0x134>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800104e:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <SystemClock_Config+0x138>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001056:	4a38      	ldr	r2, [pc, #224]	; (8001138 <SystemClock_Config+0x138>)
 8001058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <SystemClock_Config+0x138>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800106a:	2301      	movs	r3, #1
 800106c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001070:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001078:	2302      	movs	r3, #2
 800107a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001086:	2304      	movs	r3, #4
 8001088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 800108c:	2360      	movs	r3, #96	; 0x60
 800108e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001098:	2304      	movs	r3, #4
 800109a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 f836 	bl	8004114 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010ae:	f000 ff61 	bl	8001f74 <Error_Handler>
  }
  /** Activate the Over-Drive mode
   */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010b2:	f002 ffdf 	bl	8004074 <HAL_PWREx_EnableOverDrive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010bc:	f000 ff5a 	bl	8001f74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010c0:	230f      	movs	r3, #15
 80010c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2302      	movs	r3, #2
 80010c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010e4:	2103      	movs	r1, #3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f003 fac2 	bl	8004670 <HAL_RCC_ClockConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010f2:	f000 ff3f 	bl	8001f74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART4 | RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C2;
 80010f6:	f24c 73c0 	movw	r3, #51136	; 0xc7c0
 80010fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010fc:	2300      	movs	r3, #0
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001100:	2300      	movs	r3, #0
 8001102:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001110:	2300      	movs	r3, #0
 8001112:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001114:	2300      	movs	r3, #0
 8001116:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fccd 	bl	8004abc <HAL_RCCEx_PeriphCLKConfig>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8001128:	f000 ff24 	bl	8001f74 <Error_Handler>
  }
}
 800112c:	bf00      	nop
 800112e:	37e0      	adds	r7, #224	; 0xe0
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <MX_ADC1_Init+0x9c>)
 8001152:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001156:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800115a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115c:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_ADC1_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001162:	4b1c      	ldr	r3, [pc, #112]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_ADC1_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <MX_ADC1_Init+0x98>)
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <MX_ADC1_Init+0xa0>)
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <MX_ADC1_Init+0x98>)
 800118a:	2201      	movs	r2, #1
 800118c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <MX_ADC1_Init+0x98>)
 8001198:	2201      	movs	r2, #1
 800119a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_ADC1_Init+0x98>)
 800119e:	f001 fc6d 	bl	8002a7c <HAL_ADC_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011a8:	f000 fee4 	bl	8001f74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_3;
 80011ac:	2303      	movs	r3, #3
 80011ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	; (80011d4 <MX_ADC1_Init+0x98>)
 80011be:	f001 fca1 	bl	8002b04 <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011c8:	f000 fed4 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000300 	.word	0x20000300
 80011d8:	40012000 	.word	0x40012000
 80011dc:	0f000001 	.word	0x0f000001

080011e0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_I2C1_Init+0x74>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <MX_I2C1_Init+0x78>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_I2C1_Init+0x74>)
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <MX_I2C1_Init+0x7c>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <MX_I2C1_Init+0x74>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <MX_I2C1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <MX_I2C1_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <MX_I2C1_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800121a:	480e      	ldr	r0, [pc, #56]	; (8001254 <MX_I2C1_Init+0x74>)
 800121c:	f002 f9a8 	bl	8003570 <HAL_I2C_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001226:	f000 fea5 	bl	8001f74 <Error_Handler>
  }
  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4809      	ldr	r0, [pc, #36]	; (8001254 <MX_I2C1_Init+0x74>)
 800122e:	f002 fe79 	bl	8003f24 <HAL_I2CEx_ConfigAnalogFilter>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001238:	f000 fe9c 	bl	8001f74 <Error_Handler>
  }
  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_I2C1_Init+0x74>)
 8001240:	f002 febb 	bl	8003fba <HAL_I2CEx_ConfigDigitalFilter>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 fe93 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000168 	.word	0x20000168
 8001258:	40005400 	.word	0x40005400
 800125c:	20303e5d 	.word	0x20303e5d

08001260 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <MX_I2C2_Init+0x78>)
 8001268:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_I2C2_Init+0x74>)
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <MX_I2C2_Init+0x7c>)
 800126e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001278:	2201      	movs	r2, #1
 800127a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_I2C2_Init+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_I2C2_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001294:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <MX_I2C2_Init+0x74>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800129a:	480e      	ldr	r0, [pc, #56]	; (80012d4 <MX_I2C2_Init+0x74>)
 800129c:	f002 f968 	bl	8003570 <HAL_I2C_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012a6:	f000 fe65 	bl	8001f74 <Error_Handler>
  }
  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <MX_I2C2_Init+0x74>)
 80012ae:	f002 fe39 	bl	8003f24 <HAL_I2CEx_ConfigAnalogFilter>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012b8:	f000 fe5c 	bl	8001f74 <Error_Handler>
  }
  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012bc:	2100      	movs	r1, #0
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_I2C2_Init+0x74>)
 80012c0:	f002 fe7b 	bl	8003fba <HAL_I2CEx_ConfigDigitalFilter>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012ca:	f000 fe53 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001b4 	.word	0x200001b4
 80012d8:	40005800 	.word	0x40005800
 80012dc:	20303e5d 	.word	0x20303e5d

080012e0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_SPI1_Init+0x74>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <MX_SPI1_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_SPI1_Init+0x74>)
 80012ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_SPI1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_SPI1_Init+0x74>)
 80012fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_SPI1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_SPI1_Init+0x74>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_SPI1_Init+0x74>)
 800130e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001312:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_SPI1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_SPI1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_SPI1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <MX_SPI1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_SPI1_Init+0x74>)
 800132e:	2207      	movs	r2, #7
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <MX_SPI1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_SPI1_Init+0x74>)
 800133a:	2208      	movs	r2, #8
 800133c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_SPI1_Init+0x74>)
 8001340:	f003 ffe2 	bl	8005308 <HAL_SPI_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 fe13 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200005cc 	.word	0x200005cc
 8001358:	40013000 	.word	0x40013000

0800135c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09a      	sub	sp, #104	; 0x68
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001362:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800137c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	222c      	movs	r2, #44	; 0x2c
 8001394:	2100      	movs	r1, #0
 8001396:	4618      	mov	r0, r3
 8001398:	f006 fa7f 	bl	800789a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800139c:	4b55      	ldr	r3, [pc, #340]	; (80014f4 <MX_TIM1_Init+0x198>)
 800139e:	4a56      	ldr	r2, [pc, #344]	; (80014f8 <MX_TIM1_Init+0x19c>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013a2:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a8:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80013ae:	4b51      	ldr	r3, [pc, #324]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013ba:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c0:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013c6:	484b      	ldr	r0, [pc, #300]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013c8:	f004 f830 	bl	800542c <HAL_TIM_Base_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013d2:	f000 fdcf 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013e0:	4619      	mov	r1, r3
 80013e2:	4844      	ldr	r0, [pc, #272]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013e4:	f004 fd6e 	bl	8005ec4 <HAL_TIM_ConfigClockSource>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013ee:	f000 fdc1 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80013f2:	4840      	ldr	r0, [pc, #256]	; (80014f4 <MX_TIM1_Init+0x198>)
 80013f4:	f004 f870 	bl	80054d8 <HAL_TIM_OC_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013fe:	f000 fdb9 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800140e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001412:	4619      	mov	r1, r3
 8001414:	4837      	ldr	r0, [pc, #220]	; (80014f4 <MX_TIM1_Init+0x198>)
 8001416:	f005 fb2b 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001420:	f000 fda8 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001424:	2350      	movs	r3, #80	; 0x50
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800142c:	2302      	movs	r3, #2
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001430:	2300      	movs	r3, #0
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800143c:	2300      	movs	r3, #0
 800143e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001440:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001444:	2200      	movs	r2, #0
 8001446:	4619      	mov	r1, r3
 8001448:	482a      	ldr	r0, [pc, #168]	; (80014f4 <MX_TIM1_Init+0x198>)
 800144a:	f004 fb09 	bl	8005a60 <HAL_TIM_OC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001454:	f000 fd8e 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800145c:	2204      	movs	r2, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4824      	ldr	r0, [pc, #144]	; (80014f4 <MX_TIM1_Init+0x198>)
 8001462:	f004 fafd 	bl	8005a60 <HAL_TIM_OC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800146c:	f000 fd82 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001474:	2208      	movs	r2, #8
 8001476:	4619      	mov	r1, r3
 8001478:	481e      	ldr	r0, [pc, #120]	; (80014f4 <MX_TIM1_Init+0x198>)
 800147a:	f004 faf1 	bl	8005a60 <HAL_TIM_OC_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001484:	f000 fd76 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148c:	220c      	movs	r2, #12
 800148e:	4619      	mov	r1, r3
 8001490:	4818      	ldr	r0, [pc, #96]	; (80014f4 <MX_TIM1_Init+0x198>)
 8001492:	f004 fae5 	bl	8005a60 <HAL_TIM_OC_ConfigChannel>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800149c:	f000 fd6a 	bl	8001f74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4807      	ldr	r0, [pc, #28]	; (80014f4 <MX_TIM1_Init+0x198>)
 80014d6:	f005 fb59 	bl	8006b8c <HAL_TIMEx_ConfigBreakDeadTime>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80014e0:	f000 fd48 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014e4:	4803      	ldr	r0, [pc, #12]	; (80014f4 <MX_TIM1_Init+0x198>)
 80014e6:	f000 ffd3 	bl	8002490 <HAL_TIM_MspPostInit>
}
 80014ea:	bf00      	nop
 80014ec:	3768      	adds	r7, #104	; 0x68
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200004cc 	.word	0x200004cc
 80014f8:	40010000 	.word	0x40010000

080014fc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b092      	sub	sp, #72	; 0x48
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	615a      	str	r2, [r3, #20]
 800152e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001530:	463b      	mov	r3, r7
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800153c:	4b3b      	ldr	r3, [pc, #236]	; (800162c <MX_TIM2_Init+0x130>)
 800153e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001542:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <MX_TIM2_Init+0x130>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b38      	ldr	r3, [pc, #224]	; (800162c <MX_TIM2_Init+0x130>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <MX_TIM2_Init+0x130>)
 8001552:	f04f 32ff 	mov.w	r2, #4294967295
 8001556:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <MX_TIM2_Init+0x130>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b33      	ldr	r3, [pc, #204]	; (800162c <MX_TIM2_Init+0x130>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001564:	4831      	ldr	r0, [pc, #196]	; (800162c <MX_TIM2_Init+0x130>)
 8001566:	f003 ff61 	bl	800542c <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001570:	f000 fd00 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001578:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800157e:	4619      	mov	r1, r3
 8001580:	482a      	ldr	r0, [pc, #168]	; (800162c <MX_TIM2_Init+0x130>)
 8001582:	f004 fc9f 	bl	8005ec4 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800158c:	f000 fcf2 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001590:	4826      	ldr	r0, [pc, #152]	; (800162c <MX_TIM2_Init+0x130>)
 8001592:	f003 ffd6 	bl	8005542 <HAL_TIM_PWM_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 800159c:	f000 fcea 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015a0:	4822      	ldr	r0, [pc, #136]	; (800162c <MX_TIM2_Init+0x130>)
 80015a2:	f004 f83d 	bl	8005620 <HAL_TIM_IC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015ac:	f000 fce2 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015bc:	4619      	mov	r1, r3
 80015be:	481b      	ldr	r0, [pc, #108]	; (800162c <MX_TIM2_Init+0x130>)
 80015c0:	f005 fa56 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80015ca:	f000 fcd3 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ce:	2360      	movs	r3, #96	; 0x60
 80015d0:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <MX_TIM2_Init+0x130>)
 80015e8:	f004 fb54 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80015f2:	f000 fcbf 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015fa:	2301      	movs	r3, #1
 80015fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001606:	463b      	mov	r3, r7
 8001608:	2208      	movs	r2, #8
 800160a:	4619      	mov	r1, r3
 800160c:	4807      	ldr	r0, [pc, #28]	; (800162c <MX_TIM2_Init+0x130>)
 800160e:	f004 faa5 	bl	8005b5c <HAL_TIM_IC_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8001618:	f000 fcac 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800161c:	4803      	ldr	r0, [pc, #12]	; (800162c <MX_TIM2_Init+0x130>)
 800161e:	f000 ff37 	bl	8002490 <HAL_TIM_MspPostInit>
}
 8001622:	bf00      	nop
 8001624:	3748      	adds	r7, #72	; 0x48
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000630 	.word	0x20000630

08001630 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2224      	movs	r2, #36	; 0x24
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f006 f92b 	bl	800789a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	463b      	mov	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <MX_TIM3_Init+0xa4>)
 8001650:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <MX_TIM3_Init+0xa8>)
 8001652:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001654:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <MX_TIM3_Init+0xa4>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <MX_TIM3_Init+0xa4>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <MX_TIM3_Init+0xa4>)
 8001662:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001666:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_TIM3_Init+0xa4>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <MX_TIM3_Init+0xa4>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001674:	2303      	movs	r3, #3
 8001676:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800167c:	2301      	movs	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001684:	230f      	movs	r3, #15
 8001686:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800168c:	2301      	movs	r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001694:	230f      	movs	r3, #15
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4619      	mov	r1, r3
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <MX_TIM3_Init+0xa4>)
 80016a0:	f003 fff4 	bl	800568c <HAL_TIM_Encoder_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80016aa:	f000 fc63 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b6:	463b      	mov	r3, r7
 80016b8:	4619      	mov	r1, r3
 80016ba:	4806      	ldr	r0, [pc, #24]	; (80016d4 <MX_TIM3_Init+0xa4>)
 80016bc:	f005 f9d8 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80016c6:	f000 fc55 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
}
 80016ca:	bf00      	nop
 80016cc:	3730      	adds	r7, #48	; 0x30
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000240 	.word	0x20000240
 80016d8:	40000400 	.word	0x40000400

080016dc <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	; 0x30
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016e2:	f107 030c 	add.w	r3, r7, #12
 80016e6:	2224      	movs	r2, #36	; 0x24
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f006 f8d5 	bl	800789a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f0:	463b      	mov	r3, r7
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016fa:	4b21      	ldr	r3, [pc, #132]	; (8001780 <MX_TIM4_Init+0xa4>)
 80016fc:	4a21      	ldr	r2, [pc, #132]	; (8001784 <MX_TIM4_Init+0xa8>)
 80016fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001700:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <MX_TIM4_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_TIM4_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 800170c:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_TIM4_Init+0xa4>)
 800170e:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001712:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_TIM4_Init+0xa4>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <MX_TIM4_Init+0xa4>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001720:	2303      	movs	r3, #3
 8001722:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001728:	2301      	movs	r3, #1
 800172a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001730:	230f      	movs	r3, #15
 8001732:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001734:	2300      	movs	r3, #0
 8001736:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001738:	2301      	movs	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001740:	230f      	movs	r3, #15
 8001742:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM4_Init+0xa4>)
 800174c:	f003 ff9e 	bl	800568c <HAL_TIM_Encoder_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001756:	f000 fc0d 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001762:	463b      	mov	r3, r7
 8001764:	4619      	mov	r1, r3
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <MX_TIM4_Init+0xa4>)
 8001768:	f005 f982 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001772:	f000 fbff 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 8001776:	bf00      	nop
 8001778:	3730      	adds	r7, #48	; 0x30
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000a8 	.word	0x200000a8
 8001784:	40000800 	.word	0x40000800

08001788 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a8:	463b      	mov	r3, r7
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <MX_TIM5_Init+0xe8>)
 80017bc:	4a2d      	ldr	r2, [pc, #180]	; (8001874 <MX_TIM5_Init+0xec>)
 80017be:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80017c0:	4b2b      	ldr	r3, [pc, #172]	; (8001870 <MX_TIM5_Init+0xe8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b2a      	ldr	r3, [pc, #168]	; (8001870 <MX_TIM5_Init+0xe8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017cc:	4b28      	ldr	r3, [pc, #160]	; (8001870 <MX_TIM5_Init+0xe8>)
 80017ce:	f04f 32ff 	mov.w	r2, #4294967295
 80017d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <MX_TIM5_Init+0xe8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017da:	4b25      	ldr	r3, [pc, #148]	; (8001870 <MX_TIM5_Init+0xe8>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017e0:	4823      	ldr	r0, [pc, #140]	; (8001870 <MX_TIM5_Init+0xe8>)
 80017e2:	f003 fe23 	bl	800542c <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80017ec:	f000 fbc2 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fa:	4619      	mov	r1, r3
 80017fc:	481c      	ldr	r0, [pc, #112]	; (8001870 <MX_TIM5_Init+0xe8>)
 80017fe:	f004 fb61 	bl	8005ec4 <HAL_TIM_ConfigClockSource>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001808:	f000 fbb4 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800180c:	4818      	ldr	r0, [pc, #96]	; (8001870 <MX_TIM5_Init+0xe8>)
 800180e:	f003 fe98 	bl	8005542 <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001818:	f000 fbac 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4811      	ldr	r0, [pc, #68]	; (8001870 <MX_TIM5_Init+0xe8>)
 800182c:	f005 f920 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001836:	f000 fb9d 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183a:	2360      	movs	r3, #96	; 0x60
 800183c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184a:	463b      	mov	r3, r7
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <MX_TIM5_Init+0xe8>)
 8001852:	f004 fa1f 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800185c:	f000 fb8a 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <MX_TIM5_Init+0xe8>)
 8001862:	f000 fe15 	bl	8002490 <HAL_TIM_MspPostInit>
}
 8001866:	bf00      	nop
 8001868:	3738      	adds	r7, #56	; 0x38
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000200 	.word	0x20000200
 8001874:	40000c00 	.word	0x40000c00

08001878 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001888:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_TIM6_Init+0x68>)
 800188a:	4a16      	ldr	r2, [pc, #88]	; (80018e4 <MX_TIM6_Init+0x6c>)
 800188c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = TIM6_PSC_VALUE;
 800188e:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_TIM6_Init+0x68>)
 8001890:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001894:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_TIM6_Init+0x68>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = TIM6_ARR_VALUE;
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_TIM6_Init+0x68>)
 800189e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_TIM6_Init+0x68>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_TIM6_Init+0x68>)
 80018ac:	f003 fdbe 	bl	800542c <HAL_TIM_Base_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80018b6:	f000 fb5d 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <MX_TIM6_Init+0x68>)
 80018c8:	f005 f8d2 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80018d2:	f000 fb4f 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000048c 	.word	0x2000048c
 80018e4:	40001000 	.word	0x40001000

080018e8 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b09a      	sub	sp, #104	; 0x68
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
 8001918:	615a      	str	r2, [r3, #20]
 800191a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	222c      	movs	r2, #44	; 0x2c
 8001920:	2100      	movs	r1, #0
 8001922:	4618      	mov	r0, r3
 8001924:	f005 ffb9 	bl	800789a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001928:	4b56      	ldr	r3, [pc, #344]	; (8001a84 <MX_TIM8_Init+0x19c>)
 800192a:	4a57      	ldr	r2, [pc, #348]	; (8001a88 <MX_TIM8_Init+0x1a0>)
 800192c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 800192e:	4b55      	ldr	r3, [pc, #340]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001930:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001934:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 800193c:	4b51      	ldr	r3, [pc, #324]	; (8001a84 <MX_TIM8_Init+0x19c>)
 800193e:	f240 128f 	movw	r2, #399	; 0x18f
 8001942:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001944:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800194a:	4b4e      	ldr	r3, [pc, #312]	; (8001a84 <MX_TIM8_Init+0x19c>)
 800194c:	2200      	movs	r2, #0
 800194e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001952:	2200      	movs	r2, #0
 8001954:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001956:	484b      	ldr	r0, [pc, #300]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001958:	f003 fd68 	bl	800542c <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001962:	f000 fb07 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800196c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001970:	4619      	mov	r1, r3
 8001972:	4844      	ldr	r0, [pc, #272]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001974:	f004 faa6 	bl	8005ec4 <HAL_TIM_ConfigClockSource>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800197e:	f000 faf9 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001982:	4840      	ldr	r0, [pc, #256]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001984:	f003 fddd 	bl	8005542 <HAL_TIM_PWM_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800198e:	f000 faf1 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001992:	2300      	movs	r3, #0
 8001994:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800199e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019a2:	4619      	mov	r1, r3
 80019a4:	4837      	ldr	r0, [pc, #220]	; (8001a84 <MX_TIM8_Init+0x19c>)
 80019a6:	f005 f863 	bl	8006a70 <HAL_TIMEx_MasterConfigSynchronization>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80019b0:	f000 fae0 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b4:	2360      	movs	r3, #96	; 0x60
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019bc:	2300      	movs	r3, #0
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019cc:	2300      	movs	r3, #0
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d4:	2200      	movs	r2, #0
 80019d6:	4619      	mov	r1, r3
 80019d8:	482a      	ldr	r0, [pc, #168]	; (8001a84 <MX_TIM8_Init+0x19c>)
 80019da:	f004 f95b 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80019e4:	f000 fac6 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ec:	2204      	movs	r2, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4824      	ldr	r0, [pc, #144]	; (8001a84 <MX_TIM8_Init+0x19c>)
 80019f2:	f004 f94f 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80019fc:	f000 faba 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a04:	2208      	movs	r2, #8
 8001a06:	4619      	mov	r1, r3
 8001a08:	481e      	ldr	r0, [pc, #120]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001a0a:	f004 f943 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001a14:	f000 faae 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a1c:	220c      	movs	r2, #12
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001a22:	f004 f937 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001a2c:	f000 faa2 	bl	8001f74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001a66:	f005 f891 	bl	8006b8c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001a70:	f000 fa80 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM8_Init+0x19c>)
 8001a76:	f000 fd0b 	bl	8002490 <HAL_TIM_MspPostInit>
}
 8001a7a:	bf00      	nop
 8001a7c:	3768      	adds	r7, #104	; 0x68
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000068 	.word	0x20000068
 8001a88:	40010400 	.word	0x40010400

08001a8c <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
 8001aa0:	615a      	str	r2, [r3, #20]
 8001aa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <MX_TIM9_Init+0x9c>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001ab8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001aca:	4816      	ldr	r0, [pc, #88]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001acc:	f003 fd39 	bl	8005542 <HAL_TIM_PWM_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001ad6:	f000 fa4d 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ada:	2360      	movs	r3, #96	; 0x60
 8001adc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	2200      	movs	r2, #0
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001af2:	f004 f8cf 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001afc:	f000 fa3a 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2204      	movs	r2, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4807      	ldr	r0, [pc, #28]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001b08:	f004 f8c4 	bl	8005c94 <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001b12:	f000 fa2f 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <MX_TIM9_Init+0x98>)
 8001b18:	f000 fcba 	bl	8002490 <HAL_TIM_MspPostInit>
}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000050c 	.word	0x2000050c
 8001b28:	40014000 	.word	0x40014000

08001b2c <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b32:	4a15      	ldr	r2, [pc, #84]	; (8001b88 <MX_UART4_Init+0x5c>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001b36:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	; (8001b84 <MX_UART4_Init+0x58>)
 8001b70:	f005 f8a8 	bl	8006cc4 <HAL_UART_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001b7a:	f000 f9fb 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000054c 	.word	0x2000054c
 8001b88:	40004c00 	.word	0x40004c00

08001b8c <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001b90:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <MX_UART5_Init+0x58>)
 8001b92:	4a15      	ldr	r2, [pc, #84]	; (8001be8 <MX_UART5_Init+0x5c>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <MX_UART5_Init+0x58>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_UART5_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <MX_UART5_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_UART5_Init+0x58>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_UART5_Init+0x58>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <MX_UART5_Init+0x58>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_UART5_Init+0x58>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <MX_UART5_Init+0x58>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_UART5_Init+0x58>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001bce:	4805      	ldr	r0, [pc, #20]	; (8001be4 <MX_UART5_Init+0x58>)
 8001bd0:	f005 f878 	bl	8006cc4 <HAL_UART_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001bda:	f000 f9cb 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000280 	.word	0x20000280
 8001be8:	40005000 	.word	0x40005000

08001bec <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bf0:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001bf2:	4a15      	ldr	r2, [pc, #84]	; (8001c48 <MX_USART1_UART_Init+0x5c>)
 8001bf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bf6:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001bf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c12:	220c      	movs	r2, #12
 8001c14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_USART1_UART_Init+0x58>)
 8001c30:	f005 f848 	bl	8006cc4 <HAL_UART_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c3a:	f000 f99b 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000348 	.word	0x20000348
 8001c48:	40011000 	.word	0x40011000

08001c4c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c52:	4a14      	ldr	r2, [pc, #80]	; (8001ca4 <MX_USART2_UART_Init+0x58>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c58:	4a13      	ldr	r2, [pc, #76]	; (8001ca8 <MX_USART2_UART_Init+0x5c>)
 8001c5a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c70:	220c      	movs	r2, #12
 8001c72:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c80:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_USART2_UART_Init+0x54>)
 8001c8e:	f005 f819 	bl	8006cc4 <HAL_UART_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8001c98:	f000 f96c 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000670 	.word	0x20000670
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	000f4240 	.word	0x000f4240

08001cac <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <MX_USART3_UART_Init+0x5c>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART3_UART_Init+0x58>)
 8001cf0:	f004 ffe8 	bl	8006cc4 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001cfa:	f000 f93b 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200000e8 	.word	0x200000e8
 8001d08:	40004800 	.word	0x40004800

08001d0c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08e      	sub	sp, #56	; 0x38
 8001d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
 8001d20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d22:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a8b      	ldr	r2, [pc, #556]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d28:	f043 0310 	orr.w	r3, r3, #16
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	623b      	str	r3, [r7, #32]
 8001d38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3a:	4b86      	ldr	r3, [pc, #536]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a85      	ldr	r2, [pc, #532]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d40:	f043 0304 	orr.w	r3, r3, #4
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b83      	ldr	r3, [pc, #524]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d52:	4b80      	ldr	r3, [pc, #512]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a7f      	ldr	r2, [pc, #508]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b7d      	ldr	r3, [pc, #500]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0320 	and.w	r3, r3, #32
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d6a:	4b7a      	ldr	r3, [pc, #488]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a79      	ldr	r2, [pc, #484]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b77      	ldr	r3, [pc, #476]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4b74      	ldr	r3, [pc, #464]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a73      	ldr	r2, [pc, #460]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b71      	ldr	r3, [pc, #452]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a6d      	ldr	r2, [pc, #436]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db2:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001db8:	f043 0308 	orr.w	r3, r3, #8
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b65      	ldr	r3, [pc, #404]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dca:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a61      	ldr	r2, [pc, #388]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <MX_GPIO_Init+0x248>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin | GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2118      	movs	r1, #24
 8001de6:	485c      	ldr	r0, [pc, #368]	; (8001f58 <MX_GPIO_Init+0x24c>)
 8001de8:	f001 fb8e 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001dec:	2200      	movs	r2, #0
 8001dee:	f244 0181 	movw	r1, #16513	; 0x4081
 8001df2:	485a      	ldr	r0, [pc, #360]	; (8001f5c <MX_GPIO_Init+0x250>)
 8001df4:	f001 fb88 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2140      	movs	r1, #64	; 0x40
 8001dfc:	4858      	ldr	r0, [pc, #352]	; (8001f60 <MX_GPIO_Init+0x254>)
 8001dfe:	f001 fb83 	bl	8003508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin | GPIO_OUT_SPI_CS_LCD_Pin;
 8001e02:	2318      	movs	r3, #24
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e16:	4619      	mov	r1, r3
 8001e18:	484f      	ldr	r0, [pc, #316]	; (8001f58 <MX_GPIO_Init+0x24c>)
 8001e1a:	f001 f9c9 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin | GPIO_EXTI3_IMU_IRQ_Pin | GPIO_EXTI4_KPAD_IRQ_Pin | GPIO_EXTI8_USER_BUT1_IRQ_Pin | GPIO_EXTI9_USER_BUT2_IRQ_Pin | GPIO_EXTI10_BUMP1_IRQ_Pin | GPIO_EXTI11_BUMP2_IRQ_Pin | GPIO_EXTI12_BUMP3_IRQ_Pin | GPIO_EXTI13_BUMP4_IRQ_Pin;
 8001e1e:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <MX_GPIO_Init+0x258>)
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e30:	4619      	mov	r1, r3
 8001e32:	484d      	ldr	r0, [pc, #308]	; (8001f68 <MX_GPIO_Init+0x25c>)
 8001e34:	f001 f9bc 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001e38:	2332      	movs	r3, #50	; 0x32
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e48:	230b      	movs	r3, #11
 8001e4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	4846      	ldr	r0, [pc, #280]	; (8001f6c <MX_GPIO_Init+0x260>)
 8001e54:	f001 f9ac 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001e58:	2386      	movs	r3, #134	; 0x86
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e68:	230b      	movs	r3, #11
 8001e6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e70:	4619      	mov	r1, r3
 8001e72:	483f      	ldr	r0, [pc, #252]	; (8001f70 <MX_GPIO_Init+0x264>)
 8001e74:	f001 f99c 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001e78:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4832      	ldr	r0, [pc, #200]	; (8001f5c <MX_GPIO_Init+0x250>)
 8001e92:	f001 f98d 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001e96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ea8:	230b      	movs	r3, #11
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	482a      	ldr	r0, [pc, #168]	; (8001f5c <MX_GPIO_Init+0x250>)
 8001eb4:	f001 f97c 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eb8:	2340      	movs	r3, #64	; 0x40
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4824      	ldr	r0, [pc, #144]	; (8001f60 <MX_GPIO_Init+0x254>)
 8001ed0:	f001 f96e 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	481e      	ldr	r0, [pc, #120]	; (8001f60 <MX_GPIO_Init+0x254>)
 8001ee8:	f001 f962 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 8001eec:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efa:	2303      	movs	r3, #3
 8001efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001efe:	230a      	movs	r3, #10
 8001f00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f06:	4619      	mov	r1, r3
 8001f08:	4819      	ldr	r0, [pc, #100]	; (8001f70 <MX_GPIO_Init+0x264>)
 8001f0a:	f001 f951 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	4619      	mov	r1, r3
 8001f22:	4813      	ldr	r0, [pc, #76]	; (8001f70 <MX_GPIO_Init+0x264>)
 8001f24:	f001 f944 	bl	80031b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8001f28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f36:	2303      	movs	r3, #3
 8001f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f3a:	230b      	movs	r3, #11
 8001f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f42:	4619      	mov	r1, r3
 8001f44:	4806      	ldr	r0, [pc, #24]	; (8001f60 <MX_GPIO_Init+0x254>)
 8001f46:	f001 f933 	bl	80031b0 <HAL_GPIO_Init>
}
 8001f4a:	bf00      	nop
 8001f4c:	3738      	adds	r7, #56	; 0x38
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40021800 	.word	0x40021800
 8001f64:	10110000 	.word	0x10110000
 8001f68:	40021400 	.word	0x40021400
 8001f6c:	40020800 	.word	0x40020800
 8001f70:	40020000 	.word	0x40020000

08001f74 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <Error_Handler+0x6>

08001f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_MspInit+0x44>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_MspInit+0x44>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_MspInit+0x44>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a15      	ldr	r2, [pc, #84]	; (8002038 <HAL_ADC_MspInit+0x74>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d123      	bne.n	800202e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_ADC_MspInit+0x78>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a14      	ldr	r2, [pc, #80]	; (800203c <HAL_ADC_MspInit+0x78>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_ADC_MspInit+0x78>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_ADC_MspInit+0x78>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_ADC_MspInit+0x78>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_ADC_MspInit+0x78>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 8002016:	2308      	movs	r3, #8
 8002018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201a:	2303      	movs	r3, #3
 800201c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_ADC_MspInit+0x7c>)
 800202a:	f001 f8c1 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40012000 	.word	0x40012000
 800203c:	40023800 	.word	0x40023800
 8002040:	40020000 	.word	0x40020000

08002044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a2e      	ldr	r2, [pc, #184]	; (800211c <HAL_I2C_MspInit+0xd8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d129      	bne.n	80020ba <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a2d      	ldr	r2, [pc, #180]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800207e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002084:	2312      	movs	r3, #18
 8002086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002088:	2301      	movs	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208c:	2303      	movs	r3, #3
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002090:	2304      	movs	r3, #4
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	4619      	mov	r1, r3
 800209a:	4822      	ldr	r0, [pc, #136]	; (8002124 <HAL_I2C_MspInit+0xe0>)
 800209c:	f001 f888 	bl	80031b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 80020a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020aa:	6413      	str	r3, [r2, #64]	; 0x40
 80020ac:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020b8:	e02c      	b.n	8002114 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_I2C_MspInit+0xe4>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d127      	bne.n	8002114 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	4a15      	ldr	r2, [pc, #84]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 80020ca:	f043 0320 	orr.w	r3, r3, #32
 80020ce:	6313      	str	r3, [r2, #48]	; 0x30
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020dc:	2303      	movs	r3, #3
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e0:	2312      	movs	r3, #18
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020ec:	2304      	movs	r3, #4
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	480d      	ldr	r0, [pc, #52]	; (800212c <HAL_I2C_MspInit+0xe8>)
 80020f8:	f001 f85a 	bl	80031b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	4a07      	ldr	r2, [pc, #28]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 8002102:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002106:	6413      	str	r3, [r2, #64]	; 0x40
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_I2C_MspInit+0xdc>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	bf00      	nop
 8002116:	3730      	adds	r7, #48	; 0x30
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40005400 	.word	0x40005400
 8002120:	40023800 	.word	0x40023800
 8002124:	40020400 	.word	0x40020400
 8002128:	40005800 	.word	0x40005800
 800212c:	40021400 	.word	0x40021400

08002130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a33      	ldr	r2, [pc, #204]	; (800221c <HAL_SPI_MspInit+0xec>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d160      	bne.n	8002214 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002152:	4b33      	ldr	r3, [pc, #204]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a32      	ldr	r2, [pc, #200]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 8002158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b2a      	ldr	r3, [pc, #168]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002182:	4b27      	ldr	r3, [pc, #156]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a26      	ldr	r2, [pc, #152]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a20      	ldr	r2, [pc, #128]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 80021a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b1e      	ldr	r3, [pc, #120]	; (8002220 <HAL_SPI_MspInit+0xf0>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021b2:	2320      	movs	r3, #32
 80021b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	2303      	movs	r3, #3
 80021c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021c2:	2305      	movs	r3, #5
 80021c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4815      	ldr	r0, [pc, #84]	; (8002224 <HAL_SPI_MspInit+0xf4>)
 80021ce:	f000 ffef 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e2:	2305      	movs	r3, #5
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	4619      	mov	r1, r3
 80021ec:	480e      	ldr	r0, [pc, #56]	; (8002228 <HAL_SPI_MspInit+0xf8>)
 80021ee:	f000 ffdf 	bl	80031b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002204:	2305      	movs	r3, #5
 8002206:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	4619      	mov	r1, r3
 800220e:	4807      	ldr	r0, [pc, #28]	; (800222c <HAL_SPI_MspInit+0xfc>)
 8002210:	f000 ffce 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	3730      	adds	r7, #48	; 0x30
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40013000 	.word	0x40013000
 8002220:	40023800 	.word	0x40023800
 8002224:	40020000 	.word	0x40020000
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40021800 	.word	0x40021800

08002230 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08e      	sub	sp, #56	; 0x38
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3f      	ldr	r2, [pc, #252]	; (800234c <HAL_TIM_Base_MspInit+0x11c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10c      	bne.n	800226c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002252:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a3e      	ldr	r2, [pc, #248]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800226a:	e06b      	b.n	8002344 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002274:	d129      	bne.n	80022ca <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002276:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	4a35      	ldr	r2, [pc, #212]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6413      	str	r3, [r2, #64]	; 0x40
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6313      	str	r3, [r2, #48]	; 0x30
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 80022a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b8:	2301      	movs	r3, #1
 80022ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	4824      	ldr	r0, [pc, #144]	; (8002354 <HAL_TIM_Base_MspInit+0x124>)
 80022c4:	f000 ff74 	bl	80031b0 <HAL_GPIO_Init>
}
 80022c8:	e03c      	b.n	8002344 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a22      	ldr	r2, [pc, #136]	; (8002358 <HAL_TIM_Base_MspInit+0x128>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d10c      	bne.n	80022ee <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	6413      	str	r3, [r2, #64]	; 0x40
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697b      	ldr	r3, [r7, #20]
}
 80022ec:	e02a      	b.n	8002344 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM6)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_TIM_Base_MspInit+0x12c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d114      	bne.n	8002322 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 80022fe:	f043 0310 	orr.w	r3, r3, #16
 8002302:	6413      	str	r3, [r2, #64]	; 0x40
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2101      	movs	r1, #1
 8002314:	2036      	movs	r0, #54	; 0x36
 8002316:	f000 ff14 	bl	8003142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800231a:	2036      	movs	r0, #54	; 0x36
 800231c:	f000 ff2d 	bl	800317a <HAL_NVIC_EnableIRQ>
}
 8002320:	e010      	b.n	8002344 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM8)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a0e      	ldr	r2, [pc, #56]	; (8002360 <HAL_TIM_Base_MspInit+0x130>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d10b      	bne.n	8002344 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	4a07      	ldr	r2, [pc, #28]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 8002332:	f043 0302 	orr.w	r3, r3, #2
 8002336:	6453      	str	r3, [r2, #68]	; 0x44
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_TIM_Base_MspInit+0x120>)
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	bf00      	nop
 8002346:	3738      	adds	r7, #56	; 0x38
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40010000 	.word	0x40010000
 8002350:	40023800 	.word	0x40023800
 8002354:	40020400 	.word	0x40020400
 8002358:	40000c00 	.word	0x40000c00
 800235c:	40001000 	.word	0x40001000
 8002360:	40010400 	.word	0x40010400

08002364 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	; 0x30
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 031c 	add.w	r3, r7, #28
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2e      	ldr	r2, [pc, #184]	; (800243c <HAL_TIM_Encoder_MspInit+0xd8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d128      	bne.n	80023d8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a2d      	ldr	r2, [pc, #180]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
 800239c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a27      	ldr	r2, [pc, #156]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80023b6:	2330      	movs	r3, #48	; 0x30
 80023b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023c6:	2302      	movs	r3, #2
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	f107 031c 	add.w	r3, r7, #28
 80023ce:	4619      	mov	r1, r3
 80023d0:	481c      	ldr	r0, [pc, #112]	; (8002444 <HAL_TIM_Encoder_MspInit+0xe0>)
 80023d2:	f000 feed 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023d6:	e02d      	b.n	8002434 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1a      	ldr	r2, [pc, #104]	; (8002448 <HAL_TIM_Encoder_MspInit+0xe4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d128      	bne.n	8002434 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023e2:	4b17      	ldr	r3, [pc, #92]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a16      	ldr	r2, [pc, #88]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b14      	ldr	r3, [pc, #80]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	4b11      	ldr	r3, [pc, #68]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 8002412:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002424:	2302      	movs	r3, #2
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002428:	f107 031c 	add.w	r3, r7, #28
 800242c:	4619      	mov	r1, r3
 800242e:	4807      	ldr	r0, [pc, #28]	; (800244c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002430:	f000 febe 	bl	80031b0 <HAL_GPIO_Init>
}
 8002434:	bf00      	nop
 8002436:	3730      	adds	r7, #48	; 0x30
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40000400 	.word	0x40000400
 8002440:	40023800 	.word	0x40023800
 8002444:	40020400 	.word	0x40020400
 8002448:	40000800 	.word	0x40000800
 800244c:	40020c00 	.word	0x40020c00

08002450 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <HAL_TIM_PWM_MspInit+0x38>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10b      	bne.n	800247a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_TIM_PWM_MspInit+0x3c>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_TIM_PWM_MspInit+0x3c>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_TIM_PWM_MspInit+0x3c>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40014000 	.word	0x40014000
 800248c:	40023800 	.word	0x40023800

08002490 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08c      	sub	sp, #48	; 0x30
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 031c 	add.w	r3, r7, #28
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a56      	ldr	r2, [pc, #344]	; (8002608 <HAL_TIM_MspPostInit+0x178>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d11d      	bne.n	80024ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024b2:	4b56      	ldr	r3, [pc, #344]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a55      	ldr	r2, [pc, #340]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 80024b8:	f043 0310 	orr.w	r3, r3, #16
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80024ca:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024dc:	2301      	movs	r3, #1
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	4619      	mov	r1, r3
 80024e6:	484a      	ldr	r0, [pc, #296]	; (8002610 <HAL_TIM_MspPostInit+0x180>)
 80024e8:	f000 fe62 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80024ec:	e088      	b.n	8002600 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d11d      	bne.n	8002534 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f8:	4b44      	ldr	r3, [pc, #272]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	4a43      	ldr	r2, [pc, #268]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6313      	str	r3, [r2, #48]	; 0x30
 8002504:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 8002510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002522:	2301      	movs	r3, #1
 8002524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002526:	f107 031c 	add.w	r3, r7, #28
 800252a:	4619      	mov	r1, r3
 800252c:	4839      	ldr	r0, [pc, #228]	; (8002614 <HAL_TIM_MspPostInit+0x184>)
 800252e:	f000 fe3f 	bl	80031b0 <HAL_GPIO_Init>
}
 8002532:	e065      	b.n	8002600 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a37      	ldr	r2, [pc, #220]	; (8002618 <HAL_TIM_MspPostInit+0x188>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d11c      	bne.n	8002578 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b33      	ldr	r3, [pc, #204]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a32      	ldr	r2, [pc, #200]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b30      	ldr	r3, [pc, #192]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002556:	2301      	movs	r3, #1
 8002558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002566:	2302      	movs	r3, #2
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	4619      	mov	r1, r3
 8002570:	4828      	ldr	r0, [pc, #160]	; (8002614 <HAL_TIM_MspPostInit+0x184>)
 8002572:	f000 fe1d 	bl	80031b0 <HAL_GPIO_Init>
}
 8002576:	e043      	b.n	8002600 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a27      	ldr	r2, [pc, #156]	; (800261c <HAL_TIM_MspPostInit+0x18c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11d      	bne.n	80025be <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a21      	ldr	r2, [pc, #132]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 800259a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800259e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025ac:	2303      	movs	r3, #3
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	481a      	ldr	r0, [pc, #104]	; (8002620 <HAL_TIM_MspPostInit+0x190>)
 80025b8:	f000 fdfa 	bl	80031b0 <HAL_GPIO_Init>
}
 80025bc:	e020      	b.n	8002600 <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_TIM_MspPostInit+0x194>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d11b      	bne.n	8002600 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	4a0f      	ldr	r2, [pc, #60]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 80025ce:	f043 0310 	orr.w	r3, r3, #16
 80025d2:	6313      	str	r3, [r2, #48]	; 0x30
 80025d4:	4b0d      	ldr	r3, [pc, #52]	; (800260c <HAL_TIM_MspPostInit+0x17c>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80025e0:	2360      	movs	r3, #96	; 0x60
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025f0:	2303      	movs	r3, #3
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <HAL_TIM_MspPostInit+0x180>)
 80025fc:	f000 fdd8 	bl	80031b0 <HAL_GPIO_Init>
}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	; 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40010000 	.word	0x40010000
 800260c:	40023800 	.word	0x40023800
 8002610:	40021000 	.word	0x40021000
 8002614:	40020000 	.word	0x40020000
 8002618:	40000c00 	.word	0x40000c00
 800261c:	40010400 	.word	0x40010400
 8002620:	40020800 	.word	0x40020800
 8002624:	40014000 	.word	0x40014000

08002628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b092      	sub	sp, #72	; 0x48
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a8b      	ldr	r2, [pc, #556]	; (8002874 <HAL_UART_MspInit+0x24c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d129      	bne.n	800269e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <HAL_UART_MspInit+0x250>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a8a      	ldr	r2, [pc, #552]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b88      	ldr	r3, [pc, #544]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
 8002660:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002662:	4b85      	ldr	r3, [pc, #532]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a84      	ldr	r2, [pc, #528]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b82      	ldr	r3, [pc, #520]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 800267a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800267e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800268c:	2308      	movs	r3, #8
 800268e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002690:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002694:	4619      	mov	r1, r3
 8002696:	4879      	ldr	r0, [pc, #484]	; (800287c <HAL_UART_MspInit+0x254>)
 8002698:	f000 fd8a 	bl	80031b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800269c:	e0e6      	b.n	800286c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==UART5)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a77      	ldr	r2, [pc, #476]	; (8002880 <HAL_UART_MspInit+0x258>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d146      	bne.n	8002736 <HAL_UART_MspInit+0x10e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	4a72      	ldr	r2, [pc, #456]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b2:	6413      	str	r3, [r2, #64]	; 0x40
 80026b4:	4b70      	ldr	r3, [pc, #448]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c0:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	4a6c      	ldr	r2, [pc, #432]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026c6:	f043 0302 	orr.w	r3, r3, #2
 80026ca:	6313      	str	r3, [r2, #48]	; 0x30
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	627b      	str	r3, [r7, #36]	; 0x24
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d8:	4b67      	ldr	r3, [pc, #412]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	4a66      	ldr	r2, [pc, #408]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6313      	str	r3, [r2, #48]	; 0x30
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_UART_MspInit+0x250>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	623b      	str	r3, [r7, #32]
 80026ee:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fe:	2303      	movs	r3, #3
 8002700:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002702:	2308      	movs	r3, #8
 8002704:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800270a:	4619      	mov	r1, r3
 800270c:	485d      	ldr	r0, [pc, #372]	; (8002884 <HAL_UART_MspInit+0x25c>)
 800270e:	f000 fd4f 	bl	80031b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002720:	2303      	movs	r3, #3
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002724:	2308      	movs	r3, #8
 8002726:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002728:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800272c:	4619      	mov	r1, r3
 800272e:	4853      	ldr	r0, [pc, #332]	; (800287c <HAL_UART_MspInit+0x254>)
 8002730:	f000 fd3e 	bl	80031b0 <HAL_GPIO_Init>
}
 8002734:	e09a      	b.n	800286c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a53      	ldr	r2, [pc, #332]	; (8002888 <HAL_UART_MspInit+0x260>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d139      	bne.n	80027b4 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002740:	4b4d      	ldr	r3, [pc, #308]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	4a4c      	ldr	r2, [pc, #304]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002746:	f043 0310 	orr.w	r3, r3, #16
 800274a:	6453      	str	r3, [r2, #68]	; 0x44
 800274c:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <HAL_UART_MspInit+0x250>)
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_UART_MspInit+0x250>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4a46      	ldr	r2, [pc, #280]	; (8002878 <HAL_UART_MspInit+0x250>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	6313      	str	r3, [r2, #48]	; 0x30
 8002764:	4b44      	ldr	r3, [pc, #272]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002782:	2304      	movs	r3, #4
 8002784:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002786:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800278a:	4619      	mov	r1, r3
 800278c:	483d      	ldr	r0, [pc, #244]	; (8002884 <HAL_UART_MspInit+0x25c>)
 800278e:	f000 fd0f 	bl	80031b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002792:	2340      	movs	r3, #64	; 0x40
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027a2:	2307      	movs	r3, #7
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027aa:	4619      	mov	r1, r3
 80027ac:	4835      	ldr	r0, [pc, #212]	; (8002884 <HAL_UART_MspInit+0x25c>)
 80027ae:	f000 fcff 	bl	80031b0 <HAL_GPIO_Init>
}
 80027b2:	e05b      	b.n	800286c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a34      	ldr	r2, [pc, #208]	; (800288c <HAL_UART_MspInit+0x264>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d128      	bne.n	8002810 <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027be:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_UART_MspInit+0x250>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_UART_MspInit+0x250>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_UART_MspInit+0x250>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d6:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_UART_MspInit+0x250>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a27      	ldr	r2, [pc, #156]	; (8002878 <HAL_UART_MspInit+0x250>)
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_UART_MspInit+0x250>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027ee:	2360      	movs	r3, #96	; 0x60
 80027f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fa:	2303      	movs	r3, #3
 80027fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027fe:	2307      	movs	r3, #7
 8002800:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002802:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002806:	4619      	mov	r1, r3
 8002808:	4821      	ldr	r0, [pc, #132]	; (8002890 <HAL_UART_MspInit+0x268>)
 800280a:	f000 fcd1 	bl	80031b0 <HAL_GPIO_Init>
}
 800280e:	e02d      	b.n	800286c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <HAL_UART_MspInit+0x26c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d128      	bne.n	800286c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 800281a:	4b17      	ldr	r3, [pc, #92]	; (8002878 <HAL_UART_MspInit+0x250>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a16      	ldr	r2, [pc, #88]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002838:	f043 0308 	orr.w	r3, r3, #8
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <HAL_UART_MspInit+0x250>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800284a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002850:	2302      	movs	r3, #2
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002858:	2303      	movs	r3, #3
 800285a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800285c:	2307      	movs	r3, #7
 800285e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002860:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002864:	4619      	mov	r1, r3
 8002866:	480a      	ldr	r0, [pc, #40]	; (8002890 <HAL_UART_MspInit+0x268>)
 8002868:	f000 fca2 	bl	80031b0 <HAL_GPIO_Init>
}
 800286c:	bf00      	nop
 800286e:	3748      	adds	r7, #72	; 0x48
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40004c00 	.word	0x40004c00
 8002878:	40023800 	.word	0x40023800
 800287c:	40020800 	.word	0x40020800
 8002880:	40005000 	.word	0x40005000
 8002884:	40020400 	.word	0x40020400
 8002888:	40011000 	.word	0x40011000
 800288c:	40004400 	.word	0x40004400
 8002890:	40020c00 	.word	0x40020c00
 8002894:	40004800 	.word	0x40004800

08002898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800289c:	e7fe      	b.n	800289c <NMI_Handler+0x4>

0800289e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028a2:	e7fe      	b.n	80028a2 <HardFault_Handler+0x4>

080028a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028a8:	e7fe      	b.n	80028a8 <MemManage_Handler+0x4>

080028aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028ae:	e7fe      	b.n	80028ae <BusFault_Handler+0x4>

080028b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028b4:	e7fe      	b.n	80028b4 <UsageFault_Handler+0x4>

080028b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr

080028d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028e4:	f000 f888 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <TIM6_DAC_IRQHandler+0x10>)
 80028f2:	f002 ff95 	bl	8005820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000048c 	.word	0x2000048c

08002900 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <SystemInit+0x28>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <SystemInit+0x28>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SystemInit+0x28>)
 8002916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800291a:	609a      	str	r2, [r3, #8]
#endif
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002964 <LoopFillZerobss+0x14>
 8002930:	2100      	movs	r1, #0
 8002932:	e003      	b.n	800293c <LoopCopyDataInit>

08002934 <CopyDataInit>:
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <LoopFillZerobss+0x18>)
 8002936:	585b      	ldr	r3, [r3, r1]
 8002938:	5043      	str	r3, [r0, r1]
 800293a:	3104      	adds	r1, #4

0800293c <LoopCopyDataInit>:
 800293c:	480b      	ldr	r0, [pc, #44]	; (800296c <LoopFillZerobss+0x1c>)
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <LoopFillZerobss+0x20>)
 8002940:	1842      	adds	r2, r0, r1
 8002942:	429a      	cmp	r2, r3
 8002944:	d3f6      	bcc.n	8002934 <CopyDataInit>
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LoopFillZerobss+0x24>)
 8002948:	e002      	b.n	8002950 <LoopFillZerobss>

0800294a <FillZerobss>:
 800294a:	2300      	movs	r3, #0
 800294c:	f842 3b04 	str.w	r3, [r2], #4

08002950 <LoopFillZerobss>:
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <LoopFillZerobss+0x28>)
 8002952:	429a      	cmp	r2, r3
 8002954:	d3f9      	bcc.n	800294a <FillZerobss>
 8002956:	f7ff ffd3 	bl	8002900 <SystemInit>
 800295a:	f004 ff6f 	bl	800783c <__libc_init_array>
 800295e:	f7fe fa45 	bl	8000dec <main>
 8002962:	4770      	bx	lr
 8002964:	20080000 	.word	0x20080000
 8002968:	080078ec 	.word	0x080078ec
 800296c:	20000000 	.word	0x20000000
 8002970:	2000002c 	.word	0x2000002c
 8002974:	2000002c 	.word	0x2000002c
 8002978:	200006fc 	.word	0x200006fc

0800297c <ADC_IRQHandler>:
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>

0800297e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002982:	2003      	movs	r0, #3
 8002984:	f000 fbd2 	bl	800312c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002988:	2000      	movs	r0, #0
 800298a:	f000 f805 	bl	8002998 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800298e:	f7ff faf5 	bl	8001f7c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fbed 	bl	8003196 <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295
 80029d4:	f000 fbb5 	bl	8003142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000020 	.word	0x20000020
 80029f0:	20000028 	.word	0x20000028
 80029f4:	20000024 	.word	0x20000024

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000028 	.word	0x20000028
 8002a1c:	200006f8 	.word	0x200006f8

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	200006f8 	.word	0x200006f8

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <HAL_Delay+0x40>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000028 	.word	0x20000028

08002a7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e031      	b.n	8002af6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7ff fa92 	bl	8001fc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_ADC_Init+0x84>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	f043 0202 	orr.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f964 	bl	8002d98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae6:	e001      	b.n	8002aec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	ffffeefd 	.word	0xffffeefd

08002b04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x1c>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e12a      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x272>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d93a      	bls.n	8002ba6 <HAL_ADC_ConfigChannel+0xa2>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b38:	d035      	beq.n	8002ba6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68d9      	ldr	r1, [r3, #12]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	461a      	mov	r2, r3
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b1e      	subs	r3, #30
 8002b50:	2207      	movs	r2, #7
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a87      	ldr	r2, [pc, #540]	; (8002d84 <HAL_ADC_ConfigChannel+0x280>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10a      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68d9      	ldr	r1, [r3, #12]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	061a      	lsls	r2, r3, #24
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b7e:	e035      	b.n	8002bec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68d9      	ldr	r1, [r3, #12]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4403      	add	r3, r0
 8002b98:	3b1e      	subs	r3, #30
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba4:	e022      	b.n	8002bec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6919      	ldr	r1, [r3, #16]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	2207      	movs	r2, #7
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6919      	ldr	r1, [r3, #16]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4603      	mov	r3, r0
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	4403      	add	r3, r0
 8002be2:	409a      	lsls	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b06      	cmp	r3, #6
 8002bf2:	d824      	bhi.n	8002c3e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	3b05      	subs	r3, #5
 8002c06:	221f      	movs	r2, #31
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43da      	mvns	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	400a      	ands	r2, r1
 8002c14:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3b05      	subs	r3, #5
 8002c30:	fa00 f203 	lsl.w	r2, r0, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34
 8002c3c:	e04c      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d824      	bhi.n	8002c90 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	3b23      	subs	r3, #35	; 0x23
 8002c58:	221f      	movs	r2, #31
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	400a      	ands	r2, r1
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b23      	subs	r3, #35	; 0x23
 8002c82:	fa00 f203 	lsl.w	r2, r0, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8e:	e023      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b41      	subs	r3, #65	; 0x41
 8002ca2:	221f      	movs	r2, #31
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	400a      	ands	r2, r1
 8002cb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	3b41      	subs	r3, #65	; 0x41
 8002ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2a      	ldr	r2, [pc, #168]	; (8002d88 <HAL_ADC_ConfigChannel+0x284>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cea:	d105      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <HAL_ADC_ConfigChannel+0x288>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4a26      	ldr	r2, [pc, #152]	; (8002d8c <HAL_ADC_ConfigChannel+0x288>)
 8002cf2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002cf6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <HAL_ADC_ConfigChannel+0x284>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d109      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x212>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b12      	cmp	r3, #18
 8002d08:	d105      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_ADC_ConfigChannel+0x288>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	4a1f      	ldr	r2, [pc, #124]	; (8002d8c <HAL_ADC_ConfigChannel+0x288>)
 8002d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <HAL_ADC_ConfigChannel+0x284>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d125      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x268>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_ADC_ConfigChannel+0x280>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <HAL_ADC_ConfigChannel+0x22e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b11      	cmp	r3, #17
 8002d30:	d11c      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <HAL_ADC_ConfigChannel+0x288>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <HAL_ADC_ConfigChannel+0x288>)
 8002d38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d3c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_ADC_ConfigChannel+0x280>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d111      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_ADC_ConfigChannel+0x28c>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a11      	ldr	r2, [pc, #68]	; (8002d94 <HAL_ADC_ConfigChannel+0x290>)
 8002d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d52:	0c9a      	lsrs	r2, r3, #18
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d5e:	e002      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1f9      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	10000012 	.word	0x10000012
 8002d88:	40012000 	.word	0x40012000
 8002d8c:	40012300 	.word	0x40012300
 8002d90:	20000020 	.word	0x20000020
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002da0:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <ADC_Init+0x1ec>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a77      	ldr	r2, [pc, #476]	; (8002f84 <ADC_Init+0x1ec>)
 8002da6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002daa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002dac:	4b75      	ldr	r3, [pc, #468]	; (8002f84 <ADC_Init+0x1ec>)
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	4973      	ldr	r1, [pc, #460]	; (8002f84 <ADC_Init+0x1ec>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	021a      	lsls	r2, r3, #8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <ADC_Init+0x1f0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6899      	ldr	r1, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e00f      	b.n	8002e92 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0202 	bic.w	r2, r2, #2
 8002ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6899      	ldr	r1, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	005a      	lsls	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01b      	beq.n	8002ef8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	3b01      	subs	r3, #1
 8002eec:	035a      	lsls	r2, r3, #13
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	e007      	b.n	8002f08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	051a      	lsls	r2, r3, #20
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f4a:	025a      	lsls	r2, r3, #9
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6899      	ldr	r1, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	029a      	lsls	r2, r3, #10
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40012300 	.word	0x40012300
 8002f88:	0f000001 	.word	0x0f000001

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <__NVIC_SetPriorityGrouping+0x40>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <__NVIC_SetPriorityGrouping+0x40>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00
 8002fd0:	05fa0000 	.word	0x05fa0000

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	; (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
	...

080030e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030f8:	d301      	bcc.n	80030fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00f      	b.n	800311e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030fe:	4a0a      	ldr	r2, [pc, #40]	; (8003128 <SysTick_Config+0x40>)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003106:	210f      	movs	r1, #15
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	f7ff ff8e 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <SysTick_Config+0x40>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <SysTick_Config+0x40>)
 8003118:	2207      	movs	r2, #7
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7ff ff29 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	4603      	mov	r3, r0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003154:	f7ff ff3e 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 8003158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	6978      	ldr	r0, [r7, #20]
 8003160:	f7ff ff8e 	bl	8003080 <NVIC_EncodePriority>
 8003164:	4602      	mov	r2, r0
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff5d 	bl	800302c <__NVIC_SetPriority>
}
 8003172:	bf00      	nop
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	4603      	mov	r3, r0
 8003182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff31 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b082      	sub	sp, #8
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ffa2 	bl	80030e8 <SysTick_Config>
 80031a4:	4603      	mov	r3, r0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <HAL_GPIO_Init>:
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	e175      	b.n	80034bc <HAL_GPIO_Init+0x30c>
 80031d0:	2201      	movs	r2, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	f040 8164 	bne.w	80034b6 <HAL_GPIO_Init+0x306>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d00b      	beq.n	800320e <HAL_GPIO_Init+0x5e>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d007      	beq.n	800320e <HAL_GPIO_Init+0x5e>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b11      	cmp	r3, #17
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x5e>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b12      	cmp	r3, #18
 800320c:	d130      	bne.n	8003270 <HAL_GPIO_Init+0xc0>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	2203      	movs	r2, #3
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	61bb      	str	r3, [r7, #24]
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	091b      	lsrs	r3, r3, #4
 800325a:	f003 0201 	and.w	r2, r3, #1
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	2203      	movs	r2, #3
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4013      	ands	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x100>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b12      	cmp	r3, #18
 80032ae:	d123      	bne.n	80032f8 <HAL_GPIO_Init+0x148>
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	08da      	lsrs	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3208      	adds	r2, #8
 80032b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	220f      	movs	r2, #15
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	08da      	lsrs	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	3208      	adds	r2, #8
 80032f2:	69b9      	ldr	r1, [r7, #24]
 80032f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61bb      	str	r3, [r7, #24]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	2203      	movs	r2, #3
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43db      	mvns	r3, r3
 800330a:	69ba      	ldr	r2, [r7, #24]
 800330c:	4013      	ands	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0203 	and.w	r2, r3, #3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4313      	orrs	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 80be 	beq.w	80034b6 <HAL_GPIO_Init+0x306>
 800333a:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_GPIO_Init+0x324>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333e:	4a65      	ldr	r2, [pc, #404]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003344:	6453      	str	r3, [r2, #68]	; 0x44
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_GPIO_Init+0x324>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a61      	ldr	r2, [pc, #388]	; (80034d8 <HAL_GPIO_Init+0x328>)
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	220f      	movs	r2, #15
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_GPIO_Init+0x32c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d037      	beq.n	80033ee <HAL_GPIO_Init+0x23e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a57      	ldr	r2, [pc, #348]	; (80034e0 <HAL_GPIO_Init+0x330>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d031      	beq.n	80033ea <HAL_GPIO_Init+0x23a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a56      	ldr	r2, [pc, #344]	; (80034e4 <HAL_GPIO_Init+0x334>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02b      	beq.n	80033e6 <HAL_GPIO_Init+0x236>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a55      	ldr	r2, [pc, #340]	; (80034e8 <HAL_GPIO_Init+0x338>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d025      	beq.n	80033e2 <HAL_GPIO_Init+0x232>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a54      	ldr	r2, [pc, #336]	; (80034ec <HAL_GPIO_Init+0x33c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <HAL_GPIO_Init+0x22e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a53      	ldr	r2, [pc, #332]	; (80034f0 <HAL_GPIO_Init+0x340>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d019      	beq.n	80033da <HAL_GPIO_Init+0x22a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <HAL_GPIO_Init+0x344>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_Init+0x226>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a51      	ldr	r2, [pc, #324]	; (80034f8 <HAL_GPIO_Init+0x348>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_Init+0x222>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a50      	ldr	r2, [pc, #320]	; (80034fc <HAL_GPIO_Init+0x34c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x21e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4f      	ldr	r2, [pc, #316]	; (8003500 <HAL_GPIO_Init+0x350>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_Init+0x21a>
 80033c6:	2309      	movs	r3, #9
 80033c8:	e012      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033ca:	230a      	movs	r3, #10
 80033cc:	e010      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033ce:	2308      	movs	r3, #8
 80033d0:	e00e      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033d2:	2307      	movs	r3, #7
 80033d4:	e00c      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033d6:	2306      	movs	r3, #6
 80033d8:	e00a      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033da:	2305      	movs	r3, #5
 80033dc:	e008      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033de:	2304      	movs	r3, #4
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e004      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e002      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_GPIO_Init+0x240>
 80033ee:	2300      	movs	r3, #0
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	f002 0203 	and.w	r2, r2, #3
 80033f6:	0092      	lsls	r2, r2, #2
 80033f8:	4093      	lsls	r3, r2
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	4935      	ldr	r1, [pc, #212]	; (80034d8 <HAL_GPIO_Init+0x328>)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	3302      	adds	r3, #2
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800340e:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <HAL_GPIO_Init+0x354>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	61bb      	str	r3, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	43db      	mvns	r3, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4013      	ands	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_GPIO_Init+0x282>
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	4a34      	ldr	r2, [pc, #208]	; (8003504 <HAL_GPIO_Init+0x354>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_GPIO_Init+0x354>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_GPIO_Init+0x2ac>
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	4a29      	ldr	r2, [pc, #164]	; (8003504 <HAL_GPIO_Init+0x354>)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	6053      	str	r3, [r2, #4]
 8003462:	4b28      	ldr	r3, [pc, #160]	; (8003504 <HAL_GPIO_Init+0x354>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	43db      	mvns	r3, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4013      	ands	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x2d6>
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_GPIO_Init+0x354>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	6093      	str	r3, [r2, #8]
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_GPIO_Init+0x354>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x300>
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
 80034b0:	4a14      	ldr	r2, [pc, #80]	; (8003504 <HAL_GPIO_Init+0x354>)
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	60d3      	str	r3, [r2, #12]
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b0f      	cmp	r3, #15
 80034c0:	f67f ae86 	bls.w	80031d0 <HAL_GPIO_Init+0x20>
 80034c4:	bf00      	nop
 80034c6:	bf00      	nop
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40013800 	.word	0x40013800
 80034dc:	40020000 	.word	0x40020000
 80034e0:	40020400 	.word	0x40020400
 80034e4:	40020800 	.word	0x40020800
 80034e8:	40020c00 	.word	0x40020c00
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40021400 	.word	0x40021400
 80034f4:	40021800 	.word	0x40021800
 80034f8:	40021c00 	.word	0x40021c00
 80034fc:	40022000 	.word	0x40022000
 8003500:	40022400 	.word	0x40022400
 8003504:	40013c00 	.word	0x40013c00

08003508 <HAL_GPIO_WritePin>:
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	807b      	strh	r3, [r7, #2]
 8003514:	4613      	mov	r3, r2
 8003516:	707b      	strb	r3, [r7, #1]
 8003518:	787b      	ldrb	r3, [r7, #1]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_GPIO_WritePin+0x1e>
 800351e:	887a      	ldrh	r2, [r7, #2]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	619a      	str	r2, [r3, #24]
 8003524:	e003      	b.n	800352e <HAL_GPIO_WritePin+0x26>
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	041a      	lsls	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	619a      	str	r2, [r3, #24]
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_GPIO_TogglePin>:
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	807b      	strh	r3, [r7, #2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d004      	beq.n	800355c <HAL_GPIO_TogglePin+0x22>
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
 800355a:	e002      	b.n	8003562 <HAL_GPIO_TogglePin+0x28>
 800355c:	887a      	ldrh	r2, [r7, #2]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	619a      	str	r2, [r3, #24]
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_I2C_Init>:
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_I2C_Init+0x12>
 800357e:	2301      	movs	r3, #1
 8003580:	e07f      	b.n	8003682 <HAL_I2C_Init+0x112>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_I2C_Init+0x2c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fe fd54 	bl	8002044 <HAL_I2C_MspInit>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c0:	611a      	str	r2, [r3, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d107      	bne.n	80035ea <HAL_I2C_Init+0x7a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	e006      	b.n	80035f8 <HAL_I2C_Init+0x88>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035f6:	609a      	str	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d104      	bne.n	800360a <HAL_I2C_Init+0x9a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6859      	ldr	r1, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_I2C_Init+0x11c>)
 8003616:	430b      	orrs	r3, r1
 8003618:	6053      	str	r3, [r2, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	ea42 0103 	orr.w	r1, r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	021a      	lsls	r2, r3, #8
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	60da      	str	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69d9      	ldr	r1, [r3, #28]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1a      	ldr	r2, [r3, #32]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	645a      	str	r2, [r3, #68]	; 0x44
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	631a      	str	r2, [r3, #48]	; 0x30
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003680:	2300      	movs	r3, #0
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	02008000 	.word	0x02008000

08003690 <HAL_I2C_Mem_Write>:
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	460b      	mov	r3, r1
 80036a4:	813b      	strh	r3, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	f040 80f9 	bne.w	80038aa <HAL_I2C_Mem_Write+0x21a>
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_I2C_Mem_Write+0x34>
 80036be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d105      	bne.n	80036d0 <HAL_I2C_Mem_Write+0x40>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
 80036cc:	2301      	movs	r3, #1
 80036ce:	e0ed      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_I2C_Mem_Write+0x4e>
 80036da:	2302      	movs	r3, #2
 80036dc:	e0e6      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e6:	f7ff f99b 	bl	8002a20 <HAL_GetTick>
 80036ea:	6178      	str	r0, [r7, #20]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	2319      	movs	r3, #25
 80036f2:	2201      	movs	r2, #1
 80036f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fac3 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <HAL_I2C_Mem_Write+0x78>
 8003704:	2301      	movs	r3, #1
 8003706:	e0d1      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2221      	movs	r2, #33	; 0x21
 800370c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2240      	movs	r2, #64	; 0x40
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	625a      	str	r2, [r3, #36]	; 0x24
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003728:	855a      	strh	r2, [r3, #42]	; 0x2a
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	635a      	str	r2, [r3, #52]	; 0x34
 8003730:	88f8      	ldrh	r0, [r7, #6]
 8003732:	893a      	ldrh	r2, [r7, #8]
 8003734:	8979      	ldrh	r1, [r7, #10]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4603      	mov	r3, r0
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 f9d3 	bl	8003aec <I2C_RequestMemoryWrite>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d005      	beq.n	8003758 <HAL_I2C_Mem_Write+0xc8>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003754:	2301      	movs	r3, #1
 8003756:	e0a9      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2bff      	cmp	r3, #255	; 0xff
 8003760:	d90e      	bls.n	8003780 <HAL_I2C_Mem_Write+0xf0>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	b2da      	uxtb	r2, r3
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	2300      	movs	r3, #0
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fba5 	bl	8003ec8 <I2C_TransferConfig>
 800377e:	e00f      	b.n	80037a0 <HAL_I2C_Mem_Write+0x110>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	851a      	strh	r2, [r3, #40]	; 0x28
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	b2da      	uxtb	r2, r3
 8003790:	8979      	ldrh	r1, [r7, #10]
 8003792:	2300      	movs	r3, #0
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fb94 	bl	8003ec8 <I2C_TransferConfig>
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 faad 	bl	8003d04 <I2C_WaitOnTXISFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x124>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e07b      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	629a      	str	r2, [r3, #40]	; 0x28
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	625a      	str	r2, [r3, #36]	; 0x24
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	851a      	strh	r2, [r3, #40]	; 0x28
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d034      	beq.n	8003858 <HAL_I2C_Mem_Write+0x1c8>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d130      	bne.n	8003858 <HAL_I2C_Mem_Write+0x1c8>
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	2200      	movs	r2, #0
 80037fe:	2180      	movs	r1, #128	; 0x80
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fa3f 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Write+0x180>
 800380c:	2301      	movs	r3, #1
 800380e:	e04d      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2bff      	cmp	r3, #255	; 0xff
 8003818:	d90e      	bls.n	8003838 <HAL_I2C_Mem_Write+0x1a8>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	b2da      	uxtb	r2, r3
 8003826:	8979      	ldrh	r1, [r7, #10]
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 fb49 	bl	8003ec8 <I2C_TransferConfig>
 8003836:	e00f      	b.n	8003858 <HAL_I2C_Mem_Write+0x1c8>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	851a      	strh	r2, [r3, #40]	; 0x28
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	8979      	ldrh	r1, [r7, #10]
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fb38 	bl	8003ec8 <I2C_TransferConfig>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d19e      	bne.n	80037a0 <HAL_I2C_Mem_Write+0x110>
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fa8c 	bl	8003d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Mem_Write+0x1e6>
 8003872:	2301      	movs	r3, #1
 8003874:	e01a      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2220      	movs	r2, #32
 800387c:	61da      	str	r2, [r3, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <HAL_I2C_Mem_Write+0x224>)
 800388a:	400b      	ands	r3, r1
 800388c:	6053      	str	r3, [r2, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_I2C_Mem_Write+0x21c>
 80038aa:	2302      	movs	r3, #2
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	fe00e800 	.word	0xfe00e800

080038b8 <HAL_I2C_Mem_Read>:
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af02      	add	r7, sp, #8
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	4608      	mov	r0, r1
 80038c2:	4611      	mov	r1, r2
 80038c4:	461a      	mov	r2, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	817b      	strh	r3, [r7, #10]
 80038ca:	460b      	mov	r3, r1
 80038cc:	813b      	strh	r3, [r7, #8]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b20      	cmp	r3, #32
 80038dc:	f040 80fd 	bne.w	8003ada <HAL_I2C_Mem_Read+0x222>
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_I2C_Mem_Read+0x34>
 80038e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <HAL_I2C_Mem_Read+0x40>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0f1      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_I2C_Mem_Read+0x4e>
 8003902:	2302      	movs	r3, #2
 8003904:	e0ea      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390e:	f7ff f887 	bl	8002a20 <HAL_GetTick>
 8003912:	6178      	str	r0, [r7, #20]
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2319      	movs	r3, #25
 800391a:	2201      	movs	r2, #1
 800391c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f9af 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_I2C_Mem_Read+0x78>
 800392c:	2301      	movs	r3, #1
 800392e:	e0d5      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2222      	movs	r2, #34	; 0x22
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2240      	movs	r2, #64	; 0x40
 800393c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	; 0x44
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a3a      	ldr	r2, [r7, #32]
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	635a      	str	r2, [r3, #52]	; 0x34
 8003958:	88f8      	ldrh	r0, [r7, #6]
 800395a:	893a      	ldrh	r2, [r7, #8]
 800395c:	8979      	ldrh	r1, [r7, #10]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	4603      	mov	r3, r0
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f913 	bl	8003b94 <I2C_RequestMemoryRead>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_I2C_Mem_Read+0xc8>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800397c:	2301      	movs	r3, #1
 800397e:	e0ad      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2bff      	cmp	r3, #255	; 0xff
 8003988:	d90e      	bls.n	80039a8 <HAL_I2C_Mem_Read+0xf0>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	22ff      	movs	r2, #255	; 0xff
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003994:	b2da      	uxtb	r2, r3
 8003996:	8979      	ldrh	r1, [r7, #10]
 8003998:	4b52      	ldr	r3, [pc, #328]	; (8003ae4 <HAL_I2C_Mem_Read+0x22c>)
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fa91 	bl	8003ec8 <I2C_TransferConfig>
 80039a6:	e00f      	b.n	80039c8 <HAL_I2C_Mem_Read+0x110>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	4b4a      	ldr	r3, [pc, #296]	; (8003ae4 <HAL_I2C_Mem_Read+0x22c>)
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fa80 	bl	8003ec8 <I2C_TransferConfig>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ce:	2200      	movs	r2, #0
 80039d0:	2104      	movs	r1, #4
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 f956 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Mem_Read+0x12a>
 80039de:	2301      	movs	r3, #1
 80039e0:	e07c      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d034      	beq.n	8003a88 <HAL_I2C_Mem_Read+0x1d0>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d130      	bne.n	8003a88 <HAL_I2C_Mem_Read+0x1d0>
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2180      	movs	r1, #128	; 0x80
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f927 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x188>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e04d      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2bff      	cmp	r3, #255	; 0xff
 8003a48:	d90e      	bls.n	8003a68 <HAL_I2C_Mem_Read+0x1b0>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	22ff      	movs	r2, #255	; 0xff
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	8979      	ldrh	r1, [r7, #10]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 fa31 	bl	8003ec8 <I2C_TransferConfig>
 8003a66:	e00f      	b.n	8003a88 <HAL_I2C_Mem_Read+0x1d0>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	8979      	ldrh	r1, [r7, #10]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f000 fa20 	bl	8003ec8 <I2C_TransferConfig>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d19a      	bne.n	80039c8 <HAL_I2C_Mem_Read+0x110>
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f974 	bl	8003d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_Mem_Read+0x1ee>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e01a      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	61da      	str	r2, [r3, #28]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6859      	ldr	r1, [r3, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_I2C_Mem_Read+0x230>)
 8003aba:	400b      	ands	r3, r1
 8003abc:	6053      	str	r3, [r2, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_I2C_Mem_Read+0x224>
 8003ada:	2302      	movs	r3, #2
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	80002400 	.word	0x80002400
 8003ae8:	fe00e800 	.word	0xfe00e800

08003aec <I2C_RequestMemoryWrite>:
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	4608      	mov	r0, r1
 8003af6:	4611      	mov	r1, r2
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	817b      	strh	r3, [r7, #10]
 8003afe:	460b      	mov	r3, r1
 8003b00:	813b      	strh	r3, [r7, #8]
 8003b02:	4613      	mov	r3, r2
 8003b04:	80fb      	strh	r3, [r7, #6]
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <I2C_RequestMemoryWrite+0xa4>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f9d7 	bl	8003ec8 <I2C_TransferConfig>
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	69b9      	ldr	r1, [r7, #24]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8f0 	bl	8003d04 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_RequestMemoryWrite+0x42>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e02c      	b.n	8003b88 <I2C_RequestMemoryWrite+0x9c>
 8003b2e:	88fb      	ldrh	r3, [r7, #6]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d105      	bne.n	8003b40 <I2C_RequestMemoryWrite+0x54>
 8003b34:	893b      	ldrh	r3, [r7, #8]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b3e:	e015      	b.n	8003b6c <I2C_RequestMemoryWrite+0x80>
 8003b40:	893b      	ldrh	r3, [r7, #8]
 8003b42:	0a1b      	lsrs	r3, r3, #8
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	69b9      	ldr	r1, [r7, #24]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 f8d6 	bl	8003d04 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <I2C_RequestMemoryWrite+0x76>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e012      	b.n	8003b88 <I2C_RequestMemoryWrite+0x9c>
 8003b62:	893b      	ldrh	r3, [r7, #8]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2180      	movs	r1, #128	; 0x80
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f884 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <I2C_RequestMemoryWrite+0x9a>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <I2C_RequestMemoryWrite+0x9c>
 8003b86:	2300      	movs	r3, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	80002000 	.word	0x80002000

08003b94 <I2C_RequestMemoryRead>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	817b      	strh	r3, [r7, #10]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	813b      	strh	r3, [r7, #8]
 8003baa:	4613      	mov	r3, r2
 8003bac:	80fb      	strh	r3, [r7, #6]
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	8979      	ldrh	r1, [r7, #10]
 8003bb4:	4b20      	ldr	r3, [pc, #128]	; (8003c38 <I2C_RequestMemoryRead+0xa4>)
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	2300      	movs	r3, #0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f984 	bl	8003ec8 <I2C_TransferConfig>
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	69b9      	ldr	r1, [r7, #24]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f89d 	bl	8003d04 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <I2C_RequestMemoryRead+0x40>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e02c      	b.n	8003c2e <I2C_RequestMemoryRead+0x9a>
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d105      	bne.n	8003be6 <I2C_RequestMemoryRead+0x52>
 8003bda:	893b      	ldrh	r3, [r7, #8]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28
 8003be4:	e015      	b.n	8003c12 <I2C_RequestMemoryRead+0x7e>
 8003be6:	893b      	ldrh	r3, [r7, #8]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	69b9      	ldr	r1, [r7, #24]
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f883 	bl	8003d04 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d001      	beq.n	8003c08 <I2C_RequestMemoryRead+0x74>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e012      	b.n	8003c2e <I2C_RequestMemoryRead+0x9a>
 8003c08:	893b      	ldrh	r3, [r7, #8]
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	629a      	str	r2, [r3, #40]	; 0x28
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2140      	movs	r1, #64	; 0x40
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f831 	bl	8003c84 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <I2C_RequestMemoryRead+0x98>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <I2C_RequestMemoryRead+0x9a>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	80002000 	.word	0x80002000

08003c3c <I2C_Flush_TXDR>:
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d103      	bne.n	8003c5a <I2C_Flush_TXDR+0x1e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2200      	movs	r2, #0
 8003c58:	629a      	str	r2, [r3, #40]	; 0x28
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d007      	beq.n	8003c78 <I2C_Flush_TXDR+0x3c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	619a      	str	r2, [r3, #24]
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <I2C_WaitOnFlagUntilTimeout>:
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	71fb      	strb	r3, [r7, #7]
 8003c94:	e022      	b.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x58>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d01e      	beq.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x58>
 8003c9e:	f7fe febf 	bl	8002a20 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d113      	bne.n	8003cdc <I2C_WaitOnFlagUntilTimeout+0x58>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	f043 0220 	orr.w	r2, r3, #32
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e00f      	b.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0x78>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699a      	ldr	r2, [r3, #24]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d0cd      	beq.n	8003c96 <I2C_WaitOnFlagUntilTimeout+0x12>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <I2C_WaitOnTXISFlagUntilTimeout>:
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	e02c      	b.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f870 	bl	8003dfc <I2C_IsAcknowledgeFailed>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e02a      	b.n	8003d7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d01e      	beq.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8003d2e:	f7fe fe77 	bl	8002a20 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d113      	bne.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	645a      	str	r2, [r3, #68]	; 0x44
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e007      	b.n	8003d7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d1cb      	bne.n	8003d12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	e028      	b.n	8003de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f830 	bl	8003dfc <I2C_IsAcknowledgeFailed>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8003da2:	2301      	movs	r3, #1
 8003da4:	e026      	b.n	8003df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 8003da6:	f7fe fe3b 	bl	8002a20 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d113      	bne.n	8003de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de0:	2301      	movs	r3, #1
 8003de2:	e007      	b.n	8003df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d1cf      	bne.n	8003d92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8003df2:	2300      	movs	r3, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <I2C_IsAcknowledgeFailed>:
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b10      	cmp	r3, #16
 8003e14:	d151      	bne.n	8003eba <I2C_IsAcknowledgeFailed+0xbe>
 8003e16:	e022      	b.n	8003e5e <I2C_IsAcknowledgeFailed+0x62>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d01e      	beq.n	8003e5e <I2C_IsAcknowledgeFailed+0x62>
 8003e20:	f7fe fdfe 	bl	8002a20 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d302      	bcc.n	8003e36 <I2C_IsAcknowledgeFailed+0x3a>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d113      	bne.n	8003e5e <I2C_IsAcknowledgeFailed+0x62>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f043 0220 	orr.w	r2, r3, #32
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e02e      	b.n	8003ebc <I2C_IsAcknowledgeFailed+0xc0>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d1d5      	bne.n	8003e18 <I2C_IsAcknowledgeFailed+0x1c>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2210      	movs	r2, #16
 8003e72:	61da      	str	r2, [r3, #28]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	61da      	str	r2, [r3, #28]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f7ff fedd 	bl	8003c3c <I2C_Flush_TXDR>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e8e:	400b      	ands	r3, r1
 8003e90:	6053      	str	r3, [r2, #4]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f043 0204 	orr.w	r2, r3, #4
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <I2C_IsAcknowledgeFailed+0xc0>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	fe00e800 	.word	0xfe00e800

08003ec8 <I2C_TransferConfig>:
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	817b      	strh	r3, [r7, #10]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	727b      	strb	r3, [r7, #9]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	0d5b      	lsrs	r3, r3, #21
 8003ee4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ee8:	4b0d      	ldr	r3, [pc, #52]	; (8003f20 <I2C_TransferConfig+0x58>)
 8003eea:	430b      	orrs	r3, r1
 8003eec:	43db      	mvns	r3, r3
 8003eee:	ea02 0103 	and.w	r1, r2, r3
 8003ef2:	897b      	ldrh	r3, [r7, #10]
 8003ef4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ef8:	7a7b      	ldrb	r3, [r7, #9]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	03ff63ff 	.word	0x03ff63ff

08003f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d138      	bne.n	8003fac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e032      	b.n	8003fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	; 0x24
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
  }
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d139      	bne.n	8004044 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e033      	b.n	8004046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2224      	movs	r2, #36	; 0x24
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0201 	bic.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800400c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	021b      	lsls	r3, r3, #8
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0201 	orr.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <HAL_PWR_EnableBkUpAccess>:
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
 8004058:	4b05      	ldr	r3, [pc, #20]	; (8004070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800405e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40007000 	.word	0x40007000

08004074 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	4b23      	ldr	r3, [pc, #140]	; (800410c <HAL_PWREx_EnableOverDrive+0x98>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a22      	ldr	r2, [pc, #136]	; (800410c <HAL_PWREx_EnableOverDrive+0x98>)
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_PWREx_EnableOverDrive+0x98>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004096:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_PWREx_EnableOverDrive+0x9c>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040a2:	f7fe fcbd 	bl	8002a20 <HAL_GetTick>
 80040a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040a8:	e009      	b.n	80040be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040aa:	f7fe fcb9 	bl	8002a20 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b8:	d901      	bls.n	80040be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e022      	b.n	8004104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040be:	4b14      	ldr	r3, [pc, #80]	; (8004110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d1ee      	bne.n	80040aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80040cc:	4b10      	ldr	r3, [pc, #64]	; (8004110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040d8:	f7fe fca2 	bl	8002a20 <HAL_GetTick>
 80040dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040de:	e009      	b.n	80040f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040e0:	f7fe fc9e 	bl	8002a20 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ee:	d901      	bls.n	80040f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e007      	b.n	8004104 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004100:	d1ee      	bne.n	80040e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	40007000 	.word	0x40007000

08004114 <HAL_RCC_OscConfig>:
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	2300      	movs	r3, #0
 800411e:	75fb      	strb	r3, [r7, #23]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x16>
 8004126:	2301      	movs	r3, #1
 8004128:	e29b      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8087 	beq.w	8004246 <HAL_RCC_OscConfig+0x132>
 8004138:	4b96      	ldr	r3, [pc, #600]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b04      	cmp	r3, #4
 8004142:	d00c      	beq.n	800415e <HAL_RCC_OscConfig+0x4a>
 8004144:	4b93      	ldr	r3, [pc, #588]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 030c 	and.w	r3, r3, #12
 800414c:	2b08      	cmp	r3, #8
 800414e:	d112      	bne.n	8004176 <HAL_RCC_OscConfig+0x62>
 8004150:	4b90      	ldr	r3, [pc, #576]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415c:	d10b      	bne.n	8004176 <HAL_RCC_OscConfig+0x62>
 800415e:	4b8d      	ldr	r3, [pc, #564]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d06c      	beq.n	8004244 <HAL_RCC_OscConfig+0x130>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d168      	bne.n	8004244 <HAL_RCC_OscConfig+0x130>
 8004172:	2301      	movs	r3, #1
 8004174:	e275      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417e:	d106      	bne.n	800418e <HAL_RCC_OscConfig+0x7a>
 8004180:	4b84      	ldr	r3, [pc, #528]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a83      	ldr	r2, [pc, #524]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	e02e      	b.n	80041ec <HAL_RCC_OscConfig+0xd8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x9c>
 8004196:	4b7f      	ldr	r3, [pc, #508]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a7e      	ldr	r2, [pc, #504]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800419c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b7c      	ldr	r3, [pc, #496]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a7b      	ldr	r2, [pc, #492]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e01d      	b.n	80041ec <HAL_RCC_OscConfig+0xd8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0xc0>
 80041ba:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a75      	ldr	r2, [pc, #468]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b73      	ldr	r3, [pc, #460]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a72      	ldr	r2, [pc, #456]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0xd8>
 80041d4:	4b6f      	ldr	r3, [pc, #444]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a6e      	ldr	r2, [pc, #440]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b6c      	ldr	r3, [pc, #432]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a6b      	ldr	r2, [pc, #428]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <HAL_RCC_OscConfig+0x108>
 80041f4:	f7fe fc14 	bl	8002a20 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xfa>
 80041fc:	f7fe fc10 	bl	8002a20 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	; 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xfa>
 800420a:	2303      	movs	r3, #3
 800420c:	e229      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 800420e:	4b61      	ldr	r3, [pc, #388]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0xe8>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x132>
 800421c:	f7fe fc00 	bl	8002a20 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x122>
 8004224:	f7fe fbfc 	bl	8002a20 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x122>
 8004232:	2303      	movs	r3, #3
 8004234:	e215      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 8004236:	4b57      	ldr	r3, [pc, #348]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x110>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x132>
 8004244:	bf00      	nop
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d069      	beq.n	8004326 <HAL_RCC_OscConfig+0x212>
 8004252:	4b50      	ldr	r3, [pc, #320]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RCC_OscConfig+0x162>
 800425e:	4b4d      	ldr	r3, [pc, #308]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
 8004266:	2b08      	cmp	r3, #8
 8004268:	d11c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x190>
 800426a:	4b4a      	ldr	r3, [pc, #296]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d116      	bne.n	80042a4 <HAL_RCC_OscConfig+0x190>
 8004276:	4b47      	ldr	r3, [pc, #284]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x17a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x17a>
 800428a:	2301      	movs	r3, #1
 800428c:	e1e9      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 800428e:	4b41      	ldr	r3, [pc, #260]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	493d      	ldr	r1, [pc, #244]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
 80042a2:	e040      	b.n	8004326 <HAL_RCC_OscConfig+0x212>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d023      	beq.n	80042f4 <HAL_RCC_OscConfig+0x1e0>
 80042ac:	4b39      	ldr	r3, [pc, #228]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a38      	ldr	r2, [pc, #224]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	f7fe fbb2 	bl	8002a20 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x1be>
 80042c0:	f7fe fbae 	bl	8002a20 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x1be>
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1c7      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 80042d2:	4b30      	ldr	r3, [pc, #192]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0f0      	beq.n	80042c0 <HAL_RCC_OscConfig+0x1ac>
 80042de:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4929      	ldr	r1, [pc, #164]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	600b      	str	r3, [r1, #0]
 80042f2:	e018      	b.n	8004326 <HAL_RCC_OscConfig+0x212>
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a26      	ldr	r2, [pc, #152]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	f7fe fb8e 	bl	8002a20 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x206>
 8004308:	f7fe fb8a 	bl	8002a20 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x206>
 8004316:	2303      	movs	r3, #3
 8004318:	e1a3      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x1f4>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d038      	beq.n	80043a4 <HAL_RCC_OscConfig+0x290>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d019      	beq.n	800436e <HAL_RCC_OscConfig+0x25a>
 800433a:	4b16      	ldr	r3, [pc, #88]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 800433c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433e:	4a15      	ldr	r2, [pc, #84]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6753      	str	r3, [r2, #116]	; 0x74
 8004346:	f7fe fb6b 	bl	8002a20 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x24c>
 800434e:	f7fe fb67 	bl	8002a20 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x24c>
 800435c:	2303      	movs	r3, #3
 800435e:	e180      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 8004360:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x23a>
 800436c:	e01a      	b.n	80043a4 <HAL_RCC_OscConfig+0x290>
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	4a08      	ldr	r2, [pc, #32]	; (8004394 <HAL_RCC_OscConfig+0x280>)
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	6753      	str	r3, [r2, #116]	; 0x74
 800437a:	f7fe fb51 	bl	8002a20 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x284>
 8004382:	f7fe fb4d 	bl	8002a20 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d903      	bls.n	8004398 <HAL_RCC_OscConfig+0x284>
 8004390:	2303      	movs	r3, #3
 8004392:	e166      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 8004394:	40023800 	.word	0x40023800
 8004398:	4b92      	ldr	r3, [pc, #584]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 800439a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ee      	bne.n	8004382 <HAL_RCC_OscConfig+0x26e>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80a4 	beq.w	80044fa <HAL_RCC_OscConfig+0x3e6>
 80043b2:	4b8c      	ldr	r3, [pc, #560]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <HAL_RCC_OscConfig+0x2c6>
 80043be:	4b89      	ldr	r3, [pc, #548]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a88      	ldr	r2, [pc, #544]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80043c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ca:	4b86      	ldr	r3, [pc, #536]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2301      	movs	r3, #1
 80043d8:	75fb      	strb	r3, [r7, #23]
 80043da:	4b83      	ldr	r3, [pc, #524]	; (80045e8 <HAL_RCC_OscConfig+0x4d4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d118      	bne.n	8004418 <HAL_RCC_OscConfig+0x304>
 80043e6:	4b80      	ldr	r3, [pc, #512]	; (80045e8 <HAL_RCC_OscConfig+0x4d4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a7f      	ldr	r2, [pc, #508]	; (80045e8 <HAL_RCC_OscConfig+0x4d4>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	f7fe fb15 	bl	8002a20 <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x2f8>
 80043fa:	f7fe fb11 	bl	8002a20 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b64      	cmp	r3, #100	; 0x64
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x2f8>
 8004408:	2303      	movs	r3, #3
 800440a:	e12a      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 800440c:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCC_OscConfig+0x4d4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x2e6>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d106      	bne.n	800442e <HAL_RCC_OscConfig+0x31a>
 8004420:	4b70      	ldr	r3, [pc, #448]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4a6f      	ldr	r2, [pc, #444]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6713      	str	r3, [r2, #112]	; 0x70
 800442c:	e02d      	b.n	800448a <HAL_RCC_OscConfig+0x376>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10c      	bne.n	8004450 <HAL_RCC_OscConfig+0x33c>
 8004436:	4b6b      	ldr	r3, [pc, #428]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	4a6a      	ldr	r2, [pc, #424]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	6713      	str	r3, [r2, #112]	; 0x70
 8004442:	4b68      	ldr	r3, [pc, #416]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004446:	4a67      	ldr	r2, [pc, #412]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004448:	f023 0304 	bic.w	r3, r3, #4
 800444c:	6713      	str	r3, [r2, #112]	; 0x70
 800444e:	e01c      	b.n	800448a <HAL_RCC_OscConfig+0x376>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b05      	cmp	r3, #5
 8004456:	d10c      	bne.n	8004472 <HAL_RCC_OscConfig+0x35e>
 8004458:	4b62      	ldr	r3, [pc, #392]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	4a61      	ldr	r2, [pc, #388]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 800445e:	f043 0304 	orr.w	r3, r3, #4
 8004462:	6713      	str	r3, [r2, #112]	; 0x70
 8004464:	4b5f      	ldr	r3, [pc, #380]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	4a5e      	ldr	r2, [pc, #376]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 800446a:	f043 0301 	orr.w	r3, r3, #1
 800446e:	6713      	str	r3, [r2, #112]	; 0x70
 8004470:	e00b      	b.n	800448a <HAL_RCC_OscConfig+0x376>
 8004472:	4b5c      	ldr	r3, [pc, #368]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a5b      	ldr	r2, [pc, #364]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
 800447e:	4b59      	ldr	r3, [pc, #356]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a58      	ldr	r2, [pc, #352]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004484:	f023 0304 	bic.w	r3, r3, #4
 8004488:	6713      	str	r3, [r2, #112]	; 0x70
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d015      	beq.n	80044be <HAL_RCC_OscConfig+0x3aa>
 8004492:	f7fe fac5 	bl	8002a20 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]
 8004498:	e00a      	b.n	80044b0 <HAL_RCC_OscConfig+0x39c>
 800449a:	f7fe fac1 	bl	8002a20 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x39c>
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0d8      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 80044b0:	4b4c      	ldr	r3, [pc, #304]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ee      	beq.n	800449a <HAL_RCC_OscConfig+0x386>
 80044bc:	e014      	b.n	80044e8 <HAL_RCC_OscConfig+0x3d4>
 80044be:	f7fe faaf 	bl	8002a20 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]
 80044c4:	e00a      	b.n	80044dc <HAL_RCC_OscConfig+0x3c8>
 80044c6:	f7fe faab 	bl	8002a20 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x3c8>
 80044d8:	2303      	movs	r3, #3
 80044da:	e0c2      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 80044dc:	4b41      	ldr	r3, [pc, #260]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1ee      	bne.n	80044c6 <HAL_RCC_OscConfig+0x3b2>
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d105      	bne.n	80044fa <HAL_RCC_OscConfig+0x3e6>
 80044ee:	4b3d      	ldr	r3, [pc, #244]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a3c      	ldr	r2, [pc, #240]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80044f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80ae 	beq.w	8004660 <HAL_RCC_OscConfig+0x54c>
 8004504:	4b37      	ldr	r3, [pc, #220]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 030c 	and.w	r3, r3, #12
 800450c:	2b08      	cmp	r3, #8
 800450e:	d06d      	beq.n	80045ec <HAL_RCC_OscConfig+0x4d8>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d14b      	bne.n	80045b0 <HAL_RCC_OscConfig+0x49c>
 8004518:	4b32      	ldr	r3, [pc, #200]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a31      	ldr	r2, [pc, #196]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 800451e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	f7fe fa7c 	bl	8002a20 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x42a>
 800452c:	f7fe fa78 	bl	8002a20 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x42a>
 800453a:	2303      	movs	r3, #3
 800453c:	e091      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 800453e:	4b29      	ldr	r3, [pc, #164]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x418>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	019b      	lsls	r3, r3, #6
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	3b01      	subs	r3, #1
 8004564:	041b      	lsls	r3, r3, #16
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	431a      	orrs	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	071b      	lsls	r3, r3, #28
 8004576:	491b      	ldr	r1, [pc, #108]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004578:	4313      	orrs	r3, r2
 800457a:	604b      	str	r3, [r1, #4]
 800457c:	4b19      	ldr	r3, [pc, #100]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 8004582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	f7fe fa4a 	bl	8002a20 <HAL_GetTick>
 800458c:	6138      	str	r0, [r7, #16]
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x48e>
 8004590:	f7fe fa46 	bl	8002a20 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x48e>
 800459e:	2303      	movs	r3, #3
 80045a0:	e05f      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x47c>
 80045ae:	e057      	b.n	8004660 <HAL_RCC_OscConfig+0x54c>
 80045b0:	4b0c      	ldr	r3, [pc, #48]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0b      	ldr	r2, [pc, #44]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80045b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	f7fe fa30 	bl	8002a20 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x4c2>
 80045c4:	f7fe fa2c 	bl	8002a20 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x4c2>
 80045d2:	2303      	movs	r3, #3
 80045d4:	e045      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 80045d6:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_RCC_OscConfig+0x4d0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1f0      	bne.n	80045c4 <HAL_RCC_OscConfig+0x4b0>
 80045e2:	e03d      	b.n	8004660 <HAL_RCC_OscConfig+0x54c>
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40007000 	.word	0x40007000
 80045ec:	4b1f      	ldr	r3, [pc, #124]	; (800466c <HAL_RCC_OscConfig+0x558>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d030      	beq.n	800465c <HAL_RCC_OscConfig+0x548>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	429a      	cmp	r2, r3
 8004606:	d129      	bne.n	800465c <HAL_RCC_OscConfig+0x548>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	429a      	cmp	r2, r3
 8004614:	d122      	bne.n	800465c <HAL_RCC_OscConfig+0x548>
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004622:	0192      	lsls	r2, r2, #6
 8004624:	4293      	cmp	r3, r2
 8004626:	d119      	bne.n	800465c <HAL_RCC_OscConfig+0x548>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	3b01      	subs	r3, #1
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	429a      	cmp	r2, r3
 800463a:	d10f      	bne.n	800465c <HAL_RCC_OscConfig+0x548>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	061b      	lsls	r3, r3, #24
 8004648:	429a      	cmp	r2, r3
 800464a:	d107      	bne.n	800465c <HAL_RCC_OscConfig+0x548>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	071b      	lsls	r3, r3, #28
 8004658:	429a      	cmp	r2, r3
 800465a:	d001      	beq.n	8004660 <HAL_RCC_OscConfig+0x54c>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <HAL_RCC_OscConfig+0x54e>
 8004660:	2300      	movs	r3, #0
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <HAL_RCC_ClockConfig>:
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_RCC_ClockConfig+0x18>
 8004684:	2301      	movs	r3, #1
 8004686:	e0d0      	b.n	800482a <HAL_RCC_ClockConfig+0x1ba>
 8004688:	4b6a      	ldr	r3, [pc, #424]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d910      	bls.n	80046b8 <HAL_RCC_ClockConfig+0x48>
 8004696:	4b67      	ldr	r3, [pc, #412]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 020f 	bic.w	r2, r3, #15
 800469e:	4965      	ldr	r1, [pc, #404]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	600b      	str	r3, [r1, #0]
 80046a6:	4b63      	ldr	r3, [pc, #396]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x48>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0b8      	b.n	800482a <HAL_RCC_ClockConfig+0x1ba>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d020      	beq.n	8004706 <HAL_RCC_ClockConfig+0x96>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_ClockConfig+0x6c>
 80046d0:	4b59      	ldr	r3, [pc, #356]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4a58      	ldr	r2, [pc, #352]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80046d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046da:	6093      	str	r3, [r2, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x84>
 80046e8:	4b53      	ldr	r3, [pc, #332]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4a52      	ldr	r2, [pc, #328]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80046ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046f2:	6093      	str	r3, [r2, #8]
 80046f4:	4b50      	ldr	r3, [pc, #320]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	494d      	ldr	r1, [pc, #308]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d040      	beq.n	8004794 <HAL_RCC_ClockConfig+0x124>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0xba>
 800471a:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d115      	bne.n	8004752 <HAL_RCC_ClockConfig+0xe2>
 8004726:	2301      	movs	r3, #1
 8004728:	e07f      	b.n	800482a <HAL_RCC_ClockConfig+0x1ba>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b02      	cmp	r3, #2
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xd2>
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d109      	bne.n	8004752 <HAL_RCC_ClockConfig+0xe2>
 800473e:	2301      	movs	r3, #1
 8004740:	e073      	b.n	800482a <HAL_RCC_ClockConfig+0x1ba>
 8004742:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_ClockConfig+0xe2>
 800474e:	2301      	movs	r3, #1
 8004750:	e06b      	b.n	800482a <HAL_RCC_ClockConfig+0x1ba>
 8004752:	4b39      	ldr	r3, [pc, #228]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f023 0203 	bic.w	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4936      	ldr	r1, [pc, #216]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004760:	4313      	orrs	r3, r2
 8004762:	608b      	str	r3, [r1, #8]
 8004764:	f7fe f95c 	bl	8002a20 <HAL_GetTick>
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	e00a      	b.n	8004782 <HAL_RCC_ClockConfig+0x112>
 800476c:	f7fe f958 	bl	8002a20 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	f241 3288 	movw	r2, #5000	; 0x1388
 800477a:	4293      	cmp	r3, r2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_ClockConfig+0x112>
 800477e:	2303      	movs	r3, #3
 8004780:	e053      	b.n	800482a <HAL_RCC_ClockConfig+0x1ba>
 8004782:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 020c 	and.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	429a      	cmp	r2, r3
 8004792:	d1eb      	bne.n	800476c <HAL_RCC_ClockConfig+0xfc>
 8004794:	4b27      	ldr	r3, [pc, #156]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 030f 	and.w	r3, r3, #15
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d210      	bcs.n	80047c4 <HAL_RCC_ClockConfig+0x154>
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 020f 	bic.w	r2, r3, #15
 80047aa:	4922      	ldr	r1, [pc, #136]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	600b      	str	r3, [r1, #0]
 80047b2:	4b20      	ldr	r3, [pc, #128]	; (8004834 <HAL_RCC_ClockConfig+0x1c4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x154>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e032      	b.n	800482a <HAL_RCC_ClockConfig+0x1ba>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x172>
 80047d0:	4b19      	ldr	r3, [pc, #100]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4916      	ldr	r1, [pc, #88]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0308 	and.w	r3, r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d009      	beq.n	8004802 <HAL_RCC_ClockConfig+0x192>
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	490e      	ldr	r1, [pc, #56]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
 8004802:	f000 f821 	bl	8004848 <HAL_RCC_GetSysClockFreq>
 8004806:	4602      	mov	r2, r0
 8004808:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_ClockConfig+0x1c8>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	490a      	ldr	r1, [pc, #40]	; (800483c <HAL_RCC_ClockConfig+0x1cc>)
 8004814:	5ccb      	ldrb	r3, [r1, r3]
 8004816:	fa22 f303 	lsr.w	r3, r2, r3
 800481a:	4a09      	ldr	r2, [pc, #36]	; (8004840 <HAL_RCC_ClockConfig+0x1d0>)
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b09      	ldr	r3, [pc, #36]	; (8004844 <HAL_RCC_ClockConfig+0x1d4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f7fe f8b8 	bl	8002998 <HAL_InitTick>
 8004828:	2300      	movs	r3, #0
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40023c00 	.word	0x40023c00
 8004838:	40023800 	.word	0x40023800
 800483c:	080078c4 	.word	0x080078c4
 8004840:	20000020 	.word	0x20000020
 8004844:	20000024 	.word	0x20000024

08004848 <HAL_RCC_GetSysClockFreq>:
 8004848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800484c:	b094      	sub	sp, #80	; 0x50
 800484e:	af00      	add	r7, sp, #0
 8004850:	2300      	movs	r3, #0
 8004852:	647b      	str	r3, [r7, #68]	; 0x44
 8004854:	2300      	movs	r3, #0
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	2300      	movs	r3, #0
 800485a:	643b      	str	r3, [r7, #64]	; 0x40
 800485c:	2300      	movs	r3, #0
 800485e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004860:	4b79      	ldr	r3, [pc, #484]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 030c 	and.w	r3, r3, #12
 8004868:	2b08      	cmp	r3, #8
 800486a:	d00d      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x40>
 800486c:	2b08      	cmp	r3, #8
 800486e:	f200 80e1 	bhi.w	8004a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0x34>
 8004876:	2b04      	cmp	r3, #4
 8004878:	d003      	beq.n	8004882 <HAL_RCC_GetSysClockFreq+0x3a>
 800487a:	e0db      	b.n	8004a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 800487c:	4b73      	ldr	r3, [pc, #460]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800487e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004880:	e0db      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0x1f2>
 8004882:	4b73      	ldr	r3, [pc, #460]	; (8004a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8004884:	64bb      	str	r3, [r7, #72]	; 0x48
 8004886:	e0d8      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0x1f2>
 8004888:	4b6f      	ldr	r3, [pc, #444]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004890:	647b      	str	r3, [r7, #68]	; 0x44
 8004892:	4b6d      	ldr	r3, [pc, #436]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d063      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0x11e>
 800489e:	4b6a      	ldr	r3, [pc, #424]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	099b      	lsrs	r3, r3, #6
 80048a4:	2200      	movs	r2, #0
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b0:	633b      	str	r3, [r7, #48]	; 0x30
 80048b2:	2300      	movs	r3, #0
 80048b4:	637b      	str	r3, [r7, #52]	; 0x34
 80048b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048ba:	4622      	mov	r2, r4
 80048bc:	462b      	mov	r3, r5
 80048be:	f04f 0000 	mov.w	r0, #0
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	0159      	lsls	r1, r3, #5
 80048c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048cc:	0150      	lsls	r0, r2, #5
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4621      	mov	r1, r4
 80048d4:	1a51      	subs	r1, r2, r1
 80048d6:	6139      	str	r1, [r7, #16]
 80048d8:	4629      	mov	r1, r5
 80048da:	eb63 0301 	sbc.w	r3, r3, r1
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048ec:	4659      	mov	r1, fp
 80048ee:	018b      	lsls	r3, r1, #6
 80048f0:	4651      	mov	r1, sl
 80048f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048f6:	4651      	mov	r1, sl
 80048f8:	018a      	lsls	r2, r1, #6
 80048fa:	4651      	mov	r1, sl
 80048fc:	ebb2 0801 	subs.w	r8, r2, r1
 8004900:	4659      	mov	r1, fp
 8004902:	eb63 0901 	sbc.w	r9, r3, r1
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800491a:	4690      	mov	r8, r2
 800491c:	4699      	mov	r9, r3
 800491e:	4623      	mov	r3, r4
 8004920:	eb18 0303 	adds.w	r3, r8, r3
 8004924:	60bb      	str	r3, [r7, #8]
 8004926:	462b      	mov	r3, r5
 8004928:	eb49 0303 	adc.w	r3, r9, r3
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	f04f 0300 	mov.w	r3, #0
 8004936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800493a:	4629      	mov	r1, r5
 800493c:	024b      	lsls	r3, r1, #9
 800493e:	4621      	mov	r1, r4
 8004940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004944:	4621      	mov	r1, r4
 8004946:	024a      	lsls	r2, r1, #9
 8004948:	4610      	mov	r0, r2
 800494a:	4619      	mov	r1, r3
 800494c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494e:	2200      	movs	r2, #0
 8004950:	62bb      	str	r3, [r7, #40]	; 0x28
 8004952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004958:	f7fb fc6e 	bl	8000238 <__aeabi_uldivmod>
 800495c:	4602      	mov	r2, r0
 800495e:	460b      	mov	r3, r1
 8004960:	4613      	mov	r3, r2
 8004962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004964:	e058      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x1d0>
 8004966:	4b38      	ldr	r3, [pc, #224]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	2200      	movs	r2, #0
 800496e:	4618      	mov	r0, r3
 8004970:	4611      	mov	r1, r2
 8004972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004976:	623b      	str	r3, [r7, #32]
 8004978:	2300      	movs	r3, #0
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
 800497c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004980:	4642      	mov	r2, r8
 8004982:	464b      	mov	r3, r9
 8004984:	f04f 0000 	mov.w	r0, #0
 8004988:	f04f 0100 	mov.w	r1, #0
 800498c:	0159      	lsls	r1, r3, #5
 800498e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004992:	0150      	lsls	r0, r2, #5
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4641      	mov	r1, r8
 800499a:	ebb2 0a01 	subs.w	sl, r2, r1
 800499e:	4649      	mov	r1, r9
 80049a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049b8:	ebb2 040a 	subs.w	r4, r2, sl
 80049bc:	eb63 050b 	sbc.w	r5, r3, fp
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	00eb      	lsls	r3, r5, #3
 80049ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049ce:	00e2      	lsls	r2, r4, #3
 80049d0:	4614      	mov	r4, r2
 80049d2:	461d      	mov	r5, r3
 80049d4:	4643      	mov	r3, r8
 80049d6:	18e3      	adds	r3, r4, r3
 80049d8:	603b      	str	r3, [r7, #0]
 80049da:	464b      	mov	r3, r9
 80049dc:	eb45 0303 	adc.w	r3, r5, r3
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ee:	4629      	mov	r1, r5
 80049f0:	028b      	lsls	r3, r1, #10
 80049f2:	4621      	mov	r1, r4
 80049f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049f8:	4621      	mov	r1, r4
 80049fa:	028a      	lsls	r2, r1, #10
 80049fc:	4610      	mov	r0, r2
 80049fe:	4619      	mov	r1, r3
 8004a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a02:	2200      	movs	r2, #0
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	61fa      	str	r2, [r7, #28]
 8004a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0c:	f7fb fc14 	bl	8000238 <__aeabi_uldivmod>
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	4613      	mov	r3, r2
 8004a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a18:	4b0b      	ldr	r3, [pc, #44]	; (8004a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	f003 0303 	and.w	r3, r3, #3
 8004a22:	3301      	adds	r3, #1
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	643b      	str	r3, [r7, #64]	; 0x40
 8004a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a30:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a32:	e002      	b.n	8004a3a <HAL_RCC_GetSysClockFreq+0x1f2>
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a38:	bf00      	nop
 8004a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3750      	adds	r7, #80	; 0x50
 8004a40:	46bd      	mov	sp, r7
 8004a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	00f42400 	.word	0x00f42400
 8004a50:	007a1200 	.word	0x007a1200

08004a54 <HAL_RCC_GetHCLKFreq>:
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	4b03      	ldr	r3, [pc, #12]	; (8004a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	20000020 	.word	0x20000020

08004a6c <HAL_RCC_GetPCLK1Freq>:
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	f7ff fff0 	bl	8004a54 <HAL_RCC_GetHCLKFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	0a9b      	lsrs	r3, r3, #10
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	4903      	ldr	r1, [pc, #12]	; (8004a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
 8004a88:	4618      	mov	r0, r3
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	080078d4 	.word	0x080078d4

08004a94 <HAL_RCC_GetPCLK2Freq>:
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	f7ff ffdc 	bl	8004a54 <HAL_RCC_GetHCLKFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	0b5b      	lsrs	r3, r3, #13
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	080078d4 	.word	0x080078d4

08004abc <HAL_RCCEx_PeriphCLKConfig>:
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004ae4:	4b69      	ldr	r3, [pc, #420]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	4a68      	ldr	r2, [pc, #416]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004aee:	6093      	str	r3, [r2, #8]
 8004af0:	4b66      	ldr	r3, [pc, #408]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	4964      	ldr	r1, [pc, #400]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004b06:	2301      	movs	r3, #1
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d017      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004b16:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	4959      	ldr	r1, [pc, #356]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b34:	d101      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004b36:	2301      	movs	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004b42:	2301      	movs	r3, #1
 8004b44:	61bb      	str	r3, [r7, #24]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d017      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8004b52:	4b4e      	ldr	r3, [pc, #312]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	494a      	ldr	r1, [pc, #296]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b70:	d101      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xba>
 8004b72:	2301      	movs	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 808b 	beq.w	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004ba0:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	4a39      	ldr	r2, [pc, #228]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	6413      	str	r3, [r2, #64]	; 0x40
 8004bac:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	60bb      	str	r3, [r7, #8]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a34      	ldr	r2, [pc, #208]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	f7fd ff2c 	bl	8002a20 <HAL_GetTick>
 8004bc8:	6178      	str	r0, [r7, #20]
 8004bca:	e008      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004bcc:	f7fd ff28 	bl	8002a20 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x122>
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e38d      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004bde:	4b2c      	ldr	r3, [pc, #176]	; (8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004bea:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	613b      	str	r3, [r7, #16]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d035      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d02e      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c08:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4a1d      	ldr	r2, [pc, #116]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1e:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a1a      	ldr	r2, [pc, #104]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c30:	4b16      	ldr	r3, [pc, #88]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d114      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c3c:	f7fd fef0 	bl	8002a20 <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]
 8004c42:	e00a      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004c44:	f7fd feec 	bl	8002a20 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8004c56:	2303      	movs	r3, #3
 8004c58:	e34f      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0ee      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c72:	d111      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c82:	400b      	ands	r3, r1
 8004c84:	4901      	ldr	r1, [pc, #4]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
 8004c8a:	e00b      	b.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40007000 	.word	0x40007000
 8004c94:	0ffffcff 	.word	0x0ffffcff
 8004c98:	4bac      	ldr	r3, [pc, #688]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	4aab      	ldr	r2, [pc, #684]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ca2:	6093      	str	r3, [r2, #8]
 8004ca4:	4ba9      	ldr	r3, [pc, #676]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb0:	49a6      	ldr	r1, [pc, #664]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	670b      	str	r3, [r1, #112]	; 0x70
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d010      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004cc2:	4ba2      	ldr	r3, [pc, #648]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc8:	4aa0      	ldr	r2, [pc, #640]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004cd2:	4b9e      	ldr	r3, [pc, #632]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	499b      	ldr	r1, [pc, #620]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8004cf0:	4b96      	ldr	r3, [pc, #600]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfe:	4993      	ldr	r1, [pc, #588]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d12:	4b8e      	ldr	r3, [pc, #568]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d20:	498a      	ldr	r1, [pc, #552]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004d34:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d42:	4982      	ldr	r1, [pc, #520]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004d56:	4b7d      	ldr	r3, [pc, #500]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d64:	4979      	ldr	r1, [pc, #484]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004d78:	4b74      	ldr	r3, [pc, #464]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f023 0203 	bic.w	r2, r3, #3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d86:	4971      	ldr	r1, [pc, #452]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004d9a:	4b6c      	ldr	r3, [pc, #432]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f023 020c 	bic.w	r2, r3, #12
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da8:	4968      	ldr	r1, [pc, #416]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8004dbc:	4b63      	ldr	r3, [pc, #396]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dca:	4960      	ldr	r1, [pc, #384]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x338>
 8004dde:	4b5b      	ldr	r3, [pc, #364]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dec:	4957      	ldr	r1, [pc, #348]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004e00:	4b52      	ldr	r3, [pc, #328]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0e:	494f      	ldr	r1, [pc, #316]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8004e22:	4b4a      	ldr	r3, [pc, #296]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e30:	4946      	ldr	r1, [pc, #280]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8004e44:	4b41      	ldr	r3, [pc, #260]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e52:	493e      	ldr	r1, [pc, #248]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004e66:	4b39      	ldr	r3, [pc, #228]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e74:	4935      	ldr	r1, [pc, #212]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8004e88:	4b30      	ldr	r3, [pc, #192]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e96:	492d      	ldr	r1, [pc, #180]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d011      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x412>
 8004eaa:	4b28      	ldr	r3, [pc, #160]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004eb8:	4924      	ldr	r1, [pc, #144]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ec8:	d101      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x412>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0308 	and.w	r3, r3, #8
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x422>
 8004eda:	2301      	movs	r3, #1
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8004eea:	4b18      	ldr	r3, [pc, #96]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef8:	4914      	ldr	r1, [pc, #80]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x468>
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1c:	490b      	ldr	r1, [pc, #44]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00f      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f30:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f40:	4902      	ldr	r1, [pc, #8]	; (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f48:	e002      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8004f5c:	4b89      	ldr	r3, [pc, #548]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6c:	4985      	ldr	r1, [pc, #532]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00b      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8004f80:	4b80      	ldr	r3, [pc, #512]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f86:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f90:	497c      	ldr	r1, [pc, #496]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d005      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fa6:	f040 80d6 	bne.w	8005156 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8004faa:	4b76      	ldr	r3, [pc, #472]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a75      	ldr	r2, [pc, #468]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	f7fd fd33 	bl	8002a20 <HAL_GetTick>
 8004fba:	6178      	str	r0, [r7, #20]
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004fbe:	f7fd fd2f 	bl	8002a20 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b64      	cmp	r3, #100	; 0x64
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e194      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004fd0:	4b6c      	ldr	r3, [pc, #432]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d021      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d11d      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004ff0:	4b64      	ldr	r3, [pc, #400]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff6:	0c1b      	lsrs	r3, r3, #16
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	613b      	str	r3, [r7, #16]
 8004ffe:	4b61      	ldr	r3, [pc, #388]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005004:	0e1b      	lsrs	r3, r3, #24
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	019a      	lsls	r2, r3, #6
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	431a      	orrs	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	061b      	lsls	r3, r3, #24
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	071b      	lsls	r3, r3, #28
 8005024:	4957      	ldr	r1, [pc, #348]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d004      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d02e      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005056:	d129      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8005058:	4b4a      	ldr	r3, [pc, #296]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800505e:	0c1b      	lsrs	r3, r3, #16
 8005060:	f003 0303 	and.w	r3, r3, #3
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	4b47      	ldr	r3, [pc, #284]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506c:	0f1b      	lsrs	r3, r3, #28
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	019a      	lsls	r2, r3, #6
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	431a      	orrs	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	071b      	lsls	r3, r3, #28
 800508c:	493d      	ldr	r1, [pc, #244]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8005094:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800509a:	f023 021f 	bic.w	r2, r3, #31
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	3b01      	subs	r3, #1
 80050a4:	4937      	ldr	r1, [pc, #220]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01d      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 80050b8:	4b32      	ldr	r3, [pc, #200]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050be:	0e1b      	lsrs	r3, r3, #24
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	613b      	str	r3, [r7, #16]
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050cc:	0f1b      	lsrs	r3, r3, #28
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	019a      	lsls	r2, r3, #6
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	431a      	orrs	r2, r3
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	061b      	lsls	r3, r3, #24
 80050e6:	431a      	orrs	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	071b      	lsls	r3, r3, #28
 80050ec:	4925      	ldr	r1, [pc, #148]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d011      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	019a      	lsls	r2, r3, #6
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	071b      	lsls	r3, r3, #28
 800511c:	4919      	ldr	r1, [pc, #100]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 8005124:	4b17      	ldr	r3, [pc, #92]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a16      	ldr	r2, [pc, #88]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800512a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	f7fd fc76 	bl	8002a20 <HAL_GetTick>
 8005134:	6178      	str	r0, [r7, #20]
 8005136:	e008      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005138:	f7fd fc72 	bl	8002a20 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005146:	2303      	movs	r3, #3
 8005148:	e0d7      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800514a:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b01      	cmp	r3, #1
 800515a:	f040 80cd 	bne.w	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a08      	ldr	r2, [pc, #32]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	f7fd fc59 	bl	8002a20 <HAL_GetTick>
 800516e:	6178      	str	r0, [r7, #20]
 8005170:	e00a      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8005172:	f7fd fc55 	bl	8002a20 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b64      	cmp	r3, #100	; 0x64
 800517e:	d903      	bls.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8005180:	2303      	movs	r3, #3
 8005182:	e0ba      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005184:	40023800 	.word	0x40023800
 8005188:	4b5e      	ldr	r3, [pc, #376]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005194:	d0ed      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x702>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d02e      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x758>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d12a      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x758>
 80051be:	4b51      	ldr	r3, [pc, #324]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	4b4d      	ldr	r3, [pc, #308]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d2:	0f1b      	lsrs	r3, r3, #28
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	019a      	lsls	r2, r3, #6
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	061b      	lsls	r3, r3, #24
 80051ec:	431a      	orrs	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	071b      	lsls	r3, r3, #28
 80051f2:	4944      	ldr	r1, [pc, #272]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051fa:	4b42      	ldr	r3, [pc, #264]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005200:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	3b01      	subs	r3, #1
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	493d      	ldr	r1, [pc, #244]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d022      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005228:	d11d      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800522a:	4b36      	ldr	r3, [pc, #216]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	0e1b      	lsrs	r3, r3, #24
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	4b32      	ldr	r3, [pc, #200]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	0f1b      	lsrs	r3, r3, #28
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	019a      	lsls	r2, r3, #6
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	431a      	orrs	r2, r3
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	061b      	lsls	r3, r3, #24
 8005258:	431a      	orrs	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	071b      	lsls	r3, r3, #28
 800525e:	4929      	ldr	r1, [pc, #164]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d028      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x808>
 8005272:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	0e1b      	lsrs	r3, r3, #24
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	4b20      	ldr	r3, [pc, #128]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	019a      	lsls	r2, r3, #6
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	041b      	lsls	r3, r3, #16
 8005298:	431a      	orrs	r2, r3
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	061b      	lsls	r3, r3, #24
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	071b      	lsls	r3, r3, #28
 80052a6:	4917      	ldr	r1, [pc, #92]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052ae:	4b15      	ldr	r3, [pc, #84]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	4911      	ldr	r1, [pc, #68]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	f7fd fba6 	bl	8002a20 <HAL_GetTick>
 80052d4:	6178      	str	r0, [r7, #20]
 80052d6:	e008      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80052d8:	f7fd fba2 	bl	8002a20 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	; 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80052e6:	2303      	movs	r3, #3
 80052e8:	e007      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80052ea:	4b06      	ldr	r3, [pc, #24]	; (8005304 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f6:	d1ef      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 80052f8:	2300      	movs	r3, #0
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800

08005308 <HAL_SPI_Init>:
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_SPI_Init+0x12>
 8005316:	2301      	movs	r3, #1
 8005318:	e084      	b.n	8005424 <HAL_SPI_Init+0x11c>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <HAL_SPI_Init+0x32>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fc fefb 	bl	8002130 <HAL_SPI_MspInit>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800535a:	d902      	bls.n	8005362 <HAL_SPI_Init+0x5a>
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e002      	b.n	8005368 <HAL_SPI_Init+0x60>
 8005362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005370:	d007      	beq.n	8005382 <HAL_SPI_Init+0x7a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800537a:	d002      	beq.n	8005382 <HAL_SPI_Init+0x7a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	629a      	str	r2, [r3, #40]	; 0x28
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <HAL_SPI_Init+0x9a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005392:	d903      	bls.n	800539c <HAL_SPI_Init+0x94>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
 800539a:	e002      	b.n	80053a2 <HAL_SPI_Init+0x9a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	ea42 0103 	orr.w	r1, r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	f003 0204 	and.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	ea42 0103 	orr.w	r1, r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69da      	ldr	r2, [r3, #28]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005412:	61da      	str	r2, [r3, #28]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	661a      	str	r2, [r3, #96]	; 0x60
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8005422:	2300      	movs	r3, #0
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_TIM_Base_Init>:
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_TIM_Base_Init+0x12>
 800543a:	2301      	movs	r3, #1
 800543c:	e01d      	b.n	800547a <HAL_TIM_Base_Init+0x4e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_TIM_Base_Init+0x2c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc feec 	bl	8002230 <HAL_TIM_Base_MspInit>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 fe18 	bl	80060a0 <TIM_Base_SetConfig>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005478:	2300      	movs	r3, #0
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_TIM_Base_Start_IT>:
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	60da      	str	r2, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <HAL_TIM_Base_Start_IT+0x50>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d00b      	beq.n	80054c6 <HAL_TIM_Base_Start_IT+0x42>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d007      	beq.n	80054c6 <HAL_TIM_Base_Start_IT+0x42>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	2300      	movs	r3, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	00010007 	.word	0x00010007

080054d8 <HAL_TIM_OC_Init>:
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_OC_Init+0x12>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e01d      	b.n	8005526 <HAL_TIM_OC_Init+0x4e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_TIM_OC_Init+0x2c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f815 	bl	800552e <HAL_TIM_OC_MspInit>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2202      	movs	r2, #2
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f000 fdc2 	bl	80060a0 <TIM_Base_SetConfig>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005524:	2300      	movs	r3, #0
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_TIM_OC_MspInit>:
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIM_PWM_Init>:
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_TIM_PWM_Init+0x12>
 8005550:	2301      	movs	r3, #1
 8005552:	e01d      	b.n	8005590 <HAL_TIM_PWM_Init+0x4e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d106      	bne.n	800556e <HAL_TIM_PWM_Init+0x2c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fc ff71 	bl	8002450 <HAL_TIM_PWM_MspInit>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2202      	movs	r2, #2
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f000 fd8d 	bl	80060a0 <TIM_Base_SetConfig>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800558e:	2300      	movs	r3, #0
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_TIM_PWM_Start>:
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2201      	movs	r2, #1
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 fa3a 	bl	8006a24 <TIM_CCxChannelCmd>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a17      	ldr	r2, [pc, #92]	; (8005614 <HAL_TIM_PWM_Start+0x7c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d004      	beq.n	80055c4 <HAL_TIM_PWM_Start+0x2c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a16      	ldr	r2, [pc, #88]	; (8005618 <HAL_TIM_PWM_Start+0x80>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d101      	bne.n	80055c8 <HAL_TIM_PWM_Start+0x30>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <HAL_TIM_PWM_Start+0x32>
 80055c8:	2300      	movs	r3, #0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d007      	beq.n	80055de <HAL_TIM_PWM_Start+0x46>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055dc:	645a      	str	r2, [r3, #68]	; 0x44
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	4b0d      	ldr	r3, [pc, #52]	; (800561c <HAL_TIM_PWM_Start+0x84>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b06      	cmp	r3, #6
 80055ee:	d00b      	beq.n	8005608 <HAL_TIM_PWM_Start+0x70>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f6:	d007      	beq.n	8005608 <HAL_TIM_PWM_Start+0x70>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	2300      	movs	r3, #0
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40010400 	.word	0x40010400
 800561c:	00010007 	.word	0x00010007

08005620 <HAL_TIM_IC_Init>:
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <HAL_TIM_IC_Init+0x12>
 800562e:	2301      	movs	r3, #1
 8005630:	e01d      	b.n	800566e <HAL_TIM_IC_Init+0x4e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d106      	bne.n	800564c <HAL_TIM_IC_Init+0x2c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f815 	bl	8005676 <HAL_TIM_IC_MspInit>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3304      	adds	r3, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f000 fd1e 	bl	80060a0 <TIM_Base_SetConfig>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800566c:	2300      	movs	r3, #0
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_TIM_IC_MspInit>:
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <HAL_TIM_Encoder_Init>:
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_TIM_Encoder_Init+0x14>
 800569c:	2301      	movs	r3, #1
 800569e:	e07b      	b.n	8005798 <HAL_TIM_Encoder_Init+0x10c>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <HAL_TIM_Encoder_Init+0x2e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fc fe55 	bl	8002364 <HAL_TIM_Encoder_MspInit>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6899      	ldr	r1, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4b34      	ldr	r3, [pc, #208]	; (80057a0 <HAL_TIM_Encoder_Init+0x114>)
 80056ce:	400b      	ands	r3, r1
 80056d0:	6093      	str	r3, [r2, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	4610      	mov	r0, r2
 80056de:	f000 fcdf 	bl	80060a0 <TIM_Base_SetConfig>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4b27      	ldr	r3, [pc, #156]	; (80057a4 <HAL_TIM_Encoder_Init+0x118>)
 8005708:	4013      	ands	r3, r2
 800570a:	613b      	str	r3, [r7, #16]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	4313      	orrs	r3, r2
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4b21      	ldr	r3, [pc, #132]	; (80057a8 <HAL_TIM_Encoder_Init+0x11c>)
 8005722:	4013      	ands	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4b20      	ldr	r3, [pc, #128]	; (80057ac <HAL_TIM_Encoder_Init+0x120>)
 800572a:	4013      	ands	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	4313      	orrs	r3, r2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	011a      	lsls	r2, r3, #4
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	031b      	lsls	r3, r3, #12
 800574c:	4313      	orrs	r3, r2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	4313      	orrs	r3, r2
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	609a      	str	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	619a      	str	r2, [r3, #24]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005796:	2300      	movs	r3, #0
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	fffebff8 	.word	0xfffebff8
 80057a4:	fffffcfc 	.word	0xfffffcfc
 80057a8:	fffff3f3 	.word	0xfffff3f3
 80057ac:	ffff0f0f 	.word	0xffff0f0f

080057b0 <HAL_TIM_Encoder_Start>:
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_TIM_Encoder_Start+0x18>
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d008      	beq.n	80057d8 <HAL_TIM_Encoder_Start+0x28>
 80057c6:	e00f      	b.n	80057e8 <HAL_TIM_Encoder_Start+0x38>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2201      	movs	r2, #1
 80057ce:	2100      	movs	r1, #0
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 f927 	bl	8006a24 <TIM_CCxChannelCmd>
 80057d6:	e016      	b.n	8005806 <HAL_TIM_Encoder_Start+0x56>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2201      	movs	r2, #1
 80057de:	2104      	movs	r1, #4
 80057e0:	4618      	mov	r0, r3
 80057e2:	f001 f91f 	bl	8006a24 <TIM_CCxChannelCmd>
 80057e6:	e00e      	b.n	8005806 <HAL_TIM_Encoder_Start+0x56>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2201      	movs	r2, #1
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 f917 	bl	8006a24 <TIM_CCxChannelCmd>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2201      	movs	r2, #1
 80057fc:	2104      	movs	r1, #4
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f910 	bl	8006a24 <TIM_CCxChannelCmd>
 8005804:	bf00      	nop
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f042 0201 	orr.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	2300      	movs	r3, #0
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_IRQHandler>:
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b02      	cmp	r3, #2
 8005834:	d122      	bne.n	800587c <HAL_TIM_IRQHandler+0x5c>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b02      	cmp	r3, #2
 8005842:	d11b      	bne.n	800587c <HAL_TIM_IRQHandler+0x5c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0202 	mvn.w	r2, #2
 800584c:	611a      	str	r2, [r3, #16]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	771a      	strb	r2, [r3, #28]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_TIM_IRQHandler+0x4a>
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fbfe 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
 8005868:	e005      	b.n	8005876 <HAL_TIM_IRQHandler+0x56>
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fbf0 	bl	8006050 <HAL_TIM_OC_DelayElapsedCallback>
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fc01 	bl	8006078 <HAL_TIM_PWM_PulseFinishedCallback>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	771a      	strb	r2, [r3, #28]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b04      	cmp	r3, #4
 8005888:	d122      	bne.n	80058d0 <HAL_TIM_IRQHandler+0xb0>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b04      	cmp	r3, #4
 8005896:	d11b      	bne.n	80058d0 <HAL_TIM_IRQHandler+0xb0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0204 	mvn.w	r2, #4
 80058a0:	611a      	str	r2, [r3, #16]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2202      	movs	r2, #2
 80058a6:	771a      	strb	r2, [r3, #28]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_TIM_IRQHandler+0x9e>
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fbd4 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
 80058bc:	e005      	b.n	80058ca <HAL_TIM_IRQHandler+0xaa>
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fbc6 	bl	8006050 <HAL_TIM_OC_DelayElapsedCallback>
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fbd7 	bl	8006078 <HAL_TIM_PWM_PulseFinishedCallback>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d122      	bne.n	8005924 <HAL_TIM_IRQHandler+0x104>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d11b      	bne.n	8005924 <HAL_TIM_IRQHandler+0x104>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0208 	mvn.w	r2, #8
 80058f4:	611a      	str	r2, [r3, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2204      	movs	r2, #4
 80058fa:	771a      	strb	r2, [r3, #28]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	f003 0303 	and.w	r3, r3, #3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_TIM_IRQHandler+0xf2>
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fbaa 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
 8005910:	e005      	b.n	800591e <HAL_TIM_IRQHandler+0xfe>
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 fb9c 	bl	8006050 <HAL_TIM_OC_DelayElapsedCallback>
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 fbad 	bl	8006078 <HAL_TIM_PWM_PulseFinishedCallback>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	771a      	strb	r2, [r3, #28]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b10      	cmp	r3, #16
 8005930:	d122      	bne.n	8005978 <HAL_TIM_IRQHandler+0x158>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b10      	cmp	r3, #16
 800593e:	d11b      	bne.n	8005978 <HAL_TIM_IRQHandler+0x158>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f06f 0210 	mvn.w	r2, #16
 8005948:	611a      	str	r2, [r3, #16]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2208      	movs	r2, #8
 800594e:	771a      	strb	r2, [r3, #28]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_TIM_IRQHandler+0x146>
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fb80 	bl	8006064 <HAL_TIM_IC_CaptureCallback>
 8005964:	e005      	b.n	8005972 <HAL_TIM_IRQHandler+0x152>
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fb72 	bl	8006050 <HAL_TIM_OC_DelayElapsedCallback>
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fb83 	bl	8006078 <HAL_TIM_PWM_PulseFinishedCallback>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	771a      	strb	r2, [r3, #28]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10e      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x184>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b01      	cmp	r3, #1
 8005992:	d107      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x184>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0201 	mvn.w	r2, #1
 800599c:	611a      	str	r2, [r3, #16]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7fa fe8a 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d10e      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x1b0>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059bc:	2b80      	cmp	r3, #128	; 0x80
 80059be:	d107      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x1b0>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059c8:	611a      	str	r2, [r3, #16]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 f966 	bl	8006c9c <HAL_TIMEx_BreakCallback>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059de:	d10e      	bne.n	80059fe <HAL_TIM_IRQHandler+0x1de>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b80      	cmp	r3, #128	; 0x80
 80059ec:	d107      	bne.n	80059fe <HAL_TIM_IRQHandler+0x1de>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059f6:	611a      	str	r2, [r3, #16]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 f959 	bl	8006cb0 <HAL_TIMEx_Break2Callback>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d10e      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x20a>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	d107      	bne.n	8005a2a <HAL_TIM_IRQHandler+0x20a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fb31 	bl	800608c <HAL_TIM_TriggerCallback>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d10e      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x236>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f003 0320 	and.w	r3, r3, #32
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d107      	bne.n	8005a56 <HAL_TIM_IRQHandler+0x236>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0220 	mvn.w	r2, #32
 8005a4e:	611a      	str	r2, [r3, #16]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f001 f919 	bl	8006c88 <HAL_TIMEx_CommutCallback>
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <HAL_TIM_OC_ConfigChannel>:
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_TIM_OC_ConfigChannel+0x1a>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e06c      	b.n	8005b54 <HAL_TIM_OC_ConfigChannel+0xf4>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b14      	cmp	r3, #20
 8005a8e:	d857      	bhi.n	8005b40 <HAL_TIM_OC_ConfigChannel+0xe0>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <HAL_TIM_OC_ConfigChannel+0x38>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005aed 	.word	0x08005aed
 8005a9c:	08005b41 	.word	0x08005b41
 8005aa0:	08005b41 	.word	0x08005b41
 8005aa4:	08005b41 	.word	0x08005b41
 8005aa8:	08005afb 	.word	0x08005afb
 8005aac:	08005b41 	.word	0x08005b41
 8005ab0:	08005b41 	.word	0x08005b41
 8005ab4:	08005b41 	.word	0x08005b41
 8005ab8:	08005b09 	.word	0x08005b09
 8005abc:	08005b41 	.word	0x08005b41
 8005ac0:	08005b41 	.word	0x08005b41
 8005ac4:	08005b41 	.word	0x08005b41
 8005ac8:	08005b17 	.word	0x08005b17
 8005acc:	08005b41 	.word	0x08005b41
 8005ad0:	08005b41 	.word	0x08005b41
 8005ad4:	08005b41 	.word	0x08005b41
 8005ad8:	08005b25 	.word	0x08005b25
 8005adc:	08005b41 	.word	0x08005b41
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	08005b41 	.word	0x08005b41
 8005ae8:	08005b33 	.word	0x08005b33
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68b9      	ldr	r1, [r7, #8]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fb74 	bl	80061e0 <TIM_OC1_SetConfig>
 8005af8:	e023      	b.n	8005b42 <HAL_TIM_OC_ConfigChannel+0xe2>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fbdf 	bl	80062c4 <TIM_OC2_SetConfig>
 8005b06:	e01c      	b.n	8005b42 <HAL_TIM_OC_ConfigChannel+0xe2>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fc50 	bl	80063b4 <TIM_OC3_SetConfig>
 8005b14:	e015      	b.n	8005b42 <HAL_TIM_OC_ConfigChannel+0xe2>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68b9      	ldr	r1, [r7, #8]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fcbf 	bl	80064a0 <TIM_OC4_SetConfig>
 8005b22:	e00e      	b.n	8005b42 <HAL_TIM_OC_ConfigChannel+0xe2>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fd10 	bl	8006550 <TIM_OC5_SetConfig>
 8005b30:	e007      	b.n	8005b42 <HAL_TIM_OC_ConfigChannel+0xe2>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fd5b 	bl	80065f4 <TIM_OC6_SetConfig>
 8005b3e:	e000      	b.n	8005b42 <HAL_TIM_OC_ConfigChannel+0xe2>
 8005b40:	bf00      	nop
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b52:	2300      	movs	r3, #0
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_TIM_IC_ConfigChannel>:
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e08a      	b.n	8005c8c <HAL_TIM_IC_ConfigChannel+0x130>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2202      	movs	r2, #2
 8005b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d11b      	bne.n	8005bc4 <HAL_TIM_IC_ConfigChannel+0x68>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f000 fd7e 	bl	800669c <TIM_TI1_SetConfig>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 020c 	bic.w	r2, r2, #12
 8005bae:	619a      	str	r2, [r3, #24]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	689a      	ldr	r2, [r3, #8]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	619a      	str	r2, [r3, #24]
 8005bc2:	e05a      	b.n	8005c7a <HAL_TIM_IC_ConfigChannel+0x11e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d11c      	bne.n	8005c04 <HAL_TIM_IC_ConfigChannel+0xa8>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6818      	ldr	r0, [r3, #0]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6819      	ldr	r1, [r3, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f000 fe02 	bl	80067e2 <TIM_TI2_SetConfig>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005bec:	619a      	str	r2, [r3, #24]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6999      	ldr	r1, [r3, #24]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	021a      	lsls	r2, r3, #8
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	619a      	str	r2, [r3, #24]
 8005c02:	e03a      	b.n	8005c7a <HAL_TIM_IC_ConfigChannel+0x11e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d11b      	bne.n	8005c42 <HAL_TIM_IC_ConfigChannel+0xe6>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	6819      	ldr	r1, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f000 fe4f 	bl	80068bc <TIM_TI3_SetConfig>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69da      	ldr	r2, [r3, #28]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 020c 	bic.w	r2, r2, #12
 8005c2c:	61da      	str	r2, [r3, #28]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69d9      	ldr	r1, [r3, #28]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	61da      	str	r2, [r3, #28]
 8005c40:	e01b      	b.n	8005c7a <HAL_TIM_IC_ConfigChannel+0x11e>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	6819      	ldr	r1, [r3, #0]
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f000 fe6f 	bl	8006934 <TIM_TI4_SetConfig>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c64:	61da      	str	r2, [r3, #28]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	021a      	lsls	r2, r3, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	61da      	str	r2, [r3, #28]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_PWM_ConfigChannel>:
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e105      	b.n	8005eba <HAL_TIM_PWM_ConfigChannel+0x226>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2202      	movs	r2, #2
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2b14      	cmp	r3, #20
 8005cc2:	f200 80f0 	bhi.w	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005d21 	.word	0x08005d21
 8005cd0:	08005ea7 	.word	0x08005ea7
 8005cd4:	08005ea7 	.word	0x08005ea7
 8005cd8:	08005ea7 	.word	0x08005ea7
 8005cdc:	08005d61 	.word	0x08005d61
 8005ce0:	08005ea7 	.word	0x08005ea7
 8005ce4:	08005ea7 	.word	0x08005ea7
 8005ce8:	08005ea7 	.word	0x08005ea7
 8005cec:	08005da3 	.word	0x08005da3
 8005cf0:	08005ea7 	.word	0x08005ea7
 8005cf4:	08005ea7 	.word	0x08005ea7
 8005cf8:	08005ea7 	.word	0x08005ea7
 8005cfc:	08005de3 	.word	0x08005de3
 8005d00:	08005ea7 	.word	0x08005ea7
 8005d04:	08005ea7 	.word	0x08005ea7
 8005d08:	08005ea7 	.word	0x08005ea7
 8005d0c:	08005e25 	.word	0x08005e25
 8005d10:	08005ea7 	.word	0x08005ea7
 8005d14:	08005ea7 	.word	0x08005ea7
 8005d18:	08005ea7 	.word	0x08005ea7
 8005d1c:	08005e65 	.word	0x08005e65
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fa5a 	bl	80061e0 <TIM_OC1_SetConfig>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0208 	orr.w	r2, r2, #8
 8005d3a:	619a      	str	r2, [r3, #24]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0204 	bic.w	r2, r2, #4
 8005d4a:	619a      	str	r2, [r3, #24]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6999      	ldr	r1, [r3, #24]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	619a      	str	r2, [r3, #24]
 8005d5e:	e0a3      	b.n	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 faac 	bl	80062c4 <TIM_OC2_SetConfig>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d7a:	619a      	str	r2, [r3, #24]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8a:	619a      	str	r2, [r3, #24]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6999      	ldr	r1, [r3, #24]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	021a      	lsls	r2, r3, #8
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	619a      	str	r2, [r3, #24]
 8005da0:	e082      	b.n	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fb03 	bl	80063b4 <TIM_OC3_SetConfig>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0208 	orr.w	r2, r2, #8
 8005dbc:	61da      	str	r2, [r3, #28]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0204 	bic.w	r2, r2, #4
 8005dcc:	61da      	str	r2, [r3, #28]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69d9      	ldr	r1, [r3, #28]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	61da      	str	r2, [r3, #28]
 8005de0:	e062      	b.n	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fb59 	bl	80064a0 <TIM_OC4_SetConfig>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfc:	61da      	str	r2, [r3, #28]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0c:	61da      	str	r2, [r3, #28]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69d9      	ldr	r1, [r3, #28]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	021a      	lsls	r2, r3, #8
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	61da      	str	r2, [r3, #28]
 8005e22:	e041      	b.n	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fb90 	bl	8006550 <TIM_OC5_SetConfig>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f042 0208 	orr.w	r2, r2, #8
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0204 	bic.w	r2, r2, #4
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	655a      	str	r2, [r3, #84]	; 0x54
 8005e62:	e021      	b.n	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68b9      	ldr	r1, [r7, #8]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fbc2 	bl	80065f4 <TIM_OC6_SetConfig>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	021a      	lsls	r2, r3, #8
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
 8005ea4:	e000      	b.n	8005ea8 <HAL_TIM_PWM_ConfigChannel+0x214>
 8005ea6:	bf00      	nop
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005eb8:	2300      	movs	r3, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop

08005ec4 <HAL_TIM_ConfigClockSource>:
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIM_ConfigClockSource+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e0b3      	b.n	8006044 <HAL_TIM_ConfigClockSource+0x180>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	60fb      	str	r3, [r7, #12]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4b55      	ldr	r3, [pc, #340]	; (800604c <HAL_TIM_ConfigClockSource+0x188>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	609a      	str	r2, [r3, #8]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f14:	d03e      	beq.n	8005f94 <HAL_TIM_ConfigClockSource+0xd0>
 8005f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f1a:	f200 8087 	bhi.w	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f22:	f000 8085 	beq.w	8006030 <HAL_TIM_ConfigClockSource+0x16c>
 8005f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2a:	d87f      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f2c:	2b70      	cmp	r3, #112	; 0x70
 8005f2e:	d01a      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0xa2>
 8005f30:	2b70      	cmp	r3, #112	; 0x70
 8005f32:	d87b      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f34:	2b60      	cmp	r3, #96	; 0x60
 8005f36:	d050      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0x116>
 8005f38:	2b60      	cmp	r3, #96	; 0x60
 8005f3a:	d877      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f3c:	2b50      	cmp	r3, #80	; 0x50
 8005f3e:	d03c      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0xf6>
 8005f40:	2b50      	cmp	r3, #80	; 0x50
 8005f42:	d873      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f44:	2b40      	cmp	r3, #64	; 0x40
 8005f46:	d058      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x136>
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d86f      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f4c:	2b30      	cmp	r3, #48	; 0x30
 8005f4e:	d064      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x156>
 8005f50:	2b30      	cmp	r3, #48	; 0x30
 8005f52:	d86b      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d060      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x156>
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	d867      	bhi.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d05c      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x156>
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d05a      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x156>
 8005f64:	e062      	b.n	800602c <HAL_TIM_ConfigClockSource+0x168>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6899      	ldr	r1, [r3, #8]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	f000 fd35 	bl	80069e4 <TIM_ETR_SetConfig>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	609a      	str	r2, [r3, #8]
 8005f92:	e04e      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	6899      	ldr	r1, [r3, #8]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f000 fd1e 	bl	80069e4 <TIM_ETR_SetConfig>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	e03b      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6859      	ldr	r1, [r3, #4]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f000 fbdc 	bl	8006784 <TIM_TI1_ConfigInputStage>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2150      	movs	r1, #80	; 0x50
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 fceb 	bl	80069ae <TIM_ITRx_SetConfig>
 8005fd8:	e02b      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 fc38 	bl	800685c <TIM_TI2_ConfigInputStage>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2160      	movs	r1, #96	; 0x60
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fcdb 	bl	80069ae <TIM_ITRx_SetConfig>
 8005ff8:	e01b      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	461a      	mov	r2, r3
 8006008:	f000 fbbc 	bl	8006784 <TIM_TI1_ConfigInputStage>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2140      	movs	r1, #64	; 0x40
 8006012:	4618      	mov	r0, r3
 8006014:	f000 fccb 	bl	80069ae <TIM_ITRx_SetConfig>
 8006018:	e00b      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f000 fcc2 	bl	80069ae <TIM_ITRx_SetConfig>
 800602a:	e002      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
 800602c:	bf00      	nop
 800602e:	e000      	b.n	8006032 <HAL_TIM_ConfigClockSource+0x16e>
 8006030:	bf00      	nop
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006042:	2300      	movs	r3, #0
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	fffeff88 	.word	0xfffeff88

08006050 <HAL_TIM_OC_DelayElapsedCallback>:
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIM_IC_CaptureCallback>:
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_TriggerCallback>:
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <TIM_Base_SetConfig>:
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a40      	ldr	r2, [pc, #256]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d013      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060be:	d00f      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a3d      	ldr	r2, [pc, #244]	; (80061b8 <TIM_Base_SetConfig+0x118>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a3c      	ldr	r2, [pc, #240]	; (80061bc <TIM_Base_SetConfig+0x11c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d007      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a3b      	ldr	r2, [pc, #236]	; (80061c0 <TIM_Base_SetConfig+0x120>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a3a      	ldr	r2, [pc, #232]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x52>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a2f      	ldr	r2, [pc, #188]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d02b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d027      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a2c      	ldr	r2, [pc, #176]	; (80061b8 <TIM_Base_SetConfig+0x118>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d023      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a2b      	ldr	r2, [pc, #172]	; (80061bc <TIM_Base_SetConfig+0x11c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d01f      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2a      	ldr	r2, [pc, #168]	; (80061c0 <TIM_Base_SetConfig+0x120>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d01b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a29      	ldr	r2, [pc, #164]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d017      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a28      	ldr	r2, [pc, #160]	; (80061c8 <TIM_Base_SetConfig+0x128>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a27      	ldr	r2, [pc, #156]	; (80061cc <TIM_Base_SetConfig+0x12c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00f      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <TIM_Base_SetConfig+0x130>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a25      	ldr	r2, [pc, #148]	; (80061d4 <TIM_Base_SetConfig+0x134>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a24      	ldr	r2, [pc, #144]	; (80061d8 <TIM_Base_SetConfig+0x138>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a23      	ldr	r2, [pc, #140]	; (80061dc <TIM_Base_SetConfig+0x13c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <TIM_Base_SetConfig+0xc4>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	4313      	orrs	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	629a      	str	r2, [r3, #40]	; 0x28
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <TIM_Base_SetConfig+0x114>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_Base_SetConfig+0xf8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a0c      	ldr	r2, [pc, #48]	; (80061c4 <TIM_Base_SetConfig+0x124>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <TIM_Base_SetConfig+0x100>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	615a      	str	r2, [r3, #20]
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40010400 	.word	0x40010400
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800
 80061d4:	40001800 	.word	0x40001800
 80061d8:	40001c00 	.word	0x40001c00
 80061dc:	40002000 	.word	0x40002000

080061e0 <TIM_OC1_SetConfig>:
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0201 	bic.w	r2, r3, #1
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	621a      	str	r2, [r3, #32]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <TIM_OC1_SetConfig+0xd8>)
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 0302 	bic.w	r3, r3, #2
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a21      	ldr	r2, [pc, #132]	; (80062bc <TIM_OC1_SetConfig+0xdc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_OC1_SetConfig+0x64>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a20      	ldr	r2, [pc, #128]	; (80062c0 <TIM_OC1_SetConfig+0xe0>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10c      	bne.n	800625e <TIM_OC1_SetConfig+0x7e>
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0308 	bic.w	r3, r3, #8
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f023 0304 	bic.w	r3, r3, #4
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a16      	ldr	r2, [pc, #88]	; (80062bc <TIM_OC1_SetConfig+0xdc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d003      	beq.n	800626e <TIM_OC1_SetConfig+0x8e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a15      	ldr	r2, [pc, #84]	; (80062c0 <TIM_OC1_SetConfig+0xe0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d111      	bne.n	8006292 <TIM_OC1_SetConfig+0xb2>
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4313      	orrs	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	605a      	str	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	619a      	str	r2, [r3, #24]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	635a      	str	r2, [r3, #52]	; 0x34
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	621a      	str	r2, [r3, #32]
 80062ac:	bf00      	nop
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	fffeff8f 	.word	0xfffeff8f
 80062bc:	40010000 	.word	0x40010000
 80062c0:	40010400 	.word	0x40010400

080062c4 <TIM_OC2_SetConfig>:
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0210 	bic.w	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	621a      	str	r2, [r3, #32]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4b2e      	ldr	r3, [pc, #184]	; (80063a8 <TIM_OC2_SetConfig+0xe4>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0320 	bic.w	r3, r3, #32
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	4313      	orrs	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a23      	ldr	r2, [pc, #140]	; (80063ac <TIM_OC2_SetConfig+0xe8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC2_SetConfig+0x68>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <TIM_OC2_SetConfig+0xec>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d10d      	bne.n	8006348 <TIM_OC2_SetConfig+0x84>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a18      	ldr	r2, [pc, #96]	; (80063ac <TIM_OC2_SetConfig+0xe8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d003      	beq.n	8006358 <TIM_OC2_SetConfig+0x94>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <TIM_OC2_SetConfig+0xec>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d113      	bne.n	8006380 <TIM_OC2_SetConfig+0xbc>
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006366:	613b      	str	r3, [r7, #16]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	619a      	str	r2, [r3, #24]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	639a      	str	r2, [r3, #56]	; 0x38
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	621a      	str	r2, [r3, #32]
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	feff8fff 	.word	0xfeff8fff
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40010400 	.word	0x40010400

080063b4 <TIM_OC3_SetConfig>:
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	621a      	str	r2, [r3, #32]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	613b      	str	r3, [r7, #16]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <TIM_OC3_SetConfig+0xe0>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063fc:	617b      	str	r3, [r7, #20]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	4313      	orrs	r3, r2
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a22      	ldr	r2, [pc, #136]	; (8006498 <TIM_OC3_SetConfig+0xe4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d003      	beq.n	800641a <TIM_OC3_SetConfig+0x66>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a21      	ldr	r2, [pc, #132]	; (800649c <TIM_OC3_SetConfig+0xe8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d10d      	bne.n	8006436 <TIM_OC3_SetConfig+0x82>
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	697a      	ldr	r2, [r7, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a17      	ldr	r2, [pc, #92]	; (8006498 <TIM_OC3_SetConfig+0xe4>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_OC3_SetConfig+0x92>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a16      	ldr	r2, [pc, #88]	; (800649c <TIM_OC3_SetConfig+0xe8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d113      	bne.n	800646e <TIM_OC3_SetConfig+0xba>
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	613b      	str	r3, [r7, #16]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	011b      	lsls	r3, r3, #4
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	605a      	str	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	61da      	str	r2, [r3, #28]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	63da      	str	r2, [r3, #60]	; 0x3c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	621a      	str	r2, [r3, #32]
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	fffeff8f 	.word	0xfffeff8f
 8006498:	40010000 	.word	0x40010000
 800649c:	40010400 	.word	0x40010400

080064a0 <TIM_OC4_SetConfig>:
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	621a      	str	r2, [r3, #32]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	613b      	str	r3, [r7, #16]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <TIM_OC4_SetConfig+0xa4>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	60fb      	str	r3, [r7, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	021b      	lsls	r3, r3, #8
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	031b      	lsls	r3, r3, #12
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a13      	ldr	r2, [pc, #76]	; (8006548 <TIM_OC4_SetConfig+0xa8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_OC4_SetConfig+0x68>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a12      	ldr	r2, [pc, #72]	; (800654c <TIM_OC4_SetConfig+0xac>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d109      	bne.n	800651c <TIM_OC4_SetConfig+0x7c>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	019b      	lsls	r3, r3, #6
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	61da      	str	r2, [r3, #28]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	641a      	str	r2, [r3, #64]	; 0x40
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	621a      	str	r2, [r3, #32]
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	feff8fff 	.word	0xfeff8fff
 8006548:	40010000 	.word	0x40010000
 800654c:	40010400 	.word	0x40010400

08006550 <TIM_OC5_SetConfig>:
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	617b      	str	r3, [r7, #20]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fa      	ldr	r2, [r7, #12]
 800657a:	4b1b      	ldr	r3, [pc, #108]	; (80065e8 <TIM_OC5_SetConfig+0x98>)
 800657c:	4013      	ands	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a12      	ldr	r2, [pc, #72]	; (80065ec <TIM_OC5_SetConfig+0x9c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d003      	beq.n	80065ae <TIM_OC5_SetConfig+0x5e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a11      	ldr	r2, [pc, #68]	; (80065f0 <TIM_OC5_SetConfig+0xa0>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d109      	bne.n	80065c2 <TIM_OC5_SetConfig+0x72>
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b4:	617b      	str	r3, [r7, #20]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	659a      	str	r2, [r3, #88]	; 0x58
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	621a      	str	r2, [r3, #32]
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	fffeff8f 	.word	0xfffeff8f
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40010400 	.word	0x40010400

080065f4 <TIM_OC6_SetConfig>:
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <TIM_OC6_SetConfig+0x9c>)
 8006620:	4013      	ands	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	051b      	lsls	r3, r3, #20
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a13      	ldr	r2, [pc, #76]	; (8006694 <TIM_OC6_SetConfig+0xa0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d003      	beq.n	8006654 <TIM_OC6_SetConfig+0x60>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a12      	ldr	r2, [pc, #72]	; (8006698 <TIM_OC6_SetConfig+0xa4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d109      	bne.n	8006668 <TIM_OC6_SetConfig+0x74>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	029b      	lsls	r3, r3, #10
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	605a      	str	r2, [r3, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	655a      	str	r2, [r3, #84]	; 0x54
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	65da      	str	r2, [r3, #92]	; 0x5c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	621a      	str	r2, [r3, #32]
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	feff8fff 	.word	0xfeff8fff
 8006694:	40010000 	.word	0x40010000
 8006698:	40010400 	.word	0x40010400

0800669c <TIM_TI1_SetConfig>:
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0201 	bic.w	r2, r3, #1
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	621a      	str	r2, [r3, #32]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4a28      	ldr	r2, [pc, #160]	; (8006768 <TIM_TI1_SetConfig+0xcc>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01b      	beq.n	8006702 <TIM_TI1_SetConfig+0x66>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d0:	d017      	beq.n	8006702 <TIM_TI1_SetConfig+0x66>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4a25      	ldr	r2, [pc, #148]	; (800676c <TIM_TI1_SetConfig+0xd0>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <TIM_TI1_SetConfig+0x66>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	4a24      	ldr	r2, [pc, #144]	; (8006770 <TIM_TI1_SetConfig+0xd4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00f      	beq.n	8006702 <TIM_TI1_SetConfig+0x66>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	4a23      	ldr	r2, [pc, #140]	; (8006774 <TIM_TI1_SetConfig+0xd8>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00b      	beq.n	8006702 <TIM_TI1_SetConfig+0x66>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a22      	ldr	r2, [pc, #136]	; (8006778 <TIM_TI1_SetConfig+0xdc>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d007      	beq.n	8006702 <TIM_TI1_SetConfig+0x66>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a21      	ldr	r2, [pc, #132]	; (800677c <TIM_TI1_SetConfig+0xe0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_TI1_SetConfig+0x66>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4a20      	ldr	r2, [pc, #128]	; (8006780 <TIM_TI1_SetConfig+0xe4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d101      	bne.n	8006706 <TIM_TI1_SetConfig+0x6a>
 8006702:	2301      	movs	r3, #1
 8006704:	e000      	b.n	8006708 <TIM_TI1_SetConfig+0x6c>
 8006706:	2300      	movs	r3, #0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d008      	beq.n	800671e <TIM_TI1_SetConfig+0x82>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
 800671c:	e003      	b.n	8006726 <TIM_TI1_SetConfig+0x8a>
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f043 0301 	orr.w	r3, r3, #1
 8006724:	617b      	str	r3, [r7, #20]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	b2db      	uxtb	r3, r3
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	f023 030a 	bic.w	r3, r3, #10
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f003 030a 	and.w	r3, r3, #10
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4313      	orrs	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	619a      	str	r2, [r3, #24]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	621a      	str	r2, [r3, #32]
 800675a:	bf00      	nop
 800675c:	371c      	adds	r7, #28
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40010000 	.word	0x40010000
 800676c:	40000400 	.word	0x40000400
 8006770:	40000800 	.word	0x40000800
 8006774:	40000c00 	.word	0x40000c00
 8006778:	40010400 	.word	0x40010400
 800677c:	40014000 	.word	0x40014000
 8006780:	40001800 	.word	0x40001800

08006784 <TIM_TI1_ConfigInputStage>:
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f023 0201 	bic.w	r2, r3, #1
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	621a      	str	r2, [r3, #32]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f023 030a 	bic.w	r3, r3, #10
 80067c0:	617b      	str	r3, [r7, #20]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	619a      	str	r2, [r3, #24]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	621a      	str	r2, [r3, #32]
 80067d6:	bf00      	nop
 80067d8:	371c      	adds	r7, #28
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <TIM_TI2_SetConfig>:
 80067e2:	b480      	push	{r7}
 80067e4:	b087      	sub	sp, #28
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	f023 0210 	bic.w	r2, r3, #16
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	621a      	str	r2, [r3, #32]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	613b      	str	r3, [r7, #16]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	031b      	lsls	r3, r3, #12
 8006826:	b29b      	uxth	r3, r3
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006834:	613b      	str	r3, [r7, #16]
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	619a      	str	r2, [r3, #24]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	621a      	str	r2, [r3, #32]
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <TIM_TI2_ConfigInputStage>:
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a1b      	ldr	r3, [r3, #32]
 800686c:	f023 0210 	bic.w	r2, r3, #16
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	621a      	str	r2, [r3, #32]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	031b      	lsls	r3, r3, #12
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	619a      	str	r2, [r3, #24]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	621a      	str	r2, [r3, #32]
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <TIM_TI3_SetConfig>:
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	621a      	str	r2, [r3, #32]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	613b      	str	r3, [r7, #16]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 0303 	bic.w	r3, r3, #3
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	61da      	str	r2, [r3, #28]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	621a      	str	r2, [r3, #32]
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <TIM_TI4_SetConfig>:
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	603b      	str	r3, [r7, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	621a      	str	r2, [r3, #32]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006960:	617b      	str	r3, [r7, #20]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	031b      	lsls	r3, r3, #12
 8006978:	b29b      	uxth	r3, r3
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	031b      	lsls	r3, r3, #12
 800698c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	61da      	str	r2, [r3, #28]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	621a      	str	r2, [r3, #32]
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <TIM_ITRx_SetConfig>:
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f043 0307 	orr.w	r3, r3, #7
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	609a      	str	r2, [r3, #8]
 80069d8:	bf00      	nop
 80069da:	3714      	adds	r7, #20
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <TIM_ETR_SetConfig>:
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	021a      	lsls	r2, r3, #8
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	697a      	ldr	r2, [r7, #20]
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	bf00      	nop
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <TIM_CCxChannelCmd>:
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f003 031f 	and.w	r3, r3, #31
 8006a36:	2201      	movs	r2, #1
 8006a38:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1a      	ldr	r2, [r3, #32]
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	43db      	mvns	r3, r3
 8006a46:	401a      	ands	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	621a      	str	r2, [r3, #32]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1a      	ldr	r2, [r3, #32]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	6879      	ldr	r1, [r7, #4]
 8006a58:	fa01 f303 	lsl.w	r3, r1, r3
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	621a      	str	r2, [r3, #32]
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
	...

08006a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d101      	bne.n	8006a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a84:	2302      	movs	r3, #2
 8006a86:	e06d      	b.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a30      	ldr	r2, [pc, #192]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d004      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a2f      	ldr	r2, [pc, #188]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d108      	bne.n	8006ace <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ac2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a20      	ldr	r2, [pc, #128]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d022      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006afa:	d01d      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1d      	ldr	r2, [pc, #116]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d018      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1c      	ldr	r2, [pc, #112]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d013      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a1a      	ldr	r2, [pc, #104]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00e      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d009      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d004      	beq.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a15      	ldr	r2, [pc, #84]	; (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d10c      	bne.n	8006b52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40010400 	.word	0x40010400
 8006b78:	40000400 	.word	0x40000400
 8006b7c:	40000800 	.word	0x40000800
 8006b80:	40000c00 	.word	0x40000c00
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40001800 	.word	0x40001800

08006b8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b96:	2300      	movs	r3, #0
 8006b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d101      	bne.n	8006ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	e065      	b.n	8006c74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	041b      	lsls	r3, r3, #16
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d004      	beq.n	8006c36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a14      	ldr	r2, [pc, #80]	; (8006c84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d115      	bne.n	8006c62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	051b      	lsls	r3, r3, #20
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	40010000 	.word	0x40010000
 8006c84:	40010400 	.word	0x40010400

08006c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_UART_Init>:
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_UART_Init+0x12>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e040      	b.n	8006d58 <HAL_UART_Init+0x94>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d106      	bne.n	8006cec <HAL_UART_Init+0x28>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7fb fc9e 	bl	8002628 <HAL_UART_MspInit>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2224      	movs	r2, #36	; 0x24
 8006cf0:	675a      	str	r2, [r3, #116]	; 0x74
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f98a 	bl	800701c <UART_SetConfig>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Init+0x4e>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e022      	b.n	8006d58 <HAL_UART_Init+0x94>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <HAL_UART_Init+0x5c>
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fc2c 	bl	8007578 <UART_AdvFeatureConfig>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d2e:	605a      	str	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689a      	ldr	r2, [r3, #8]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d3e:	609a      	str	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fcb3 	bl	80076bc <UART_CheckIdleState>
 8006d56:	4603      	mov	r3, r0
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_UART_Transmit>:
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	; 0x28
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	80fb      	strh	r3, [r7, #6]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d74:	2b20      	cmp	r3, #32
 8006d76:	d17f      	bne.n	8006e78 <HAL_UART_Transmit+0x118>
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d002      	beq.n	8006d84 <HAL_UART_Transmit+0x24>
 8006d7e:	88fb      	ldrh	r3, [r7, #6]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_UART_Transmit+0x28>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e078      	b.n	8006e7a <HAL_UART_Transmit+0x11a>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Transmit+0x36>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e071      	b.n	8006e7a <HAL_UART_Transmit+0x11a>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	67da      	str	r2, [r3, #124]	; 0x7c
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2221      	movs	r2, #33	; 0x21
 8006da8:	675a      	str	r2, [r3, #116]	; 0x74
 8006daa:	f7fb fe39 	bl	8002a20 <HAL_GetTick>
 8006dae:	6178      	str	r0, [r7, #20]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	88fa      	ldrh	r2, [r7, #6]
 8006db4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	88fa      	ldrh	r2, [r7, #6]
 8006dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc8:	d108      	bne.n	8006ddc <HAL_UART_Transmit+0x7c>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <HAL_UART_Transmit+0x7c>
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e003      	b.n	8006de4 <HAL_UART_Transmit+0x84>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	61fb      	str	r3, [r7, #28]
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006dec:	e02c      	b.n	8006e48 <HAL_UART_Transmit+0xe8>
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2200      	movs	r2, #0
 8006df6:	2180      	movs	r1, #128	; 0x80
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fca4 	bl	8007746 <UART_WaitOnFlagUntilTimeout>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_UART_Transmit+0xa8>
 8006e04:	2303      	movs	r3, #3
 8006e06:	e038      	b.n	8006e7a <HAL_UART_Transmit+0x11a>
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <HAL_UART_Transmit+0xc6>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	461a      	mov	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	3302      	adds	r3, #2
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	e007      	b.n	8006e36 <HAL_UART_Transmit+0xd6>
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	781a      	ldrb	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	3301      	adds	r3, #1
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1cc      	bne.n	8006dee <HAL_UART_Transmit+0x8e>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2140      	movs	r1, #64	; 0x40
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 fc71 	bl	8007746 <UART_WaitOnFlagUntilTimeout>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <HAL_UART_Transmit+0x10e>
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e005      	b.n	8006e7a <HAL_UART_Transmit+0x11a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2220      	movs	r2, #32
 8006e72:	675a      	str	r2, [r3, #116]	; 0x74
 8006e74:	2300      	movs	r3, #0
 8006e76:	e000      	b.n	8006e7a <HAL_UART_Transmit+0x11a>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <HAL_UART_Receive>:
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b08a      	sub	sp, #40	; 0x28
 8006e86:	af02      	add	r7, sp, #8
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	603b      	str	r3, [r7, #0]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	80fb      	strh	r3, [r7, #6]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	f040 80ba 	bne.w	8007010 <HAL_UART_Receive+0x18e>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d002      	beq.n	8006ea8 <HAL_UART_Receive+0x26>
 8006ea2:	88fb      	ldrh	r3, [r7, #6]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d101      	bne.n	8006eac <HAL_UART_Receive+0x2a>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0b2      	b.n	8007012 <HAL_UART_Receive+0x190>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_UART_Receive+0x38>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e0ab      	b.n	8007012 <HAL_UART_Receive+0x190>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	67da      	str	r2, [r3, #124]	; 0x7c
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2222      	movs	r2, #34	; 0x22
 8006ecc:	679a      	str	r2, [r3, #120]	; 0x78
 8006ece:	f7fb fda7 	bl	8002a20 <HAL_GetTick>
 8006ed2:	6178      	str	r0, [r7, #20]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	88fa      	ldrh	r2, [r7, #6]
 8006ed8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	88fa      	ldrh	r2, [r7, #6]
 8006ee0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eec:	d10e      	bne.n	8006f0c <HAL_UART_Receive+0x8a>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d105      	bne.n	8006f02 <HAL_UART_Receive+0x80>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006efc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f00:	e02d      	b.n	8006f5e <HAL_UART_Receive+0xdc>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	22ff      	movs	r2, #255	; 0xff
 8006f06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f0a:	e028      	b.n	8006f5e <HAL_UART_Receive+0xdc>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10d      	bne.n	8006f30 <HAL_UART_Receive+0xae>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d104      	bne.n	8006f26 <HAL_UART_Receive+0xa4>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	22ff      	movs	r2, #255	; 0xff
 8006f20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f24:	e01b      	b.n	8006f5e <HAL_UART_Receive+0xdc>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	227f      	movs	r2, #127	; 0x7f
 8006f2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f2e:	e016      	b.n	8006f5e <HAL_UART_Receive+0xdc>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f38:	d10d      	bne.n	8006f56 <HAL_UART_Receive+0xd4>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d104      	bne.n	8006f4c <HAL_UART_Receive+0xca>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	227f      	movs	r2, #127	; 0x7f
 8006f46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f4a:	e008      	b.n	8006f5e <HAL_UART_Receive+0xdc>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	223f      	movs	r2, #63	; 0x3f
 8006f50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f54:	e003      	b.n	8006f5e <HAL_UART_Receive+0xdc>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f64:	827b      	strh	r3, [r7, #18]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6e:	d108      	bne.n	8006f82 <HAL_UART_Receive+0x100>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <HAL_UART_Receive+0x100>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	e003      	b.n	8006f8a <HAL_UART_Receive+0x108>
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	61fb      	str	r3, [r7, #28]
 8006f86:	2300      	movs	r3, #0
 8006f88:	61bb      	str	r3, [r7, #24]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8006f92:	e032      	b.n	8006ffa <HAL_UART_Receive+0x178>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2120      	movs	r1, #32
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 fbd1 	bl	8007746 <UART_WaitOnFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d001      	beq.n	8006fae <HAL_UART_Receive+0x12c>
 8006faa:	2303      	movs	r3, #3
 8006fac:	e031      	b.n	8007012 <HAL_UART_Receive+0x190>
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10c      	bne.n	8006fce <HAL_UART_Receive+0x14c>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	8a7b      	ldrh	r3, [r7, #18]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	3302      	adds	r3, #2
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	e00c      	b.n	8006fe8 <HAL_UART_Receive+0x166>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	8a7b      	ldrh	r3, [r7, #18]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	4013      	ands	r3, r2
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1c6      	bne.n	8006f94 <HAL_UART_Receive+0x112>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2220      	movs	r2, #32
 800700a:	679a      	str	r2, [r3, #120]	; 0x78
 800700c:	2300      	movs	r3, #0
 800700e:	e000      	b.n	8007012 <HAL_UART_Receive+0x190>
 8007010:	2302      	movs	r3, #2
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
	...

0800701c <UART_SetConfig>:
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	2300      	movs	r3, #0
 8007026:	61bb      	str	r3, [r7, #24]
 8007028:	2300      	movs	r3, #0
 800702a:	75fb      	strb	r3, [r7, #23]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	431a      	orrs	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4ba6      	ldr	r3, [pc, #664]	; (80072e4 <UART_SetConfig+0x2c8>)
 800704c:	4013      	ands	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	6939      	ldr	r1, [r7, #16]
 8007054:	430b      	orrs	r3, r1
 8007056:	6013      	str	r3, [r2, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	699b      	ldr	r3, [r3, #24]
 8007072:	613b      	str	r3, [r7, #16]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	430a      	orrs	r2, r1
 8007090:	609a      	str	r2, [r3, #8]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a94      	ldr	r2, [pc, #592]	; (80072e8 <UART_SetConfig+0x2cc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d120      	bne.n	80070de <UART_SetConfig+0xc2>
 800709c:	4b93      	ldr	r3, [pc, #588]	; (80072ec <UART_SetConfig+0x2d0>)
 800709e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d816      	bhi.n	80070d8 <UART_SetConfig+0xbc>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <UART_SetConfig+0x94>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070cd 	.word	0x080070cd
 80070b8:	080070c7 	.word	0x080070c7
 80070bc:	080070d3 	.word	0x080070d3
 80070c0:	2301      	movs	r3, #1
 80070c2:	77fb      	strb	r3, [r7, #31]
 80070c4:	e150      	b.n	8007368 <UART_SetConfig+0x34c>
 80070c6:	2302      	movs	r3, #2
 80070c8:	77fb      	strb	r3, [r7, #31]
 80070ca:	e14d      	b.n	8007368 <UART_SetConfig+0x34c>
 80070cc:	2304      	movs	r3, #4
 80070ce:	77fb      	strb	r3, [r7, #31]
 80070d0:	e14a      	b.n	8007368 <UART_SetConfig+0x34c>
 80070d2:	2308      	movs	r3, #8
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e147      	b.n	8007368 <UART_SetConfig+0x34c>
 80070d8:	2310      	movs	r3, #16
 80070da:	77fb      	strb	r3, [r7, #31]
 80070dc:	e144      	b.n	8007368 <UART_SetConfig+0x34c>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a83      	ldr	r2, [pc, #524]	; (80072f0 <UART_SetConfig+0x2d4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d132      	bne.n	800714e <UART_SetConfig+0x132>
 80070e8:	4b80      	ldr	r3, [pc, #512]	; (80072ec <UART_SetConfig+0x2d0>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b0c      	cmp	r3, #12
 80070f4:	d828      	bhi.n	8007148 <UART_SetConfig+0x12c>
 80070f6:	a201      	add	r2, pc, #4	; (adr r2, 80070fc <UART_SetConfig+0xe0>)
 80070f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fc:	08007131 	.word	0x08007131
 8007100:	08007149 	.word	0x08007149
 8007104:	08007149 	.word	0x08007149
 8007108:	08007149 	.word	0x08007149
 800710c:	0800713d 	.word	0x0800713d
 8007110:	08007149 	.word	0x08007149
 8007114:	08007149 	.word	0x08007149
 8007118:	08007149 	.word	0x08007149
 800711c:	08007137 	.word	0x08007137
 8007120:	08007149 	.word	0x08007149
 8007124:	08007149 	.word	0x08007149
 8007128:	08007149 	.word	0x08007149
 800712c:	08007143 	.word	0x08007143
 8007130:	2300      	movs	r3, #0
 8007132:	77fb      	strb	r3, [r7, #31]
 8007134:	e118      	b.n	8007368 <UART_SetConfig+0x34c>
 8007136:	2302      	movs	r3, #2
 8007138:	77fb      	strb	r3, [r7, #31]
 800713a:	e115      	b.n	8007368 <UART_SetConfig+0x34c>
 800713c:	2304      	movs	r3, #4
 800713e:	77fb      	strb	r3, [r7, #31]
 8007140:	e112      	b.n	8007368 <UART_SetConfig+0x34c>
 8007142:	2308      	movs	r3, #8
 8007144:	77fb      	strb	r3, [r7, #31]
 8007146:	e10f      	b.n	8007368 <UART_SetConfig+0x34c>
 8007148:	2310      	movs	r3, #16
 800714a:	77fb      	strb	r3, [r7, #31]
 800714c:	e10c      	b.n	8007368 <UART_SetConfig+0x34c>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a68      	ldr	r2, [pc, #416]	; (80072f4 <UART_SetConfig+0x2d8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d120      	bne.n	800719a <UART_SetConfig+0x17e>
 8007158:	4b64      	ldr	r3, [pc, #400]	; (80072ec <UART_SetConfig+0x2d0>)
 800715a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007162:	2b30      	cmp	r3, #48	; 0x30
 8007164:	d013      	beq.n	800718e <UART_SetConfig+0x172>
 8007166:	2b30      	cmp	r3, #48	; 0x30
 8007168:	d814      	bhi.n	8007194 <UART_SetConfig+0x178>
 800716a:	2b20      	cmp	r3, #32
 800716c:	d009      	beq.n	8007182 <UART_SetConfig+0x166>
 800716e:	2b20      	cmp	r3, #32
 8007170:	d810      	bhi.n	8007194 <UART_SetConfig+0x178>
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <UART_SetConfig+0x160>
 8007176:	2b10      	cmp	r3, #16
 8007178:	d006      	beq.n	8007188 <UART_SetConfig+0x16c>
 800717a:	e00b      	b.n	8007194 <UART_SetConfig+0x178>
 800717c:	2300      	movs	r3, #0
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e0f2      	b.n	8007368 <UART_SetConfig+0x34c>
 8007182:	2302      	movs	r3, #2
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e0ef      	b.n	8007368 <UART_SetConfig+0x34c>
 8007188:	2304      	movs	r3, #4
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e0ec      	b.n	8007368 <UART_SetConfig+0x34c>
 800718e:	2308      	movs	r3, #8
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	e0e9      	b.n	8007368 <UART_SetConfig+0x34c>
 8007194:	2310      	movs	r3, #16
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e0e6      	b.n	8007368 <UART_SetConfig+0x34c>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a56      	ldr	r2, [pc, #344]	; (80072f8 <UART_SetConfig+0x2dc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d120      	bne.n	80071e6 <UART_SetConfig+0x1ca>
 80071a4:	4b51      	ldr	r3, [pc, #324]	; (80072ec <UART_SetConfig+0x2d0>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071ae:	2bc0      	cmp	r3, #192	; 0xc0
 80071b0:	d013      	beq.n	80071da <UART_SetConfig+0x1be>
 80071b2:	2bc0      	cmp	r3, #192	; 0xc0
 80071b4:	d814      	bhi.n	80071e0 <UART_SetConfig+0x1c4>
 80071b6:	2b80      	cmp	r3, #128	; 0x80
 80071b8:	d009      	beq.n	80071ce <UART_SetConfig+0x1b2>
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	d810      	bhi.n	80071e0 <UART_SetConfig+0x1c4>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <UART_SetConfig+0x1ac>
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d006      	beq.n	80071d4 <UART_SetConfig+0x1b8>
 80071c6:	e00b      	b.n	80071e0 <UART_SetConfig+0x1c4>
 80071c8:	2300      	movs	r3, #0
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e0cc      	b.n	8007368 <UART_SetConfig+0x34c>
 80071ce:	2302      	movs	r3, #2
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e0c9      	b.n	8007368 <UART_SetConfig+0x34c>
 80071d4:	2304      	movs	r3, #4
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	e0c6      	b.n	8007368 <UART_SetConfig+0x34c>
 80071da:	2308      	movs	r3, #8
 80071dc:	77fb      	strb	r3, [r7, #31]
 80071de:	e0c3      	b.n	8007368 <UART_SetConfig+0x34c>
 80071e0:	2310      	movs	r3, #16
 80071e2:	77fb      	strb	r3, [r7, #31]
 80071e4:	e0c0      	b.n	8007368 <UART_SetConfig+0x34c>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a44      	ldr	r2, [pc, #272]	; (80072fc <UART_SetConfig+0x2e0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d125      	bne.n	800723c <UART_SetConfig+0x220>
 80071f0:	4b3e      	ldr	r3, [pc, #248]	; (80072ec <UART_SetConfig+0x2d0>)
 80071f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071fe:	d017      	beq.n	8007230 <UART_SetConfig+0x214>
 8007200:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007204:	d817      	bhi.n	8007236 <UART_SetConfig+0x21a>
 8007206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800720a:	d00b      	beq.n	8007224 <UART_SetConfig+0x208>
 800720c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007210:	d811      	bhi.n	8007236 <UART_SetConfig+0x21a>
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <UART_SetConfig+0x202>
 8007216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800721a:	d006      	beq.n	800722a <UART_SetConfig+0x20e>
 800721c:	e00b      	b.n	8007236 <UART_SetConfig+0x21a>
 800721e:	2300      	movs	r3, #0
 8007220:	77fb      	strb	r3, [r7, #31]
 8007222:	e0a1      	b.n	8007368 <UART_SetConfig+0x34c>
 8007224:	2302      	movs	r3, #2
 8007226:	77fb      	strb	r3, [r7, #31]
 8007228:	e09e      	b.n	8007368 <UART_SetConfig+0x34c>
 800722a:	2304      	movs	r3, #4
 800722c:	77fb      	strb	r3, [r7, #31]
 800722e:	e09b      	b.n	8007368 <UART_SetConfig+0x34c>
 8007230:	2308      	movs	r3, #8
 8007232:	77fb      	strb	r3, [r7, #31]
 8007234:	e098      	b.n	8007368 <UART_SetConfig+0x34c>
 8007236:	2310      	movs	r3, #16
 8007238:	77fb      	strb	r3, [r7, #31]
 800723a:	e095      	b.n	8007368 <UART_SetConfig+0x34c>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2f      	ldr	r2, [pc, #188]	; (8007300 <UART_SetConfig+0x2e4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d125      	bne.n	8007292 <UART_SetConfig+0x276>
 8007246:	4b29      	ldr	r3, [pc, #164]	; (80072ec <UART_SetConfig+0x2d0>)
 8007248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800724c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007250:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007254:	d017      	beq.n	8007286 <UART_SetConfig+0x26a>
 8007256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800725a:	d817      	bhi.n	800728c <UART_SetConfig+0x270>
 800725c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007260:	d00b      	beq.n	800727a <UART_SetConfig+0x25e>
 8007262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007266:	d811      	bhi.n	800728c <UART_SetConfig+0x270>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <UART_SetConfig+0x258>
 800726c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007270:	d006      	beq.n	8007280 <UART_SetConfig+0x264>
 8007272:	e00b      	b.n	800728c <UART_SetConfig+0x270>
 8007274:	2301      	movs	r3, #1
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e076      	b.n	8007368 <UART_SetConfig+0x34c>
 800727a:	2302      	movs	r3, #2
 800727c:	77fb      	strb	r3, [r7, #31]
 800727e:	e073      	b.n	8007368 <UART_SetConfig+0x34c>
 8007280:	2304      	movs	r3, #4
 8007282:	77fb      	strb	r3, [r7, #31]
 8007284:	e070      	b.n	8007368 <UART_SetConfig+0x34c>
 8007286:	2308      	movs	r3, #8
 8007288:	77fb      	strb	r3, [r7, #31]
 800728a:	e06d      	b.n	8007368 <UART_SetConfig+0x34c>
 800728c:	2310      	movs	r3, #16
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e06a      	b.n	8007368 <UART_SetConfig+0x34c>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1b      	ldr	r2, [pc, #108]	; (8007304 <UART_SetConfig+0x2e8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d138      	bne.n	800730e <UART_SetConfig+0x2f2>
 800729c:	4b13      	ldr	r3, [pc, #76]	; (80072ec <UART_SetConfig+0x2d0>)
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80072a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072aa:	d017      	beq.n	80072dc <UART_SetConfig+0x2c0>
 80072ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072b0:	d82a      	bhi.n	8007308 <UART_SetConfig+0x2ec>
 80072b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b6:	d00b      	beq.n	80072d0 <UART_SetConfig+0x2b4>
 80072b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072bc:	d824      	bhi.n	8007308 <UART_SetConfig+0x2ec>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <UART_SetConfig+0x2ae>
 80072c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c6:	d006      	beq.n	80072d6 <UART_SetConfig+0x2ba>
 80072c8:	e01e      	b.n	8007308 <UART_SetConfig+0x2ec>
 80072ca:	2300      	movs	r3, #0
 80072cc:	77fb      	strb	r3, [r7, #31]
 80072ce:	e04b      	b.n	8007368 <UART_SetConfig+0x34c>
 80072d0:	2302      	movs	r3, #2
 80072d2:	77fb      	strb	r3, [r7, #31]
 80072d4:	e048      	b.n	8007368 <UART_SetConfig+0x34c>
 80072d6:	2304      	movs	r3, #4
 80072d8:	77fb      	strb	r3, [r7, #31]
 80072da:	e045      	b.n	8007368 <UART_SetConfig+0x34c>
 80072dc:	2308      	movs	r3, #8
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e042      	b.n	8007368 <UART_SetConfig+0x34c>
 80072e2:	bf00      	nop
 80072e4:	efff69f3 	.word	0xefff69f3
 80072e8:	40011000 	.word	0x40011000
 80072ec:	40023800 	.word	0x40023800
 80072f0:	40004400 	.word	0x40004400
 80072f4:	40004800 	.word	0x40004800
 80072f8:	40004c00 	.word	0x40004c00
 80072fc:	40005000 	.word	0x40005000
 8007300:	40011400 	.word	0x40011400
 8007304:	40007800 	.word	0x40007800
 8007308:	2310      	movs	r3, #16
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e02c      	b.n	8007368 <UART_SetConfig+0x34c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a95      	ldr	r2, [pc, #596]	; (8007568 <UART_SetConfig+0x54c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d125      	bne.n	8007364 <UART_SetConfig+0x348>
 8007318:	4b94      	ldr	r3, [pc, #592]	; (800756c <UART_SetConfig+0x550>)
 800731a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800731e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007322:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007326:	d017      	beq.n	8007358 <UART_SetConfig+0x33c>
 8007328:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800732c:	d817      	bhi.n	800735e <UART_SetConfig+0x342>
 800732e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007332:	d00b      	beq.n	800734c <UART_SetConfig+0x330>
 8007334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007338:	d811      	bhi.n	800735e <UART_SetConfig+0x342>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <UART_SetConfig+0x32a>
 800733e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007342:	d006      	beq.n	8007352 <UART_SetConfig+0x336>
 8007344:	e00b      	b.n	800735e <UART_SetConfig+0x342>
 8007346:	2300      	movs	r3, #0
 8007348:	77fb      	strb	r3, [r7, #31]
 800734a:	e00d      	b.n	8007368 <UART_SetConfig+0x34c>
 800734c:	2302      	movs	r3, #2
 800734e:	77fb      	strb	r3, [r7, #31]
 8007350:	e00a      	b.n	8007368 <UART_SetConfig+0x34c>
 8007352:	2304      	movs	r3, #4
 8007354:	77fb      	strb	r3, [r7, #31]
 8007356:	e007      	b.n	8007368 <UART_SetConfig+0x34c>
 8007358:	2308      	movs	r3, #8
 800735a:	77fb      	strb	r3, [r7, #31]
 800735c:	e004      	b.n	8007368 <UART_SetConfig+0x34c>
 800735e:	2310      	movs	r3, #16
 8007360:	77fb      	strb	r3, [r7, #31]
 8007362:	e001      	b.n	8007368 <UART_SetConfig+0x34c>
 8007364:	2310      	movs	r3, #16
 8007366:	77fb      	strb	r3, [r7, #31]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	69db      	ldr	r3, [r3, #28]
 800736c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007370:	f040 8080 	bne.w	8007474 <UART_SetConfig+0x458>
 8007374:	7ffb      	ldrb	r3, [r7, #31]
 8007376:	2b08      	cmp	r3, #8
 8007378:	d85c      	bhi.n	8007434 <UART_SetConfig+0x418>
 800737a:	a201      	add	r2, pc, #4	; (adr r2, 8007380 <UART_SetConfig+0x364>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	080073a5 	.word	0x080073a5
 8007384:	080073c5 	.word	0x080073c5
 8007388:	080073e5 	.word	0x080073e5
 800738c:	08007435 	.word	0x08007435
 8007390:	080073fd 	.word	0x080073fd
 8007394:	08007435 	.word	0x08007435
 8007398:	08007435 	.word	0x08007435
 800739c:	08007435 	.word	0x08007435
 80073a0:	0800741d 	.word	0x0800741d
 80073a4:	f7fd fb62 	bl	8004a6c <HAL_RCC_GetPCLK1Freq>
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	005a      	lsls	r2, r3, #1
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	441a      	add	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	b29b      	uxth	r3, r3
 80073c0:	61bb      	str	r3, [r7, #24]
 80073c2:	e03a      	b.n	800743a <UART_SetConfig+0x41e>
 80073c4:	f7fd fb66 	bl	8004a94 <HAL_RCC_GetPCLK2Freq>
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	005a      	lsls	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	441a      	add	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	b29b      	uxth	r3, r3
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	e02a      	b.n	800743a <UART_SetConfig+0x41e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	085a      	lsrs	r2, r3, #1
 80073ea:	4b61      	ldr	r3, [pc, #388]	; (8007570 <UART_SetConfig+0x554>)
 80073ec:	4413      	add	r3, r2
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6852      	ldr	r2, [r2, #4]
 80073f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	61bb      	str	r3, [r7, #24]
 80073fa:	e01e      	b.n	800743a <UART_SetConfig+0x41e>
 80073fc:	f7fd fa24 	bl	8004848 <HAL_RCC_GetSysClockFreq>
 8007400:	60f8      	str	r0, [r7, #12]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	005a      	lsls	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	441a      	add	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	fbb2 f3f3 	udiv	r3, r2, r3
 8007416:	b29b      	uxth	r3, r3
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	e00e      	b.n	800743a <UART_SetConfig+0x41e>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	085b      	lsrs	r3, r3, #1
 8007422:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	fbb2 f3f3 	udiv	r3, r2, r3
 800742e:	b29b      	uxth	r3, r3
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	e002      	b.n	800743a <UART_SetConfig+0x41e>
 8007434:	2301      	movs	r3, #1
 8007436:	75fb      	strb	r3, [r7, #23]
 8007438:	bf00      	nop
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b0f      	cmp	r3, #15
 800743e:	d916      	bls.n	800746e <UART_SetConfig+0x452>
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007446:	d212      	bcs.n	800746e <UART_SetConfig+0x452>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	b29b      	uxth	r3, r3
 800744c:	f023 030f 	bic.w	r3, r3, #15
 8007450:	817b      	strh	r3, [r7, #10]
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	085b      	lsrs	r3, r3, #1
 8007456:	b29b      	uxth	r3, r3
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	b29a      	uxth	r2, r3
 800745e:	897b      	ldrh	r3, [r7, #10]
 8007460:	4313      	orrs	r3, r2
 8007462:	817b      	strh	r3, [r7, #10]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	897a      	ldrh	r2, [r7, #10]
 800746a:	60da      	str	r2, [r3, #12]
 800746c:	e070      	b.n	8007550 <UART_SetConfig+0x534>
 800746e:	2301      	movs	r3, #1
 8007470:	75fb      	strb	r3, [r7, #23]
 8007472:	e06d      	b.n	8007550 <UART_SetConfig+0x534>
 8007474:	7ffb      	ldrb	r3, [r7, #31]
 8007476:	2b08      	cmp	r3, #8
 8007478:	d859      	bhi.n	800752e <UART_SetConfig+0x512>
 800747a:	a201      	add	r2, pc, #4	; (adr r2, 8007480 <UART_SetConfig+0x464>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074a5 	.word	0x080074a5
 8007484:	080074c3 	.word	0x080074c3
 8007488:	080074e1 	.word	0x080074e1
 800748c:	0800752f 	.word	0x0800752f
 8007490:	080074f9 	.word	0x080074f9
 8007494:	0800752f 	.word	0x0800752f
 8007498:	0800752f 	.word	0x0800752f
 800749c:	0800752f 	.word	0x0800752f
 80074a0:	08007517 	.word	0x08007517
 80074a4:	f7fd fae2 	bl	8004a6c <HAL_RCC_GetPCLK1Freq>
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	085a      	lsrs	r2, r3, #1
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	441a      	add	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074bc:	b29b      	uxth	r3, r3
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	e038      	b.n	8007534 <UART_SetConfig+0x518>
 80074c2:	f7fd fae7 	bl	8004a94 <HAL_RCC_GetPCLK2Freq>
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	085a      	lsrs	r2, r3, #1
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	441a      	add	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074da:	b29b      	uxth	r3, r3
 80074dc:	61bb      	str	r3, [r7, #24]
 80074de:	e029      	b.n	8007534 <UART_SetConfig+0x518>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	085a      	lsrs	r2, r3, #1
 80074e6:	4b23      	ldr	r3, [pc, #140]	; (8007574 <UART_SetConfig+0x558>)
 80074e8:	4413      	add	r3, r2
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	6852      	ldr	r2, [r2, #4]
 80074ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	e01d      	b.n	8007534 <UART_SetConfig+0x518>
 80074f8:	f7fd f9a6 	bl	8004848 <HAL_RCC_GetSysClockFreq>
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	085a      	lsrs	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	441a      	add	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007510:	b29b      	uxth	r3, r3
 8007512:	61bb      	str	r3, [r7, #24]
 8007514:	e00e      	b.n	8007534 <UART_SetConfig+0x518>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	fbb2 f3f3 	udiv	r3, r2, r3
 8007528:	b29b      	uxth	r3, r3
 800752a:	61bb      	str	r3, [r7, #24]
 800752c:	e002      	b.n	8007534 <UART_SetConfig+0x518>
 800752e:	2301      	movs	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
 8007532:	bf00      	nop
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b0f      	cmp	r3, #15
 8007538:	d908      	bls.n	800754c <UART_SetConfig+0x530>
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007540:	d204      	bcs.n	800754c <UART_SetConfig+0x530>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	60da      	str	r2, [r3, #12]
 800754a:	e001      	b.n	8007550 <UART_SetConfig+0x534>
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	661a      	str	r2, [r3, #96]	; 0x60
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	665a      	str	r2, [r3, #100]	; 0x64
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40007c00 	.word	0x40007c00
 800756c:	40023800 	.word	0x40023800
 8007570:	01e84800 	.word	0x01e84800
 8007574:	00f42400 	.word	0x00f42400

08007578 <UART_AdvFeatureConfig>:
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <UART_AdvFeatureConfig+0x2a>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <UART_AdvFeatureConfig+0x4c>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <UART_AdvFeatureConfig+0x6e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	f003 0308 	and.w	r3, r3, #8
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0x90>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <UART_AdvFeatureConfig+0xb2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	609a      	str	r2, [r3, #8]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <UART_AdvFeatureConfig+0xd4>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	609a      	str	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01a      	beq.n	800768e <UART_AdvFeatureConfig+0x116>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007676:	d10a      	bne.n	800768e <UART_AdvFeatureConfig+0x116>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0x138>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <UART_CheckIdleState>:
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	67da      	str	r2, [r3, #124]	; 0x7c
 80076ca:	f7fb f9a9 	bl	8002a20 <HAL_GetTick>
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b08      	cmp	r3, #8
 80076dc:	d10e      	bne.n	80076fc <UART_CheckIdleState+0x40>
 80076de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f82a 	bl	8007746 <UART_WaitOnFlagUntilTimeout>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <UART_CheckIdleState+0x40>
 80076f8:	2303      	movs	r3, #3
 80076fa:	e020      	b.n	800773e <UART_CheckIdleState+0x82>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b04      	cmp	r3, #4
 8007708:	d10e      	bne.n	8007728 <UART_CheckIdleState+0x6c>
 800770a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f814 	bl	8007746 <UART_WaitOnFlagUntilTimeout>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <UART_CheckIdleState+0x6c>
 8007724:	2303      	movs	r3, #3
 8007726:	e00a      	b.n	800773e <UART_CheckIdleState+0x82>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	675a      	str	r2, [r3, #116]	; 0x74
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2220      	movs	r2, #32
 8007732:	679a      	str	r2, [r3, #120]	; 0x78
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800773c:	2300      	movs	r3, #0
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <UART_WaitOnFlagUntilTimeout>:
 8007746:	b580      	push	{r7, lr}
 8007748:	b084      	sub	sp, #16
 800774a:	af00      	add	r7, sp, #0
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	60b9      	str	r1, [r7, #8]
 8007750:	603b      	str	r3, [r7, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	71fb      	strb	r3, [r7, #7]
 8007756:	e05d      	b.n	8007814 <UART_WaitOnFlagUntilTimeout+0xce>
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775e:	d059      	beq.n	8007814 <UART_WaitOnFlagUntilTimeout+0xce>
 8007760:	f7fb f95e 	bl	8002a20 <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	429a      	cmp	r2, r3
 800776e:	d302      	bcc.n	8007776 <UART_WaitOnFlagUntilTimeout+0x30>
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d11b      	bne.n	80077ae <UART_WaitOnFlagUntilTimeout+0x68>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 0201 	bic.w	r2, r2, #1
 8007794:	609a      	str	r2, [r3, #8]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	675a      	str	r2, [r3, #116]	; 0x74
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2220      	movs	r2, #32
 80077a0:	679a      	str	r2, [r3, #120]	; 0x78
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80077aa:	2303      	movs	r3, #3
 80077ac:	e042      	b.n	8007834 <UART_WaitOnFlagUntilTimeout+0xee>
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d02b      	beq.n	8007814 <UART_WaitOnFlagUntilTimeout+0xce>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077ca:	d123      	bne.n	8007814 <UART_WaitOnFlagUntilTimeout+0xce>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077d4:	621a      	str	r2, [r3, #32]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0201 	bic.w	r2, r2, #1
 80077f4:	609a      	str	r2, [r3, #8]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	675a      	str	r2, [r3, #116]	; 0x74
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2220      	movs	r2, #32
 8007800:	679a      	str	r2, [r3, #120]	; 0x78
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2220      	movs	r2, #32
 8007806:	67da      	str	r2, [r3, #124]	; 0x7c
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8007810:	2303      	movs	r3, #3
 8007812:	e00f      	b.n	8007834 <UART_WaitOnFlagUntilTimeout+0xee>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69da      	ldr	r2, [r3, #28]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	4013      	ands	r3, r2
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	bf0c      	ite	eq
 8007824:	2301      	moveq	r3, #1
 8007826:	2300      	movne	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	461a      	mov	r2, r3
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	429a      	cmp	r2, r3
 8007830:	d092      	beq.n	8007758 <UART_WaitOnFlagUntilTimeout+0x12>
 8007832:	2300      	movs	r3, #0
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <__libc_init_array>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	4e0d      	ldr	r6, [pc, #52]	; (8007874 <__libc_init_array+0x38>)
 8007840:	4c0d      	ldr	r4, [pc, #52]	; (8007878 <__libc_init_array+0x3c>)
 8007842:	1ba4      	subs	r4, r4, r6
 8007844:	10a4      	asrs	r4, r4, #2
 8007846:	2500      	movs	r5, #0
 8007848:	42a5      	cmp	r5, r4
 800784a:	d109      	bne.n	8007860 <__libc_init_array+0x24>
 800784c:	4e0b      	ldr	r6, [pc, #44]	; (800787c <__libc_init_array+0x40>)
 800784e:	4c0c      	ldr	r4, [pc, #48]	; (8007880 <__libc_init_array+0x44>)
 8007850:	f000 f82c 	bl	80078ac <_init>
 8007854:	1ba4      	subs	r4, r4, r6
 8007856:	10a4      	asrs	r4, r4, #2
 8007858:	2500      	movs	r5, #0
 800785a:	42a5      	cmp	r5, r4
 800785c:	d105      	bne.n	800786a <__libc_init_array+0x2e>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007864:	4798      	blx	r3
 8007866:	3501      	adds	r5, #1
 8007868:	e7ee      	b.n	8007848 <__libc_init_array+0xc>
 800786a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800786e:	4798      	blx	r3
 8007870:	3501      	adds	r5, #1
 8007872:	e7f2      	b.n	800785a <__libc_init_array+0x1e>
 8007874:	080078e4 	.word	0x080078e4
 8007878:	080078e4 	.word	0x080078e4
 800787c:	080078e4 	.word	0x080078e4
 8007880:	080078e8 	.word	0x080078e8

08007884 <memcpy>:
 8007884:	b510      	push	{r4, lr}
 8007886:	1e43      	subs	r3, r0, #1
 8007888:	440a      	add	r2, r1
 800788a:	4291      	cmp	r1, r2
 800788c:	d100      	bne.n	8007890 <memcpy+0xc>
 800788e:	bd10      	pop	{r4, pc}
 8007890:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007894:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007898:	e7f7      	b.n	800788a <memcpy+0x6>

0800789a <memset>:
 800789a:	4402      	add	r2, r0
 800789c:	4603      	mov	r3, r0
 800789e:	4293      	cmp	r3, r2
 80078a0:	d100      	bne.n	80078a4 <memset+0xa>
 80078a2:	4770      	bx	lr
 80078a4:	f803 1b01 	strb.w	r1, [r3], #1
 80078a8:	e7f9      	b.n	800789e <memset+0x4>
	...

080078ac <_init>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	bf00      	nop
 80078b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078b2:	bc08      	pop	{r3}
 80078b4:	469e      	mov	lr, r3
 80078b6:	4770      	bx	lr

080078b8 <_fini>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	bf00      	nop
 80078bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	469e      	mov	lr, r3
 80078c2:	4770      	bx	lr
