
LAB4_OS_Line_following.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aff4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800b1f4  0800b1f4  0001b1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b324  0800b324  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b324  0800b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b32c  0800b32c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800b334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000504c  2000002c  0800b360  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005078  0800b360  00025078  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021971  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b69  00000000  00000000  000419cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b40  00000000  00000000  00045538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001978  00000000  00000000  00047078  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b04d  00000000  00000000  000489f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017e55  00000000  00000000  00073a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e8d3  00000000  00000000  0008b892  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019a165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007328  00000000  00000000  0019a1e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000002c 	.word	0x2000002c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b1dc 	.word	0x0800b1dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000030 	.word	0x20000030
 800023c:	0800b1dc 	.word	0x0800b1dc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <cobsEncode>:

/*	COBS encoding routine  */
#define FinishBlock(X) (*code_ptr = (X), code_ptr = dst++, code = 0x01)

void cobsEncode(const uint8_t *ptr, int length, uint8_t *dst)
{
 8000540:	b480      	push	{r7}
 8000542:	b089      	sub	sp, #36	; 0x24
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
    const uint8_t *end = ptr + length;
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	4413      	add	r3, r2
 8000552:	617b      	str	r3, [r7, #20]
    uint8_t *code_ptr = dst++;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	607a      	str	r2, [r7, #4]
 800055a:	61fb      	str	r3, [r7, #28]
    uint8_t code = 0x01;
 800055c:	2301      	movs	r3, #1
 800055e:	76fb      	strb	r3, [r7, #27]
    
    while (ptr < end)
 8000560:	e025      	b.n	80005ae <cobsEncode+0x6e>
    {
        if (*ptr == 0)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d109      	bne.n	800057e <cobsEncode+0x3e>
            FinishBlock(code);
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	7efa      	ldrb	r2, [r7, #27]
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	1c5a      	adds	r2, r3, #1
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	61fb      	str	r3, [r7, #28]
 8000578:	2301      	movs	r3, #1
 800057a:	76fb      	strb	r3, [r7, #27]
 800057c:	e014      	b.n	80005a8 <cobsEncode+0x68>
        else
        {
            *dst++ = *ptr;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	1c5a      	adds	r2, r3, #1
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	701a      	strb	r2, [r3, #0]
            if (++code == 0xFF)
 800058a:	7efb      	ldrb	r3, [r7, #27]
 800058c:	3301      	adds	r3, #1
 800058e:	76fb      	strb	r3, [r7, #27]
 8000590:	7efb      	ldrb	r3, [r7, #27]
 8000592:	2bff      	cmp	r3, #255	; 0xff
 8000594:	d108      	bne.n	80005a8 <cobsEncode+0x68>
                FinishBlock(code);
 8000596:	69fb      	ldr	r3, [r7, #28]
 8000598:	7efa      	ldrb	r2, [r7, #27]
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	607a      	str	r2, [r7, #4]
 80005a2:	61fb      	str	r3, [r7, #28]
 80005a4:	2301      	movs	r3, #1
 80005a6:	76fb      	strb	r3, [r7, #27]
        }
        ptr++;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3301      	adds	r3, #1
 80005ac:	60fb      	str	r3, [r7, #12]
    while (ptr < end)
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d3d5      	bcc.n	8000562 <cobsEncode+0x22>
    }
    
    FinishBlock(code);
 80005b6:	69fb      	ldr	r3, [r7, #28]
 80005b8:	7efa      	ldrb	r2, [r7, #27]
 80005ba:	701a      	strb	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	61fb      	str	r3, [r7, #28]
 80005c4:	2301      	movs	r3, #1
 80005c6:	76fb      	strb	r3, [r7, #27]
}
 80005c8:	bf00      	nop
 80005ca:	3724      	adds	r7, #36	; 0x24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <ertc_dlog_send>:
#ifdef STM32F767xx
#include "stm32f7xx_hal_uart.h"
#endif

int ertc_dlog_send(struct ertc_dlog *logger, void *data, int size)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	if (logger->tx_enable) {
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d01c      	beq.n	8000622 <ertc_dlog_send+0x4e>
		cobsEncode((uint8_t *)data, size, logger->txbuff);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3321      	adds	r3, #33	; 0x21
 80005ec:	461a      	mov	r2, r3
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	68b8      	ldr	r0, [r7, #8]
 80005f2:	f7ff ffa5 	bl	8000540 <cobsEncode>

		/* Add null terminator */
		logger->txbuff[size + 1] = 0x00;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3301      	adds	r3, #1
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	4413      	add	r3, r2
 80005fe:	2200      	movs	r2, #0
 8000600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		/*	Send data packet */
		return HAL_UART_Transmit(&logger->uart_handle, (uint8_t *)logger->txbuff, size + 2, HAL_TIMEOUT);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	b29b      	uxth	r3, r3
 8000614:	3302      	adds	r3, #2
 8000616:	b29a      	uxth	r2, r3
 8000618:	2303      	movs	r3, #3
 800061a:	f006 fb6f 	bl	8006cfc <HAL_UART_Transmit>
 800061e:	4603      	mov	r3, r0
 8000620:	e000      	b.n	8000624 <ertc_dlog_send+0x50>
	}

	return 0;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <ertc_dlog_update>:

int ertc_dlog_update(struct ertc_dlog *logger)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	if (HAL_UART_Receive(&logger->uart_handle, (uint8_t *)logger->rxbuff, 1, HAL_TIMEOUT) == HAL_OK) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	1c59      	adds	r1, r3, #1
 800063e:	2303      	movs	r3, #3
 8000640:	2201      	movs	r2, #1
 8000642:	f006 fbec 	bl	8006e1e <HAL_UART_Receive>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d112      	bne.n	8000672 <ertc_dlog_update+0x46>
		switch (logger->rxbuff[0]) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	785b      	ldrb	r3, [r3, #1]
 8000650:	2b41      	cmp	r3, #65	; 0x41
 8000652:	d002      	beq.n	800065a <ertc_dlog_update+0x2e>
 8000654:	2b42      	cmp	r3, #66	; 0x42
 8000656:	d004      	beq.n	8000662 <ertc_dlog_update+0x36>
 8000658:	e007      	b.n	800066a <ertc_dlog_update+0x3e>
			case TX_START_CMD:
				logger->tx_enable = true;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
				break;
 8000660:	e008      	b.n	8000674 <ertc_dlog_update+0x48>
			case TX_STOP_CMD:
				logger->tx_enable = false;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
				break;
 8000668:	e004      	b.n	8000674 <ertc_dlog_update+0x48>
			default:
				logger->tx_enable = false;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e000      	b.n	8000674 <ertc_dlog_update+0x48>
		}
	}
 8000672:	bf00      	nop
	return 0;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <uint8_to_bin_digit>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uint8_to_bin_digit(uint8_t in, uint8_t *out)
{
 800067e:	b480      	push	{r7}
 8000680:	b085      	sub	sp, #20
 8000682:	af00      	add	r7, sp, #0
 8000684:	4603      	mov	r3, r0
 8000686:	6039      	str	r1, [r7, #0]
 8000688:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
 800068e:	e00e      	b.n	80006ae <uint8_to_bin_digit+0x30>
    {
        out[i] = (in & (1 << i)) ? 1 : 0;
 8000690:	79fa      	ldrb	r2, [r7, #7]
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	fa42 f303 	asr.w	r3, r2, r3
 8000698:	b2da      	uxtb	r2, r3
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	6839      	ldr	r1, [r7, #0]
 800069e:	440b      	add	r3, r1
 80006a0:	f002 0201 	and.w	r2, r2, #1
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++)
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	3301      	adds	r3, #1
 80006ac:	73fb      	strb	r3, [r7, #15]
 80006ae:	7bfb      	ldrb	r3, [r7, #15]
 80006b0:	2b07      	cmp	r3, #7
 80006b2:	d9ed      	bls.n	8000690 <uint8_to_bin_digit+0x12>
    }
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f002 f9a5 	bl	8002a14 <HAL_Init>
  logger.uart_handle = huart2; // for wifi
 80006ca:	4b8e      	ldr	r3, [pc, #568]	; (8000904 <main+0x244>)
 80006cc:	4a8e      	ldr	r2, [pc, #568]	; (8000908 <main+0x248>)
 80006ce:	3344      	adds	r3, #68	; 0x44
 80006d0:	4611      	mov	r1, r2
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00a fd6d 	bl	800b1b4 <memcpy>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f94b 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 ff97 	bl	8001610 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006e2:	f000 ff65 	bl	80015b0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80006e6:	f000 f9e3 	bl	8000ab0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80006ea:	f000 fa33 	bl	8000b54 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006ee:	f000 fa71 	bl	8000bd4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80006f2:	f000 faaf 	bl	8000c54 <MX_SPI1_Init>
  MX_TIM1_Init();
 80006f6:	f000 faeb 	bl	8000cd0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006fa:	f000 fbb9 	bl	8000e70 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006fe:	f000 fc51 	bl	8000fa4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000702:	f000 fca5 	bl	8001050 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000706:	f000 fcf9 	bl	80010fc <MX_TIM5_Init>
  MX_TIM8_Init();
 800070a:	f000 fd6f 	bl	80011ec <MX_TIM8_Init>
  MX_UART4_Init();
 800070e:	f000 fe8f 	bl	8001430 <MX_UART4_Init>
  MX_UART5_Init();
 8000712:	f000 febd 	bl	8001490 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000716:	f000 feeb 	bl	80014f0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800071a:	f000 ff19 	bl	8001550 <MX_USART2_UART_Init>
  MX_TIM9_Init();
 800071e:	f000 fe37 	bl	8001390 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  /* Disable LCD SPI SS */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2110      	movs	r1, #16
 8000726:	4879      	ldr	r0, [pc, #484]	; (800090c <main+0x24c>)
 8000728:	f002 fee0 	bl	80034ec <HAL_GPIO_WritePin>

  /* SX1509 (1) - Software reset */
  uint8_t data = 0x12;
 800072c:	2312      	movs	r3, #18
 800072e:	71fb      	strb	r3, [r7, #7]

  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000730:	23c8      	movs	r3, #200	; 0xc8
 8000732:	9302      	str	r3, [sp, #8]
 8000734:	2301      	movs	r3, #1
 8000736:	9301      	str	r3, [sp, #4]
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	227d      	movs	r2, #125	; 0x7d
 8000740:	217c      	movs	r1, #124	; 0x7c
 8000742:	4873      	ldr	r0, [pc, #460]	; (8000910 <main+0x250>)
 8000744:	f002 ff7c 	bl	8003640 <HAL_I2C_Mem_Write>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b71      	ldr	r3, [pc, #452]	; (8000914 <main+0x254>)
 800074e:	701a      	strb	r2, [r3, #0]
  if (status != HAL_OK)
 8000750:	4b70      	ldr	r3, [pc, #448]	; (8000914 <main+0x254>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d003      	beq.n	8000760 <main+0xa0>
	  error = 1;
 8000758:	4b6f      	ldr	r3, [pc, #444]	; (8000918 <main+0x258>)
 800075a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800075e:	601a      	str	r2, [r3, #0]
  data = 0x34;
 8000760:	2334      	movs	r3, #52	; 0x34
 8000762:	71fb      	strb	r3, [r7, #7]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_RESET, 1, &data, 1, I2C_TIMEOUT);
 8000764:	23c8      	movs	r3, #200	; 0xc8
 8000766:	9302      	str	r3, [sp, #8]
 8000768:	2301      	movs	r3, #1
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2301      	movs	r3, #1
 8000772:	227d      	movs	r2, #125	; 0x7d
 8000774:	217c      	movs	r1, #124	; 0x7c
 8000776:	4866      	ldr	r0, [pc, #408]	; (8000910 <main+0x250>)
 8000778:	f002 ff62 	bl	8003640 <HAL_I2C_Mem_Write>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4b64      	ldr	r3, [pc, #400]	; (8000914 <main+0x254>)
 8000782:	701a      	strb	r2, [r3, #0]
  if (status != HAL_OK)
 8000784:	4b63      	ldr	r3, [pc, #396]	; (8000914 <main+0x254>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d003      	beq.n	8000794 <main+0xd4>
	  error = 2;
 800078c:	4b62      	ldr	r3, [pc, #392]	; (8000918 <main+0x258>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000792:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 8000794:	2064      	movs	r0, #100	; 0x64
 8000796:	f002 f973 	bl	8002a80 <HAL_Delay>

  /* SX1509 (1) - Set RegDirA to 0xFF (all IO of Bank A configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 800079a:	23ff      	movs	r3, #255	; 0xff
 800079c:	71fb      	strb	r3, [r7, #7]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_A, 1, &data, 1, I2C_TIMEOUT);
 800079e:	23c8      	movs	r3, #200	; 0xc8
 80007a0:	9302      	str	r3, [sp, #8]
 80007a2:	2301      	movs	r3, #1
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	220f      	movs	r2, #15
 80007ae:	217c      	movs	r1, #124	; 0x7c
 80007b0:	4857      	ldr	r0, [pc, #348]	; (8000910 <main+0x250>)
 80007b2:	f002 ff45 	bl	8003640 <HAL_I2C_Mem_Write>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b56      	ldr	r3, [pc, #344]	; (8000914 <main+0x254>)
 80007bc:	701a      	strb	r2, [r3, #0]
  if (status != HAL_OK)
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <main+0x254>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <main+0x10c>
	  error = 3;
 80007c6:	4b54      	ldr	r3, [pc, #336]	; (8000918 <main+0x258>)
 80007c8:	4a54      	ldr	r2, [pc, #336]	; (800091c <main+0x25c>)
 80007ca:	601a      	str	r2, [r3, #0]
  /* SX1509 (1) - Set RegDirB to 0xFF (all IO of Bank B configured as inputs) */
  data = 0xFF; // 0 = out; 1 = in
 80007cc:	23ff      	movs	r3, #255	; 0xff
 80007ce:	71fb      	strb	r3, [r7, #7]
  status = HAL_I2C_Mem_Write(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DIR_B, 1, &data, 1, I2C_TIMEOUT);
 80007d0:	23c8      	movs	r3, #200	; 0xc8
 80007d2:	9302      	str	r3, [sp, #8]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	2301      	movs	r3, #1
 80007de:	220e      	movs	r2, #14
 80007e0:	217c      	movs	r1, #124	; 0x7c
 80007e2:	484b      	ldr	r0, [pc, #300]	; (8000910 <main+0x250>)
 80007e4:	f002 ff2c 	bl	8003640 <HAL_I2C_Mem_Write>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b49      	ldr	r3, [pc, #292]	; (8000914 <main+0x254>)
 80007ee:	701a      	strb	r2, [r3, #0]
  if (status != HAL_OK)
 80007f0:	4b48      	ldr	r3, [pc, #288]	; (8000914 <main+0x254>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d003      	beq.n	8000800 <main+0x140>
	  error = 4;
 80007f8:	4b47      	ldr	r3, [pc, #284]	; (8000918 <main+0x258>)
 80007fa:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80007fe:	601a      	str	r2, [r3, #0]
  HAL_Delay(100);
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f002 f93d 	bl	8002a80 <HAL_Delay>

  /* Set data logger communication type */
//  logger.uart_handle = huart3; // for serial
  logger.uart_handle = huart2; // for WiFi
 8000806:	4b3f      	ldr	r3, [pc, #252]	; (8000904 <main+0x244>)
 8000808:	4a3f      	ldr	r2, [pc, #252]	; (8000908 <main+0x248>)
 800080a:	3344      	adds	r3, #68	; 0x44
 800080c:	4611      	mov	r1, r2
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	4618      	mov	r0, r3
 8000812:	f00a fccf 	bl	800b1b4 <memcpy>

  /* Reset LCD */
  HAL_GPIO_WritePin(GPIO_OUT_SPI_CS_LCD_GPIO_Port, GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2110      	movs	r1, #16
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <main+0x24c>)
 800081c:	f002 fe66 	bl	80034ec <HAL_GPIO_WritePin>

  HAL_Delay(1000);
 8000820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000824:	f002 f92c 	bl	8002a80 <HAL_Delay>

  /* Start encoders timers */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000828:	213c      	movs	r1, #60	; 0x3c
 800082a:	483d      	ldr	r0, [pc, #244]	; (8000920 <main+0x260>)
 800082c:	f004 ff9c 	bl	8005768 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000830:	213c      	movs	r1, #60	; 0x3c
 8000832:	483c      	ldr	r0, [pc, #240]	; (8000924 <main+0x264>)
 8000834:	f004 ff98 	bl	8005768 <HAL_TIM_Encoder_Start>

  /* Start servomotors PWM (avoid floating inputs to servomotors) */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000838:	2100      	movs	r1, #0
 800083a:	483b      	ldr	r0, [pc, #236]	; (8000928 <main+0x268>)
 800083c:	f004 fe88 	bl	8005550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000840:	2104      	movs	r1, #4
 8000842:	4839      	ldr	r0, [pc, #228]	; (8000928 <main+0x268>)
 8000844:	f004 fe84 	bl	8005550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000848:	2108      	movs	r1, #8
 800084a:	4837      	ldr	r0, [pc, #220]	; (8000928 <main+0x268>)
 800084c:	f004 fe80 	bl	8005550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000850:	210c      	movs	r1, #12
 8000852:	4835      	ldr	r0, [pc, #212]	; (8000928 <main+0x268>)
 8000854:	f004 fe7c 	bl	8005550 <HAL_TIM_PWM_Start>

  /* Start motor PWM */

  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 0);
 8000858:	4b34      	ldr	r3, [pc, #208]	; (800092c <main+0x26c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2200      	movs	r2, #0
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, 0);
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <main+0x26c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, 0);
 8000868:	4b30      	ldr	r3, [pc, #192]	; (800092c <main+0x26c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <main+0x26c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2200      	movs	r2, #0
 8000876:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000878:	2100      	movs	r1, #0
 800087a:	482c      	ldr	r0, [pc, #176]	; (800092c <main+0x26c>)
 800087c:	f004 fe68 	bl	8005550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000880:	2104      	movs	r1, #4
 8000882:	482a      	ldr	r0, [pc, #168]	; (800092c <main+0x26c>)
 8000884:	f004 fe64 	bl	8005550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000888:	2108      	movs	r1, #8
 800088a:	4828      	ldr	r0, [pc, #160]	; (800092c <main+0x26c>)
 800088c:	f004 fe60 	bl	8005550 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000890:	210c      	movs	r1, #12
 8000892:	4826      	ldr	r0, [pc, #152]	; (800092c <main+0x26c>)
 8000894:	f004 fe5c 	bl	8005550 <HAL_TIM_PWM_Start>

  done = 1;
 8000898:	4b25      	ldr	r3, [pc, #148]	; (8000930 <main+0x270>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800089e:	f006 ff9f 	bl	80077e0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of DataMutex */
  DataMutexHandle = osMutexNew(&DataMutex_attributes);
 80008a2:	4824      	ldr	r0, [pc, #144]	; (8000934 <main+0x274>)
 80008a4:	f007 f91a 	bl	8007adc <osMutexNew>
 80008a8:	4602      	mov	r2, r0
 80008aa:	4b23      	ldr	r3, [pc, #140]	; (8000938 <main+0x278>)
 80008ac:	601a      	str	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binarySemSync */
  binarySemSyncHandle = osSemaphoreNew(1, 0, &binarySemSync_attributes);
 80008ae:	4a23      	ldr	r2, [pc, #140]	; (800093c <main+0x27c>)
 80008b0:	2100      	movs	r1, #0
 80008b2:	2001      	movs	r0, #1
 80008b4:	f007 f9ac 	bl	8007c10 <osSemaphoreNew>
 80008b8:	4602      	mov	r2, r0
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <main+0x280>)
 80008bc:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008be:	4a21      	ldr	r2, [pc, #132]	; (8000944 <main+0x284>)
 80008c0:	2100      	movs	r1, #0
 80008c2:	4821      	ldr	r0, [pc, #132]	; (8000948 <main+0x288>)
 80008c4:	f006 fff6 	bl	80078b4 <osThreadNew>
 80008c8:	4602      	mov	r2, r0
 80008ca:	4b20      	ldr	r3, [pc, #128]	; (800094c <main+0x28c>)
 80008cc:	601a      	str	r2, [r3, #0]

  /* creation of motorControlTas */
  motorControlTasHandle = osThreadNew(StartMotorControlTask, NULL, &motorControlTas_attributes);
 80008ce:	4a20      	ldr	r2, [pc, #128]	; (8000950 <main+0x290>)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4820      	ldr	r0, [pc, #128]	; (8000954 <main+0x294>)
 80008d4:	f006 ffee 	bl	80078b4 <osThreadNew>
 80008d8:	4602      	mov	r2, r0
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <main+0x298>)
 80008dc:	601a      	str	r2, [r3, #0]

  /* creation of lineTask */
  lineTaskHandle = osThreadNew(StartLineTask, NULL, &lineTask_attributes);
 80008de:	4a1f      	ldr	r2, [pc, #124]	; (800095c <main+0x29c>)
 80008e0:	2100      	movs	r1, #0
 80008e2:	481f      	ldr	r0, [pc, #124]	; (8000960 <main+0x2a0>)
 80008e4:	f006 ffe6 	bl	80078b4 <osThreadNew>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <main+0x2a4>)
 80008ec:	601a      	str	r2, [r3, #0]

  /* creation of commTask */
  commTaskHandle = osThreadNew(StartCommTask, NULL, &commTask_attributes);
 80008ee:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <main+0x2a8>)
 80008f0:	2100      	movs	r1, #0
 80008f2:	481e      	ldr	r0, [pc, #120]	; (800096c <main+0x2ac>)
 80008f4:	f006 ffde 	bl	80078b4 <osThreadNew>
 80008f8:	4602      	mov	r2, r0
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <main+0x2b0>)
 80008fc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008fe:	f006 ffa3 	bl	8007848 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000902:	e7fe      	b.n	8000902 <main+0x242>
 8000904:	20004ce0 	.word	0x20004ce0
 8000908:	20004f6c 	.word	0x20004f6c
 800090c:	40021000 	.word	0x40021000
 8000910:	20004a78 	.word	0x20004a78
 8000914:	20004fec 	.word	0x20004fec
 8000918:	2000004c 	.word	0x2000004c
 800091c:	40400000 	.word	0x40400000
 8000920:	20004b50 	.word	0x20004b50
 8000924:	200049b8 	.word	0x200049b8
 8000928:	20004dbc 	.word	0x20004dbc
 800092c:	20004978 	.word	0x20004978
 8000930:	20000048 	.word	0x20000048
 8000934:	0800b2ec 	.word	0x0800b2ec
 8000938:	20004e40 	.word	0x20004e40
 800093c:	0800b2fc 	.word	0x0800b2fc
 8000940:	20004b90 	.word	0x20004b90
 8000944:	0800b25c 	.word	0x0800b25c
 8000948:	08001879 	.word	0x08001879
 800094c:	20004974 	.word	0x20004974
 8000950:	0800b280 	.word	0x0800b280
 8000954:	08001889 	.word	0x08001889
 8000958:	20004e44 	.word	0x20004e44
 800095c:	0800b2a4 	.word	0x0800b2a4
 8000960:	08001e01 	.word	0x08001e01
 8000964:	20004e3c 	.word	0x20004e3c
 8000968:	0800b2c8 	.word	0x0800b2c8
 800096c:	08001f29 	.word	0x08001f29
 8000970:	20004968 	.word	0x20004968

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0b8      	sub	sp, #224	; 0xe0
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800097e:	2234      	movs	r2, #52	; 0x34
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00a fc21 	bl	800b1ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 0308 	add.w	r3, r7, #8
 800099c:	2290      	movs	r2, #144	; 0x90
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00a fc12 	bl	800b1ca <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009a6:	f003 fb2d 	bl	8004004 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009aa:	4b3f      	ldr	r3, [pc, #252]	; (8000aa8 <SystemClock_Config+0x134>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a3e      	ldr	r2, [pc, #248]	; (8000aa8 <SystemClock_Config+0x134>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <SystemClock_Config+0x134>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009c2:	4b3a      	ldr	r3, [pc, #232]	; (8000aac <SystemClock_Config+0x138>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009ca:	4a38      	ldr	r2, [pc, #224]	; (8000aac <SystemClock_Config+0x138>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4b36      	ldr	r3, [pc, #216]	; (8000aac <SystemClock_Config+0x138>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009fa:	2304      	movs	r3, #4
 80009fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a00:	2360      	movs	r3, #96	; 0x60
 8000a02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 fb54 	bl	80040c4 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a22:	f001 fac5 	bl	8001fb0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a26:	f003 fafd 	bl	8004024 <HAL_PWREx_EnableOverDrive>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a30:	f001 fabe 	bl	8001fb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a58:	2103      	movs	r1, #3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 fde0 	bl	8004620 <HAL_RCC_ClockConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000a66:	f001 faa3 	bl	8001fb0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000a6a:	f24c 73c0 	movw	r3, #51136	; 0xc7c0
 8000a6e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f003 ffef 	bl	8004a74 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0x12c>
  {
    Error_Handler();
 8000a9c:	f001 fa88 	bl	8001fb0 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	37e0      	adds	r7, #224	; 0xe0
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <MX_ADC1_Init+0x9c>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000aca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ace:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <MX_ADC1_Init+0xa0>)
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000b12:	f001 ffd7 	bl	8002ac4 <HAL_ADC_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b1c:	f001 fa48 	bl	8001fb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b20:	2303      	movs	r3, #3
 8000b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b24:	2301      	movs	r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000b32:	f002 f80b 	bl	8002b4c <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b3c:	f001 fa38 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20004c18 	.word	0x20004c18
 8000b4c:	40012000 	.word	0x40012000
 8000b50:	0f000001 	.word	0x0f000001

08000b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_I2C1_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <MX_I2C1_Init+0x7c>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b90:	f002 fcc6 	bl	8003520 <HAL_I2C_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b9a:	f001 fa09 	bl	8001fb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000ba2:	f003 f997 	bl	8003ed4 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f001 fa00 	bl	8001fb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000bb4:	f003 f9d9 	bl	8003f6a <HAL_I2CEx_ConfigDigitalFilter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f001 f9f7 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20004a78 	.word	0x20004a78
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	20303e5d 	.word	0x20303e5d

08000bd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <MX_I2C2_Init+0x78>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000be0:	4a1b      	ldr	r2, [pc, #108]	; (8000c50 <MX_I2C2_Init+0x7c>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000c10:	f002 fc86 	bl	8003520 <HAL_I2C_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c1a:	f001 f9c9 	bl	8001fb0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4809      	ldr	r0, [pc, #36]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000c22:	f003 f957 	bl	8003ed4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c2c:	f001 f9c0 	bl	8001fb0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c30:	2100      	movs	r1, #0
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_I2C2_Init+0x74>)
 8000c34:	f003 f999 	bl	8003f6a <HAL_I2CEx_ConfigDigitalFilter>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f001 f9b7 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20004ac4 	.word	0x20004ac4
 8000c4c:	40005800 	.word	0x40005800
 8000c50:	20303e5d 	.word	0x20303e5d

08000c54 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <MX_SPI1_Init+0x78>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c72:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c86:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000ca2:	2207      	movs	r2, #7
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000cae:	2208      	movs	r2, #8
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_SPI1_Init+0x74>)
 8000cb4:	f004 fb04 	bl	80052c0 <HAL_SPI_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cbe:	f001 f977 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20004ec8 	.word	0x20004ec8
 8000ccc:	40013000 	.word	0x40013000

08000cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b09a      	sub	sp, #104	; 0x68
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	222c      	movs	r2, #44	; 0x2c
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00a fa5d 	bl	800b1ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d10:	4b55      	ldr	r3, [pc, #340]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d12:	4a56      	ldr	r2, [pc, #344]	; (8000e6c <MX_TIM1_Init+0x19c>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d16:	4b54      	ldr	r3, [pc, #336]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b52      	ldr	r3, [pc, #328]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000d22:	4b51      	ldr	r3, [pc, #324]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b4f      	ldr	r3, [pc, #316]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d2e:	4b4e      	ldr	r3, [pc, #312]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d34:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d3a:	484b      	ldr	r0, [pc, #300]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d3c:	f004 fb52 	bl	80053e4 <HAL_TIM_Base_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d46:	f001 f933 	bl	8001fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d50:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d54:	4619      	mov	r1, r3
 8000d56:	4844      	ldr	r0, [pc, #272]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d58:	f005 f88e 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d62:	f001 f925 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000d66:	4840      	ldr	r0, [pc, #256]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d68:	f004 fb92 	bl	8005490 <HAL_TIM_OC_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d72:	f001 f91d 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d82:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d86:	4619      	mov	r1, r3
 8000d88:	4837      	ldr	r0, [pc, #220]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000d8a:	f005 fe3f 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000d94:	f001 f90c 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000d98:	2350      	movs	r3, #80	; 0x50
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000da0:	2302      	movs	r3, #2
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000da4:	2300      	movs	r3, #0
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000db8:	2200      	movs	r2, #0
 8000dba:	4619      	mov	r1, r3
 8000dbc:	482a      	ldr	r0, [pc, #168]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000dbe:	f004 fe29 	bl	8005a14 <HAL_TIM_OC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000dc8:	f001 f8f2 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4824      	ldr	r0, [pc, #144]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000dd6:	f004 fe1d 	bl	8005a14 <HAL_TIM_OC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000de0:	f001 f8e6 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000de4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000de8:	2208      	movs	r2, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	481e      	ldr	r0, [pc, #120]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000dee:	f004 fe11 	bl	8005a14 <HAL_TIM_OC_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000df8:	f001 f8da 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e00:	220c      	movs	r2, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4818      	ldr	r0, [pc, #96]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000e06:	f004 fe05 	bl	8005a14 <HAL_TIM_OC_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000e10:	f001 f8ce 	bl	8001fb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000e4a:	f005 fe6d 	bl	8006b28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000e54:	f001 f8ac 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <MX_TIM1_Init+0x198>)
 8000e5a:	f001 fb1f 	bl	800249c <HAL_TIM_MspPostInit>

}
 8000e5e:	bf00      	nop
 8000e60:	3768      	adds	r7, #104	; 0x68
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20004dbc 	.word	0x20004dbc
 8000e6c:	40010000 	.word	0x40010000

08000e70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b092      	sub	sp, #72	; 0x48
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	615a      	str	r2, [r3, #20]
 8000ea2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ec4:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed8:	4831      	ldr	r0, [pc, #196]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000eda:	f004 fa83 	bl	80053e4 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ee4:	f001 f864 	bl	8001fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	482a      	ldr	r0, [pc, #168]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000ef6:	f004 ffbf 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f00:	f001 f856 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f04:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000f06:	f004 faf8 	bl	80054fa <HAL_TIM_PWM_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000f10:	f001 f84e 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000f14:	4822      	ldr	r0, [pc, #136]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000f16:	f004 fb5f 	bl	80055d8 <HAL_TIM_IC_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f20:	f001 f846 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f30:	4619      	mov	r1, r3
 8000f32:	481b      	ldr	r0, [pc, #108]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000f34:	f005 fd6a 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000f3e:	f001 f837 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f42:	2360      	movs	r3, #96	; 0x60
 8000f44:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000f5c:	f004 fe74 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000f66:	f001 f823 	bl	8001fb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2208      	movs	r2, #8
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000f82:	f004 fdc5 	bl	8005b10 <HAL_TIM_IC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000f8c:	f001 f810 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <MX_TIM2_Init+0x130>)
 8000f92:	f001 fa83 	bl	800249c <HAL_TIM_MspPostInit>

}
 8000f96:	bf00      	nop
 8000f98:	3748      	adds	r7, #72	; 0x48
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20004f2c 	.word	0x20004f2c

08000fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	2224      	movs	r2, #36	; 0x24
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f00a f909 	bl	800b1ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <MX_TIM3_Init+0xa4>)
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <MX_TIM3_Init+0xa8>)
 8000fc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <MX_TIM3_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <MX_TIM3_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_ARR_VALUE;
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <MX_TIM3_Init+0xa4>)
 8000fd6:	f640 62ff 	movw	r2, #3839	; 0xeff
 8000fda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <MX_TIM3_Init+0xa4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <MX_TIM3_Init+0xa4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001000:	2301      	movs	r3, #1
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001008:	230f      	movs	r3, #15
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	; (8001048 <MX_TIM3_Init+0xa4>)
 8001014:	f004 fb16 	bl	8005644 <HAL_TIM_Encoder_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800101e:	f000 ffc7 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800102a:	463b      	mov	r3, r7
 800102c:	4619      	mov	r1, r3
 800102e:	4806      	ldr	r0, [pc, #24]	; (8001048 <MX_TIM3_Init+0xa4>)
 8001030:	f005 fcec 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800103a:	f000 ffb9 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	3730      	adds	r7, #48	; 0x30
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20004b50 	.word	0x20004b50
 800104c:	40000400 	.word	0x40000400

08001050 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2224      	movs	r2, #36	; 0x24
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00a f8b3 	bl	800b1ca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001064:	463b      	mov	r3, r7
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <MX_TIM4_Init+0xa4>)
 8001070:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <MX_TIM4_Init+0xa8>)
 8001072:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <MX_TIM4_Init+0xa4>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_TIM4_Init+0xa4>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_ARR_VALUE;
 8001080:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_TIM4_Init+0xa4>)
 8001082:	f640 62ff 	movw	r2, #3839	; 0xeff
 8001086:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_TIM4_Init+0xa4>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM4_Init+0xa4>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001094:	2303      	movs	r3, #3
 8001096:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800109c:	2301      	movs	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80010a4:	230f      	movs	r3, #15
 80010a6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ac:	2301      	movs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80010b4:	230f      	movs	r3, #15
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_TIM4_Init+0xa4>)
 80010c0:	f004 fac0 	bl	8005644 <HAL_TIM_Encoder_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010ca:	f000 ff71 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010d6:	463b      	mov	r3, r7
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_TIM4_Init+0xa4>)
 80010dc:	f005 fc96 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80010e6:	f000 ff63 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3730      	adds	r7, #48	; 0x30
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200049b8 	.word	0x200049b8
 80010f8:	40000800 	.word	0x40000800

080010fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <MX_TIM5_Init+0xe8>)
 8001130:	4a2d      	ldr	r2, [pc, #180]	; (80011e8 <MX_TIM5_Init+0xec>)
 8001132:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <MX_TIM5_Init+0xe8>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_TIM5_Init+0xe8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_TIM5_Init+0xe8>)
 8001142:	f04f 32ff 	mov.w	r2, #4294967295
 8001146:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_TIM5_Init+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <MX_TIM5_Init+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001154:	4823      	ldr	r0, [pc, #140]	; (80011e4 <MX_TIM5_Init+0xe8>)
 8001156:	f004 f945 	bl	80053e4 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001160:	f000 ff26 	bl	8001fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116e:	4619      	mov	r1, r3
 8001170:	481c      	ldr	r0, [pc, #112]	; (80011e4 <MX_TIM5_Init+0xe8>)
 8001172:	f004 fe81 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800117c:	f000 ff18 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <MX_TIM5_Init+0xe8>)
 8001182:	f004 f9ba 	bl	80054fa <HAL_TIM_PWM_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800118c:	f000 ff10 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <MX_TIM5_Init+0xe8>)
 80011a0:	f005 fc34 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80011aa:	f000 ff01 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ae:	2360      	movs	r3, #96	; 0x60
 80011b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <MX_TIM5_Init+0xe8>)
 80011c6:	f004 fd3f 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80011d0:	f000 feee 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <MX_TIM5_Init+0xe8>)
 80011d6:	f001 f961 	bl	800249c <HAL_TIM_MspPostInit>

}
 80011da:	bf00      	nop
 80011dc:	3738      	adds	r7, #56	; 0x38
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20004b10 	.word	0x20004b10
 80011e8:	40000c00 	.word	0x40000c00

080011ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09a      	sub	sp, #104	; 0x68
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	615a      	str	r2, [r3, #20]
 800121e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	222c      	movs	r2, #44	; 0x2c
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f009 ffcf 	bl	800b1ca <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800122c:	4b56      	ldr	r3, [pc, #344]	; (8001388 <MX_TIM8_Init+0x19c>)
 800122e:	4a57      	ldr	r2, [pc, #348]	; (800138c <MX_TIM8_Init+0x1a0>)
 8001230:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = TIM8_PSC_VALUE;
 8001232:	4b55      	ldr	r3, [pc, #340]	; (8001388 <MX_TIM8_Init+0x19c>)
 8001234:	f240 32bf 	movw	r2, #959	; 0x3bf
 8001238:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <MX_TIM8_Init+0x19c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = TIM8_ARR_VALUE;
 8001240:	4b51      	ldr	r3, [pc, #324]	; (8001388 <MX_TIM8_Init+0x19c>)
 8001242:	f240 128f 	movw	r2, #399	; 0x18f
 8001246:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b4f      	ldr	r3, [pc, #316]	; (8001388 <MX_TIM8_Init+0x19c>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800124e:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <MX_TIM8_Init+0x19c>)
 8001250:	2200      	movs	r2, #0
 8001252:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b4c      	ldr	r3, [pc, #304]	; (8001388 <MX_TIM8_Init+0x19c>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800125a:	484b      	ldr	r0, [pc, #300]	; (8001388 <MX_TIM8_Init+0x19c>)
 800125c:	f004 f8c2 	bl	80053e4 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001266:	f000 fea3 	bl	8001fb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001270:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001274:	4619      	mov	r1, r3
 8001276:	4844      	ldr	r0, [pc, #272]	; (8001388 <MX_TIM8_Init+0x19c>)
 8001278:	f004 fdfe 	bl	8005e78 <HAL_TIM_ConfigClockSource>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8001282:	f000 fe95 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001286:	4840      	ldr	r0, [pc, #256]	; (8001388 <MX_TIM8_Init+0x19c>)
 8001288:	f004 f937 	bl	80054fa <HAL_TIM_PWM_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8001292:	f000 fe8d 	bl	8001fb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012a6:	4619      	mov	r1, r3
 80012a8:	4837      	ldr	r0, [pc, #220]	; (8001388 <MX_TIM8_Init+0x19c>)
 80012aa:	f005 fbaf 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80012b4:	f000 fe7c 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b8:	2360      	movs	r3, #96	; 0x60
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c8:	2300      	movs	r3, #0
 80012ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012cc:	2300      	movs	r3, #0
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	482a      	ldr	r0, [pc, #168]	; (8001388 <MX_TIM8_Init+0x19c>)
 80012de:	f004 fcb3 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80012e8:	f000 fe62 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012f0:	2204      	movs	r2, #4
 80012f2:	4619      	mov	r1, r3
 80012f4:	4824      	ldr	r0, [pc, #144]	; (8001388 <MX_TIM8_Init+0x19c>)
 80012f6:	f004 fca7 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8001300:	f000 fe56 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001308:	2208      	movs	r2, #8
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <MX_TIM8_Init+0x19c>)
 800130e:	f004 fc9b 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8001318:	f000 fe4a 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800131c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001320:	220c      	movs	r2, #12
 8001322:	4619      	mov	r1, r3
 8001324:	4818      	ldr	r0, [pc, #96]	; (8001388 <MX_TIM8_Init+0x19c>)
 8001326:	f004 fc8f 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM8_Init+0x148>
  {
    Error_Handler();
 8001330:	f000 fe3e 	bl	8001fb0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800134c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM8_Init+0x19c>)
 800136a:	f005 fbdd 	bl	8006b28 <HAL_TIMEx_ConfigBreakDeadTime>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM8_Init+0x18c>
  {
    Error_Handler();
 8001374:	f000 fe1c 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM8_Init+0x19c>)
 800137a:	f001 f88f 	bl	800249c <HAL_TIM_MspPostInit>

}
 800137e:	bf00      	nop
 8001380:	3768      	adds	r7, #104	; 0x68
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20004978 	.word	0x20004978
 800138c:	40010400 	.word	0x40010400

08001390 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_TIM9_Init+0x98>)
 80013aa:	4a20      	ldr	r2, [pc, #128]	; (800142c <MX_TIM9_Init+0x9c>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_TIM9_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_TIM9_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80013ba:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_TIM9_Init+0x98>)
 80013bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b19      	ldr	r3, [pc, #100]	; (8001428 <MX_TIM9_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <MX_TIM9_Init+0x98>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80013ce:	4816      	ldr	r0, [pc, #88]	; (8001428 <MX_TIM9_Init+0x98>)
 80013d0:	f004 f893 	bl	80054fa <HAL_TIM_PWM_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80013da:	f000 fde9 	bl	8001fb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	; 0x60
 80013e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_TIM9_Init+0x98>)
 80013f6:	f004 fc27 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001400:	f000 fdd6 	bl	8001fb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2204      	movs	r2, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4807      	ldr	r0, [pc, #28]	; (8001428 <MX_TIM9_Init+0x98>)
 800140c:	f004 fc1c 	bl	8005c48 <HAL_TIM_PWM_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001416:	f000 fdcb 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_TIM9_Init+0x98>)
 800141c:	f001 f83e 	bl	800249c <HAL_TIM_MspPostInit>

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20004dfc 	.word	0x20004dfc
 800142c:	40014000 	.word	0x40014000

08001430 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <MX_UART4_Init+0x58>)
 8001436:	4a15      	ldr	r2, [pc, #84]	; (800148c <MX_UART4_Init+0x5c>)
 8001438:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <MX_UART4_Init+0x58>)
 800143c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001440:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_UART4_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <MX_UART4_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_UART4_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_UART4_Init+0x58>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_UART4_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_UART4_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_UART4_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_UART4_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_UART4_Init+0x58>)
 8001474:	f005 fbf4 	bl	8006c60 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800147e:	f000 fd97 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20004e48 	.word	0x20004e48
 800148c:	40004c00 	.word	0x40004c00

08001490 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_UART5_Init+0x58>)
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <MX_UART5_Init+0x5c>)
 8001498:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_UART5_Init+0x58>)
 800149c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_UART5_Init+0x58>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_UART5_Init+0x58>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_UART5_Init+0x58>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_UART5_Init+0x58>)
 80014b6:	220c      	movs	r2, #12
 80014b8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <MX_UART5_Init+0x58>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_UART5_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MX_UART5_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_UART5_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_UART5_Init+0x58>)
 80014d4:	f005 fbc4 	bl	8006c60 <HAL_UART_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80014de:	f000 fd67 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20004b98 	.word	0x20004b98
 80014ec:	40005000 	.word	0x40005000

080014f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <MX_USART1_UART_Init+0x58>)
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <MX_USART1_UART_Init+0x5c>)
 80014f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <MX_USART1_UART_Init+0x58>)
 80014fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001500:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001508:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001516:	220c      	movs	r2, #12
 8001518:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800151c:	2200      	movs	r2, #0
 800151e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_USART1_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001532:	4805      	ldr	r0, [pc, #20]	; (8001548 <MX_USART1_UART_Init+0x58>)
 8001534:	f005 fb94 	bl	8006c60 <HAL_UART_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800153e:	f000 fd37 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20004c60 	.word	0x20004c60
 800154c:	40011000 	.word	0x40011000

08001550 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 8001556:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <MX_USART2_UART_Init+0x58>)
 8001558:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 800155a:	4b12      	ldr	r3, [pc, #72]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <MX_USART2_UART_Init+0x5c>)
 800155e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001560:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 8001568:	2200      	movs	r2, #0
 800156a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156c:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 8001574:	220c      	movs	r2, #12
 8001576:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 800157a:	2200      	movs	r2, #0
 800157c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_USART2_UART_Init+0x54>)
 8001592:	f005 fb65 	bl	8006c60 <HAL_UART_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 800159c:	f000 fd08 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20004f6c 	.word	0x20004f6c
 80015a8:	40004400 	.word	0x40004400
 80015ac:	000f4240 	.word	0x000f4240

080015b0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015b6:	4a15      	ldr	r2, [pc, #84]	; (800160c <MX_USART3_UART_Init+0x5c>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015f2:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_USART3_UART_Init+0x58>)
 80015f4:	f005 fb34 	bl	8006c60 <HAL_UART_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015fe:	f000 fcd7 	bl	8001fb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200049f8 	.word	0x200049f8
 800160c:	40004800 	.word	0x40004800

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001626:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <MX_GPIO_Init+0x248>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a8b      	ldr	r2, [pc, #556]	; (8001858 <MX_GPIO_Init+0x248>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b89      	ldr	r3, [pc, #548]	; (8001858 <MX_GPIO_Init+0x248>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b86      	ldr	r3, [pc, #536]	; (8001858 <MX_GPIO_Init+0x248>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a85      	ldr	r2, [pc, #532]	; (8001858 <MX_GPIO_Init+0x248>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b83      	ldr	r3, [pc, #524]	; (8001858 <MX_GPIO_Init+0x248>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001656:	4b80      	ldr	r3, [pc, #512]	; (8001858 <MX_GPIO_Init+0x248>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a7f      	ldr	r2, [pc, #508]	; (8001858 <MX_GPIO_Init+0x248>)
 800165c:	f043 0320 	orr.w	r3, r3, #32
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b7d      	ldr	r3, [pc, #500]	; (8001858 <MX_GPIO_Init+0x248>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166e:	4b7a      	ldr	r3, [pc, #488]	; (8001858 <MX_GPIO_Init+0x248>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a79      	ldr	r2, [pc, #484]	; (8001858 <MX_GPIO_Init+0x248>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b77      	ldr	r3, [pc, #476]	; (8001858 <MX_GPIO_Init+0x248>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	4b74      	ldr	r3, [pc, #464]	; (8001858 <MX_GPIO_Init+0x248>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a73      	ldr	r2, [pc, #460]	; (8001858 <MX_GPIO_Init+0x248>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b71      	ldr	r3, [pc, #452]	; (8001858 <MX_GPIO_Init+0x248>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	4b6e      	ldr	r3, [pc, #440]	; (8001858 <MX_GPIO_Init+0x248>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a6d      	ldr	r2, [pc, #436]	; (8001858 <MX_GPIO_Init+0x248>)
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b6b      	ldr	r3, [pc, #428]	; (8001858 <MX_GPIO_Init+0x248>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	4b68      	ldr	r3, [pc, #416]	; (8001858 <MX_GPIO_Init+0x248>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a67      	ldr	r2, [pc, #412]	; (8001858 <MX_GPIO_Init+0x248>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b65      	ldr	r3, [pc, #404]	; (8001858 <MX_GPIO_Init+0x248>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	60bb      	str	r3, [r7, #8]
 80016cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ce:	4b62      	ldr	r3, [pc, #392]	; (8001858 <MX_GPIO_Init+0x248>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a61      	ldr	r2, [pc, #388]	; (8001858 <MX_GPIO_Init+0x248>)
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b5f      	ldr	r3, [pc, #380]	; (8001858 <MX_GPIO_Init+0x248>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2118      	movs	r1, #24
 80016ea:	485c      	ldr	r0, [pc, #368]	; (800185c <MX_GPIO_Init+0x24c>)
 80016ec:	f001 fefe 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	f244 0181 	movw	r1, #16513	; 0x4081
 80016f6:	485a      	ldr	r0, [pc, #360]	; (8001860 <MX_GPIO_Init+0x250>)
 80016f8:	f001 fef8 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2140      	movs	r1, #64	; 0x40
 8001700:	4858      	ldr	r0, [pc, #352]	; (8001864 <MX_GPIO_Init+0x254>)
 8001702:	f001 fef3 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_OUT_SPI_CS_SDCARD_Pin GPIO_OUT_SPI_CS_LCD_Pin */
  GPIO_InitStruct.Pin = GPIO_OUT_SPI_CS_SDCARD_Pin|GPIO_OUT_SPI_CS_LCD_Pin;
 8001706:	2318      	movs	r3, #24
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800171a:	4619      	mov	r1, r3
 800171c:	484f      	ldr	r0, [pc, #316]	; (800185c <MX_GPIO_Init+0x24c>)
 800171e:	f001 fd3b 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin GPIO_EXTI3_IMU_IRQ_Pin GPIO_EXTI4_KPAD_IRQ_Pin GPIO_EXTI8_USER_BUT1_IRQ_Pin
                           GPIO_EXTI9_USER_BUT2_IRQ_Pin GPIO_EXTI10_BUMP1_IRQ_Pin GPIO_EXTI11_BUMP2_IRQ_Pin GPIO_EXTI12_BUMP3_IRQ_Pin
                           GPIO_EXTI13_BUMP4_IRQ_Pin */
  GPIO_InitStruct.Pin = GPIO_EXTI2_PROXY_TOF_SENS_IRQ_Pin|GPIO_EXTI3_IMU_IRQ_Pin|GPIO_EXTI4_KPAD_IRQ_Pin|GPIO_EXTI8_USER_BUT1_IRQ_Pin
 8001722:	f643 731c 	movw	r3, #16156	; 0x3f1c
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_EXTI9_USER_BUT2_IRQ_Pin|GPIO_EXTI10_BUMP1_IRQ_Pin|GPIO_EXTI11_BUMP2_IRQ_Pin|GPIO_EXTI12_BUMP3_IRQ_Pin
                          |GPIO_EXTI13_BUMP4_IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001728:	4b4f      	ldr	r3, [pc, #316]	; (8001868 <MX_GPIO_Init+0x258>)
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	484d      	ldr	r0, [pc, #308]	; (800186c <MX_GPIO_Init+0x25c>)
 8001738:	f001 fd2e 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800173c:	2332      	movs	r3, #50	; 0x32
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800174c:	230b      	movs	r3, #11
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	4846      	ldr	r0, [pc, #280]	; (8001870 <MX_GPIO_Init+0x260>)
 8001758:	f001 fd1e 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800175c:	2386      	movs	r3, #134	; 0x86
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800176c:	230b      	movs	r3, #11
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	483f      	ldr	r0, [pc, #252]	; (8001874 <MX_GPIO_Init+0x264>)
 8001778:	f001 fd0e 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800177c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001782:	2301      	movs	r3, #1
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	4832      	ldr	r0, [pc, #200]	; (8001860 <MX_GPIO_Init+0x250>)
 8001796:	f001 fcff 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800179a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ac:	230b      	movs	r3, #11
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	482a      	ldr	r0, [pc, #168]	; (8001860 <MX_GPIO_Init+0x250>)
 80017b8:	f001 fcee 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017bc:	2340      	movs	r3, #64	; 0x40
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	4824      	ldr	r0, [pc, #144]	; (8001864 <MX_GPIO_Init+0x254>)
 80017d4:	f001 fce0 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	481e      	ldr	r0, [pc, #120]	; (8001864 <MX_GPIO_Init+0x254>)
 80017ec:	f001 fcd4 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017f0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001802:	230a      	movs	r3, #10
 8001804:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	4819      	ldr	r0, [pc, #100]	; (8001874 <MX_GPIO_Init+0x264>)
 800180e:	f001 fcc3 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001824:	4619      	mov	r1, r3
 8001826:	4813      	ldr	r0, [pc, #76]	; (8001874 <MX_GPIO_Init+0x264>)
 8001828:	f001 fcb6 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800182c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183a:	2303      	movs	r3, #3
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800183e:	230b      	movs	r3, #11
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001846:	4619      	mov	r1, r3
 8001848:	4806      	ldr	r0, [pc, #24]	; (8001864 <MX_GPIO_Init+0x254>)
 800184a:	f001 fca5 	bl	8003198 <HAL_GPIO_Init>

}
 800184e:	bf00      	nop
 8001850:	3738      	adds	r7, #56	; 0x38
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40021000 	.word	0x40021000
 8001860:	40020400 	.word	0x40020400
 8001864:	40021800 	.word	0x40021800
 8001868:	10110000 	.word	0x10110000
 800186c:	40021400 	.word	0x40021400
 8001870:	40020800 	.word	0x40020800
 8001874:	40020000 	.word	0x40020000

08001878 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001880:	2001      	movs	r0, #1
 8001882:	f006 f8bd 	bl	8007a00 <osDelay>
 8001886:	e7fb      	b.n	8001880 <StartDefaultTask+0x8>

08001888 <StartMotorControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorControlTask */
void StartMotorControlTask(void *argument)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b098      	sub	sp, #96	; 0x60
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorControlTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(binarySemSyncHandle, osWaitForever);
 8001890:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <StartMotorControlTask+0x19c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f04f 31ff 	mov.w	r1, #4294967295
 8001898:	4618      	mov	r0, r3
 800189a:	f006 fa57 	bl	8007d4c <osSemaphoreAcquire>
	  float u2_V, u2_sat_V, u2_prop_V, e2_awu_V, u2_sat_duty;

	  static float u1_int_V = 0;
	  static float u2_int_V = 0;

	  if (error > -1 || error < 1){
 800189e:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <StartMotorControlTask+0x1a0>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80018a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	dc09      	bgt.n	80018c6 <StartMotorControlTask+0x3e>
 80018b2:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <StartMotorControlTask+0x1a0>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	d503      	bpl.n	80018ce <StartMotorControlTask+0x46>
		V_abs = 250;
 80018c6:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <StartMotorControlTask+0x1a4>)
 80018c8:	4a59      	ldr	r2, [pc, #356]	; (8001a30 <StartMotorControlTask+0x1a8>)
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e002      	b.n	80018d4 <StartMotorControlTask+0x4c>
	}
	else{
		V_abs = 150;
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <StartMotorControlTask+0x1a4>)
 80018d0:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <StartMotorControlTask+0x1ac>)
 80018d2:	601a      	str	r2, [r3, #0]
	}

	  float psi_dot = error * P_cst;
 80018d4:	4b54      	ldr	r3, [pc, #336]	; (8001a28 <StartMotorControlTask+0x1a0>)
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <StartMotorControlTask+0x1b0>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  float V_r = V_abs + psi_dot * D_wheel / 2; // Right wheel velocity in mm/s
 80018e8:	4b54      	ldr	r3, [pc, #336]	; (8001a3c <StartMotorControlTask+0x1b4>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	ee07 3a90 	vmov	s15, r3
 80018f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001900:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001904:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <StartMotorControlTask+0x1a4>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	  float V_l = V_abs - psi_dot * D_wheel / 2; // Left wheel velocity in mm/s
 8001912:	4b46      	ldr	r3, [pc, #280]	; (8001a2c <StartMotorControlTask+0x1a4>)
 8001914:	ed93 7a00 	vldr	s14, [r3]
 8001918:	4b48      	ldr	r3, [pc, #288]	; (8001a3c <StartMotorControlTask+0x1b4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001924:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001928:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800192c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001930:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

	  W_r = V_r / r_wheel; // Right wheel angular speed rad/s
 800193c:	4b40      	ldr	r3, [pc, #256]	; (8001a40 <StartMotorControlTask+0x1b8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	ee07 3a90 	vmov	s15, r3
 8001944:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001948:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800194c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001950:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <StartMotorControlTask+0x1bc>)
 8001952:	edc3 7a00 	vstr	s15, [r3]
	  W_l = V_l / r_wheel; // Left wheel angular speed rad/s
 8001956:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <StartMotorControlTask+0x1b8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001962:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <StartMotorControlTask+0x1c0>)
 800196c:	edc3 7a00 	vstr	s15, [r3]

	  /*  read current values of encoders counters  */
	  TIM3_CurrentCount = __HAL_TIM_GET_COUNTER(&htim3);
 8001970:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <StartMotorControlTask+0x1c4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	643b      	str	r3, [r7, #64]	; 0x40
	  TIM4_CurrentCount = __HAL_TIM_GET_COUNTER(&htim4);
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <StartMotorControlTask+0x1c8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c

	  /*  evaluate increment of TIM3 counter from previous count  */
	  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <StartMotorControlTask+0x1c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0310 	and.w	r3, r3, #16
 800198a:	2b10      	cmp	r3, #16
 800198c:	d112      	bne.n	80019b4 <StartMotorControlTask+0x12c>
	  {
		  /* check for counter underflow */
		  if (TIM3_CurrentCount <= TIM3_PreviousCount)
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <StartMotorControlTask+0x1cc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001994:	429a      	cmp	r2, r3
 8001996:	d805      	bhi.n	80019a4 <StartMotorControlTask+0x11c>
			  TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <StartMotorControlTask+0x1cc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019a2:	e019      	b.n	80019d8 <StartMotorControlTask+0x150>
		  else
			  TIM3_DiffCount = -((TIM3_ARR_VALUE + 1) - TIM3_CurrentCount) - TIM3_PreviousCount;
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <StartMotorControlTask+0x1cc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 80019b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019b2:	e011      	b.n	80019d8 <StartMotorControlTask+0x150>
	  }
	  else
	  {
		  /* check for counter overflow */
		  if (TIM3_CurrentCount >= TIM3_PreviousCount)
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <StartMotorControlTask+0x1cc>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d305      	bcc.n	80019ca <StartMotorControlTask+0x142>
			  TIM3_DiffCount = TIM3_CurrentCount - TIM3_PreviousCount;
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <StartMotorControlTask+0x1cc>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019c8:	e006      	b.n	80019d8 <StartMotorControlTask+0x150>
		  else
			  TIM3_DiffCount = ((TIM3_ARR_VALUE + 1) - TIM3_PreviousCount) + TIM3_CurrentCount;
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <StartMotorControlTask+0x1cc>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 80019d6:	65fb      	str	r3, [r7, #92]	; 0x5c
	  }

	  /*  evaluate increment of TIM4 counter from previous count  */
	  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4))
 80019d8:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <StartMotorControlTask+0x1c8>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d112      	bne.n	8001a0c <StartMotorControlTask+0x184>
	  {
		  /* check for counter underflow */
		  if (TIM4_CurrentCount <= TIM4_PreviousCount)
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <StartMotorControlTask+0x1d0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d805      	bhi.n	80019fc <StartMotorControlTask+0x174>
			  TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <StartMotorControlTask+0x1d0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80019fa:	e036      	b.n	8001a6a <StartMotorControlTask+0x1e2>
		  else
			  TIM4_DiffCount = -((TIM4_ARR_VALUE + 1) - TIM4_CurrentCount) - TIM4_PreviousCount;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <StartMotorControlTask+0x1d0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	f5a3 6370 	sub.w	r3, r3, #3840	; 0xf00
 8001a08:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a0a:	e02e      	b.n	8001a6a <StartMotorControlTask+0x1e2>
	  }
	  else
	  {
		  /* check for counter overflow */
		  if (TIM4_CurrentCount >= TIM4_PreviousCount)
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <StartMotorControlTask+0x1d0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d322      	bcc.n	8001a5c <StartMotorControlTask+0x1d4>
			  TIM4_DiffCount = TIM4_CurrentCount - TIM4_PreviousCount;
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <StartMotorControlTask+0x1d0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a20:	e023      	b.n	8001a6a <StartMotorControlTask+0x1e2>
 8001a22:	bf00      	nop
 8001a24:	20004b90 	.word	0x20004b90
 8001a28:	2000004c 	.word	0x2000004c
 8001a2c:	2000000c 	.word	0x2000000c
 8001a30:	437a0000 	.word	0x437a0000
 8001a34:	43160000 	.word	0x43160000
 8001a38:	20000018 	.word	0x20000018
 8001a3c:	20000010 	.word	0x20000010
 8001a40:	20000014 	.word	0x20000014
 8001a44:	20004b94 	.word	0x20004b94
 8001a48:	2000496c 	.word	0x2000496c
 8001a4c:	20004b50 	.word	0x20004b50
 8001a50:	200049b8 	.word	0x200049b8
 8001a54:	20000050 	.word	0x20000050
 8001a58:	20000054 	.word	0x20000054
		  else
			  TIM4_DiffCount = ((TIM4_ARR_VALUE + 1) - TIM4_PreviousCount) + TIM4_CurrentCount;
 8001a5c:	4bca      	ldr	r3, [pc, #808]	; (8001d88 <StartMotorControlTask+0x500>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f503 6370 	add.w	r3, r3, #3840	; 0xf00
 8001a68:	65bb      	str	r3, [r7, #88]	; 0x58
	  }

	  /* compute unfiltered motor speeds [rpm] */
	  w1_meas_rpm = (float)TIM3_DiffCount / (TIM3_ARR_VALUE + 1) / TS * 60;
 8001a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6c:	ee07 3a90 	vmov	s15, r3
 8001a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a74:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8001d8c <StartMotorControlTask+0x504>
 8001a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a7c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a80:	ed9f 5bbb 	vldr	d5, [pc, #748]	; 8001d70 <StartMotorControlTask+0x4e8>
 8001a84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a88:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8001d78 <StartMotorControlTask+0x4f0>
 8001a8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a94:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	  w2_meas_rpm = (float)TIM4_DiffCount / (TIM4_ARR_VALUE + 1) / TS * 60;
 8001a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa2:	eddf 6aba 	vldr	s13, [pc, #744]	; 8001d8c <StartMotorControlTask+0x504>
 8001aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aaa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001aae:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 8001d70 <StartMotorControlTask+0x4e8>
 8001ab2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ab6:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8001d78 <StartMotorControlTask+0x4f0>
 8001aba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001abe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ac2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	  /* compute tracking error [rpm] */
	  w1_err_rads = W_r - RPM2RADS * w1_meas_rpm;
 8001ac6:	4bb2      	ldr	r3, [pc, #712]	; (8001d90 <StartMotorControlTask+0x508>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ad0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ad4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ad8:	ed9f 5ba9 	vldr	d5, [pc, #676]	; 8001d80 <StartMotorControlTask+0x4f8>
 8001adc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ae0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ae4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	  w2_err_rads = W_l - RPM2RADS * w2_meas_rpm;
 8001aec:	4ba9      	ldr	r3, [pc, #676]	; (8001d94 <StartMotorControlTask+0x50c>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001af6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001afa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001afe:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 8001d80 <StartMotorControlTask+0x4f8>
 8001b02:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b06:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b0e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	  /* get PI proportional terms [V] */
	  u1_prop_V = Kp * w1_err_rads;
 8001b12:	4ba1      	ldr	r3, [pc, #644]	; (8001d98 <StartMotorControlTask+0x510>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	  u2_prop_V = Kp * w2_err_rads;
 8001b24:	4b9c      	ldr	r3, [pc, #624]	; (8001d98 <StartMotorControlTask+0x510>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	  /* get PI integral term [V] */
	  u1_int_V += Ki * TS * w1_err_rads;
 8001b36:	4b99      	ldr	r3, [pc, #612]	; (8001d9c <StartMotorControlTask+0x514>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b40:	4b97      	ldr	r3, [pc, #604]	; (8001da0 <StartMotorControlTask+0x518>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b4a:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001d70 <StartMotorControlTask+0x4e8>
 8001b4e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001b52:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001b56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b5a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b66:	4b8d      	ldr	r3, [pc, #564]	; (8001d9c <StartMotorControlTask+0x514>)
 8001b68:	edc3 7a00 	vstr	s15, [r3]
	  u2_int_V += Ki * TS * w2_err_rads;
 8001b6c:	4b8d      	ldr	r3, [pc, #564]	; (8001da4 <StartMotorControlTask+0x51c>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b76:	4b8a      	ldr	r3, [pc, #552]	; (8001da0 <StartMotorControlTask+0x518>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b80:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8001d70 <StartMotorControlTask+0x4e8>
 8001b84:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001b88:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b9c:	4b81      	ldr	r3, [pc, #516]	; (8001da4 <StartMotorControlTask+0x51c>)
 8001b9e:	edc3 7a00 	vstr	s15, [r3]

	  /* get PI outputs [V]  */
	  u1_V = u1_prop_V + u1_int_V;
 8001ba2:	4b7e      	ldr	r3, [pc, #504]	; (8001d9c <StartMotorControlTask+0x514>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb0:	edc7 7a08 	vstr	s15, [r7, #32]
	  u2_V = u2_prop_V + u2_int_V;
 8001bb4:	4b7b      	ldr	r3, [pc, #492]	; (8001da4 <StartMotorControlTask+0x51c>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc2:	edc7 7a07 	vstr	s15, [r7, #28]

	  /* get saturated P outputs [V]  */
	  if (u1_V > VBATT)
 8001bc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8001bca:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	dd03      	ble.n	8001be0 <StartMotorControlTask+0x358>
		  u1_sat_V = VBATT;
 8001bd8:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8001bde:	e00e      	b.n	8001bfe <StartMotorControlTask+0x376>
	  else if (u1_V < -VBATT)
 8001be0:	edd7 7a08 	vldr	s15, [r7, #32]
 8001be4:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8001be8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf0:	d503      	bpl.n	8001bfa <StartMotorControlTask+0x372>
		  u1_sat_V = -VBATT;
 8001bf2:	f04f 4341 	mov.w	r3, #3238002688	; 0xc1000000
 8001bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8001bf8:	e001      	b.n	8001bfe <StartMotorControlTask+0x376>
	  else
		  u1_sat_V = u1_V;
 8001bfa:	6a3b      	ldr	r3, [r7, #32]
 8001bfc:	657b      	str	r3, [r7, #84]	; 0x54

	  if (u2_V > VBATT)
 8001bfe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c02:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	dd03      	ble.n	8001c18 <StartMotorControlTask+0x390>
		  u2_sat_V = VBATT;
 8001c10:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001c14:	653b      	str	r3, [r7, #80]	; 0x50
 8001c16:	e00e      	b.n	8001c36 <StartMotorControlTask+0x3ae>
	  else if (u2_V < -VBATT)
 8001c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c1c:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8001c20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c28:	d503      	bpl.n	8001c32 <StartMotorControlTask+0x3aa>
		  u2_sat_V = -VBATT;
 8001c2a:	f04f 4341 	mov.w	r3, #3238002688	; 0xc1000000
 8001c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8001c30:	e001      	b.n	8001c36 <StartMotorControlTask+0x3ae>
	  else
		  u2_sat_V = u2_V;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	653b      	str	r3, [r7, #80]	; 0x50

	  /* get AWU error signals */
	  e1_awu_V = u1_V - u1_sat_V;
 8001c36:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c3a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001c3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c42:	edc7 7a06 	vstr	s15, [r7, #24]
	  e2_awu_V = u2_V - u2_sat_V;
 8001c46:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c4a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c52:	edc7 7a05 	vstr	s15, [r7, #20]

	  /* desaturate integral action */
	  u1_int_V -= Kawu * TS * e1_awu_V;
 8001c56:	4b51      	ldr	r3, [pc, #324]	; (8001d9c <StartMotorControlTask+0x514>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001c60:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <StartMotorControlTask+0x520>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c6a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8001d70 <StartMotorControlTask+0x4e8>
 8001c6e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001c7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001c82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c86:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <StartMotorControlTask+0x514>)
 8001c88:	edc3 7a00 	vstr	s15, [r3]
	  u2_int_V -= Kawu * TS * e2_awu_V;
 8001c8c:	4b45      	ldr	r3, [pc, #276]	; (8001da4 <StartMotorControlTask+0x51c>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001c96:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <StartMotorControlTask+0x520>)
 8001c98:	edd3 7a00 	vldr	s15, [r3]
 8001c9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ca0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8001d70 <StartMotorControlTask+0x4e8>
 8001ca4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001ca8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cb0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001cb4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001cb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cbc:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <StartMotorControlTask+0x51c>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]

	  /* get saturated PI outputs [duty]  */
	  u1_sat_duty = V2DUTY * u1_sat_V;
 8001cc2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001cc6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001dac <StartMotorControlTask+0x524>
 8001cca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cce:	edc7 7a04 	vstr	s15, [r7, #16]
	  u2_sat_duty = V2DUTY * u2_sat_V;
 8001cd2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001cd6:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001dac <StartMotorControlTask+0x524>
 8001cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cde:	edc7 7a03 	vstr	s15, [r7, #12]

	  if (u1_sat_duty >= 0)
 8001ce2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	db12      	blt.n	8001d16 <StartMotorControlTask+0x48e>
	  {
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)TIM8_ARR_VALUE);
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <StartMotorControlTask+0x528>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f240 128f 	movw	r2, #399	; 0x18f
 8001cf8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)(TIM8_ARR_VALUE - u1_sat_duty));
 8001cfa:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001db4 <StartMotorControlTask+0x52c>
 8001cfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d06:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <StartMotorControlTask+0x528>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d0e:	ee17 2a90 	vmov	r2, s15
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
 8001d14:	e011      	b.n	8001d3a <StartMotorControlTask+0x4b2>
	  }
	  else
	  {
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)TIM8_ARR_VALUE);
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <StartMotorControlTask+0x528>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f240 128f 	movw	r2, #399	; 0x18f
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)(TIM8_ARR_VALUE + u1_sat_duty));
 8001d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d24:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001db4 <StartMotorControlTask+0x52c>
 8001d28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <StartMotorControlTask+0x528>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d34:	ee17 2a90 	vmov	r2, s15
 8001d38:	635a      	str	r2, [r3, #52]	; 0x34
	  }
	  if (u2_sat_duty >= 0)
 8001d3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	db37      	blt.n	8001db8 <StartMotorControlTask+0x530>
	  {
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)TIM8_ARR_VALUE);
 8001d48:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <StartMotorControlTask+0x528>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f240 128f 	movw	r2, #399	; 0x18f
 8001d50:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)(TIM8_ARR_VALUE - u2_sat_duty));
 8001d52:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001db4 <StartMotorControlTask+0x52c>
 8001d56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <StartMotorControlTask+0x528>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d66:	ee17 2a90 	vmov	r2, s15
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6c:	e036      	b.n	8001ddc <StartMotorControlTask+0x554>
 8001d6e:	bf00      	nop
 8001d70:	47ae147b 	.word	0x47ae147b
 8001d74:	3f847ae1 	.word	0x3f847ae1
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	404e0000 	.word	0x404e0000
 8001d80:	f37bebd5 	.word	0xf37bebd5
 8001d84:	3fbacee9 	.word	0x3fbacee9
 8001d88:	20000054 	.word	0x20000054
 8001d8c:	45700000 	.word	0x45700000
 8001d90:	20004b94 	.word	0x20004b94
 8001d94:	2000496c 	.word	0x2000496c
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000058 	.word	0x20000058
 8001da0:	20000004 	.word	0x20000004
 8001da4:	2000005c 	.word	0x2000005c
 8001da8:	20000008 	.word	0x20000008
 8001dac:	42478000 	.word	0x42478000
 8001db0:	20004978 	.word	0x20004978
 8001db4:	43c78000 	.word	0x43c78000
	  }
	  else
	  {
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)TIM8_ARR_VALUE);
 8001db8:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <StartMotorControlTask+0x568>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f240 128f 	movw	r2, #399	; 0x18f
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
		  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)(TIM8_ARR_VALUE + u2_sat_duty));
 8001dc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001df4 <StartMotorControlTask+0x56c>
 8001dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dce:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <StartMotorControlTask+0x568>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd6:	ee17 2a90 	vmov	r2, s15
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
	  }

	  /*  update previous values of encoder counts  */
	  TIM3_PreviousCount = TIM3_CurrentCount;
 8001ddc:	4a06      	ldr	r2, [pc, #24]	; (8001df8 <StartMotorControlTask+0x570>)
 8001dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001de0:	6013      	str	r3, [r2, #0]
	  TIM4_PreviousCount = TIM4_CurrentCount;
 8001de2:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <StartMotorControlTask+0x574>)
 8001de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001de6:	6013      	str	r3, [r2, #0]

	  osDelayUntil(10); // should not be necessary if we use semaphore as it will wait the line task to complete before executing
 8001de8:	200a      	movs	r0, #10
 8001dea:	f005 fe37 	bl	8007a5c <osDelayUntil>
  {
 8001dee:	e54f      	b.n	8001890 <StartMotorControlTask+0x8>
 8001df0:	20004978 	.word	0x20004978
 8001df4:	43c78000 	.word	0x43c78000
 8001df8:	20000050 	.word	0x20000050
 8001dfc:	20000054 	.word	0x20000054

08001e00 <StartLineTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLineTask */
void StartLineTask(void *argument)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b096      	sub	sp, #88	; 0x58
 8001e04:	af04      	add	r7, sp, #16
 8001e06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLineTask */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t sensor_data;
	  status = HAL_I2C_Mem_Read(&hi2c1, SX1509_I2C_ADDR1 << 1, REG_DATA_B, 1, &sensor_data, 1, I2C_TIMEOUT);
 8001e08:	23c8      	movs	r3, #200	; 0xc8
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	2210      	movs	r2, #16
 8001e1a:	217c      	movs	r1, #124	; 0x7c
 8001e1c:	483e      	ldr	r0, [pc, #248]	; (8001f18 <StartLineTask+0x118>)
 8001e1e:	f001 fd23 	bl	8003868 <HAL_I2C_Mem_Read>
 8001e22:	4603      	mov	r3, r0
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b3d      	ldr	r3, [pc, #244]	; (8001f1c <StartLineTask+0x11c>)
 8001e28:	701a      	strb	r2, [r3, #0]
	  uint8_t b_n[8];
	  uint8_to_bin_digit(sensor_data, b_n);
 8001e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e2e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fc22 	bl	800067e <uint8_to_bin_digit>
	  float w_n[8];
	  float num_f = 0;
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	647b      	str	r3, [r7, #68]	; 0x44
	  float den_f = 0;
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	643b      	str	r3, [r7, #64]	; 0x40
	  for (int i = 0; i < 8; i++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e4a:	e012      	b.n	8001e72 <StartLineTask+0x72>
	  {
		  w_n[i] = (7 / 2 - i) * 4; // 4mm is distance between two sensors/ Output is in mm
 8001e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e4e:	f1c3 0303 	rsb	r3, r3, #3
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	ee07 3a90 	vmov	s15, r3
 8001e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e64:	4413      	add	r3, r2
 8001e66:	3b3c      	subs	r3, #60	; 0x3c
 8001e68:	edc3 7a00 	vstr	s15, [r3]
	  for (int i = 0; i < 8; i++)
 8001e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6e:	3301      	adds	r3, #1
 8001e70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e74:	2b07      	cmp	r3, #7
 8001e76:	dde9      	ble.n	8001e4c <StartLineTask+0x4c>
	  }

	  for (int i = 0; i <= 7; i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e7c:	e02a      	b.n	8001ed4 <StartLineTask+0xd4>
	  {
		  num_f += b_n[i] * w_n[i];
 8001e7e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e84:	4413      	add	r3, r2
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	ee07 3a90 	vmov	s15, r3
 8001e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b3c      	subs	r3, #60	; 0x3c
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		  den_f += b_n[i];
 8001eb0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb6:	4413      	add	r3, r2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	  for (int i = 0; i <= 7; i++)
 8001ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ed6:	2b07      	cmp	r3, #7
 8001ed8:	ddd1      	ble.n	8001e7e <StartLineTask+0x7e>
	  }
	  if (den_f == 0)
 8001eda:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ede:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d104      	bne.n	8001ef2 <StartLineTask+0xf2>
		  error = 0;
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <StartLineTask+0x120>)
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	e008      	b.n	8001f04 <StartLineTask+0x104>
	  else
		  error = num_f / den_f;
 8001ef2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8001ef6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <StartLineTask+0x120>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]
	  osSemaphoreRelease(binarySemSyncHandle); // Should release the semaphore so MotorControlTask can start
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <StartLineTask+0x124>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f005 ff85 	bl	8007e18 <osSemaphoreRelease>
	  osDelayUntil(10);
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f005 fda4 	bl	8007a5c <osDelayUntil>
  {
 8001f14:	e778      	b.n	8001e08 <StartLineTask+0x8>
 8001f16:	bf00      	nop
 8001f18:	20004a78 	.word	0x20004a78
 8001f1c:	20004fec 	.word	0x20004fec
 8001f20:	2000004c 	.word	0x2000004c
 8001f24:	20004b90 	.word	0x20004b90

08001f28 <StartCommTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommTask */
void StartCommTask(void *argument)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommTask */
  /* Infinite loop */
  for(;;)
  {
	  /* Prepare data packet */
	  data.w1 = W_l;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <StartCommTask+0x48>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <StartCommTask+0x4c>)
 8001f36:	601a      	str	r2, [r3, #0]
	  data.w2 = W_r;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <StartCommTask+0x50>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <StartCommTask+0x4c>)
 8001f3e:	605a      	str	r2, [r3, #4]
	  data.u1 = u1_sat_V;
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <StartCommTask+0x54>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <StartCommTask+0x4c>)
 8001f46:	609a      	str	r2, [r3, #8]
	  data.u2 = u2_sat_V;
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <StartCommTask+0x58>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <StartCommTask+0x4c>)
 8001f4e:	60da      	str	r2, [r3, #12]
	  data.err = error;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <StartCommTask+0x5c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <StartCommTask+0x4c>)
 8001f56:	611a      	str	r2, [r3, #16]

	  ertc_dlog_update(&logger);
 8001f58:	480b      	ldr	r0, [pc, #44]	; (8001f88 <StartCommTask+0x60>)
 8001f5a:	f7fe fb67 	bl	800062c <ertc_dlog_update>
	  ertc_dlog_send(&logger, &data, sizeof(data));
 8001f5e:	2214      	movs	r2, #20
 8001f60:	4904      	ldr	r1, [pc, #16]	; (8001f74 <StartCommTask+0x4c>)
 8001f62:	4809      	ldr	r0, [pc, #36]	; (8001f88 <StartCommTask+0x60>)
 8001f64:	f7fe fb36 	bl	80005d4 <ertc_dlog_send>
	  osDelayUntil(10);
 8001f68:	200a      	movs	r0, #10
 8001f6a:	f005 fd77 	bl	8007a5c <osDelayUntil>
	  data.w1 = W_l;
 8001f6e:	e7df      	b.n	8001f30 <StartCommTask+0x8>
 8001f70:	2000496c 	.word	0x2000496c
 8001f74:	20004da8 	.word	0x20004da8
 8001f78:	20004b94 	.word	0x20004b94
 8001f7c:	20004da4 	.word	0x20004da4
 8001f80:	20004ff0 	.word	0x20004ff0
 8001f84:	2000004c 	.word	0x2000004c
 8001f88:	20004ce0 	.word	0x20004ce0

08001f8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f9e:	f000 fd4f 	bl	8002a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40001000 	.word	0x40001000

08001fb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <Error_Handler+0x6>

08001fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_MspInit+0x4c>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a10      	ldr	r2, [pc, #64]	; (8002004 <HAL_MspInit+0x4c>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_MspInit+0x4c>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_MspInit+0x4c>)
 8001fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_MspInit+0x4c>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	210f      	movs	r1, #15
 8001ff2:	f06f 0001 	mvn.w	r0, #1
 8001ff6:	f001 f8a5 	bl	8003144 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a15      	ldr	r2, [pc, #84]	; (800207c <HAL_ADC_MspInit+0x74>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d123      	bne.n	8002072 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_ADC_MspInit+0x78>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_ADC_MspInit+0x78>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = ADC1_IN3_IR_DIST_SENS_Pin;
 800205a:	2308      	movs	r3, #8
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205e:	2303      	movs	r3, #3
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN3_IR_DIST_SENS_GPIO_Port, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	4805      	ldr	r0, [pc, #20]	; (8002084 <HAL_ADC_MspInit+0x7c>)
 800206e:	f001 f893 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002072:	bf00      	nop
 8002074:	3728      	adds	r7, #40	; 0x28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40012000 	.word	0x40012000
 8002080:	40023800 	.word	0x40023800
 8002084:	40020000 	.word	0x40020000

08002088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a2e      	ldr	r2, [pc, #184]	; (8002160 <HAL_I2C_MspInit+0xd8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d129      	bne.n	80020fe <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a2d      	ldr	r2, [pc, #180]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c8:	2312      	movs	r3, #18
 80020ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020cc:	2301      	movs	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d4:	2304      	movs	r3, #4
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4822      	ldr	r0, [pc, #136]	; (8002168 <HAL_I2C_MspInit+0xe0>)
 80020e0:	f001 f85a 	bl	8003198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e4:	4b1f      	ldr	r3, [pc, #124]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 80020ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020ee:	6413      	str	r3, [r2, #64]	; 0x40
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020fc:	e02c      	b.n	8002158 <HAL_I2C_MspInit+0xd0>
  else if(hi2c->Instance==I2C2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1a      	ldr	r2, [pc, #104]	; (800216c <HAL_I2C_MspInit+0xe4>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d127      	bne.n	8002158 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 800210e:	f043 0320 	orr.w	r3, r3, #32
 8002112:	6313      	str	r3, [r2, #48]	; 0x30
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002120:	2303      	movs	r3, #3
 8002122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002124:	2312      	movs	r3, #18
 8002126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002128:	2301      	movs	r3, #1
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212c:	2303      	movs	r3, #3
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002130:	2304      	movs	r3, #4
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4619      	mov	r1, r3
 800213a:	480d      	ldr	r0, [pc, #52]	; (8002170 <HAL_I2C_MspInit+0xe8>)
 800213c:	f001 f82c 	bl	8003198 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 8002146:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_I2C_MspInit+0xdc>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	bf00      	nop
 800215a:	3730      	adds	r7, #48	; 0x30
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40005400 	.word	0x40005400
 8002164:	40023800 	.word	0x40023800
 8002168:	40020400 	.word	0x40020400
 800216c:	40005800 	.word	0x40005800
 8002170:	40021400 	.word	0x40021400

08002174 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a33      	ldr	r2, [pc, #204]	; (8002260 <HAL_SPI_MspInit+0xec>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d160      	bne.n	8002258 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a32      	ldr	r2, [pc, #200]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 800219c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a2c      	ldr	r2, [pc, #176]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c6:	4b27      	ldr	r3, [pc, #156]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	4a26      	ldr	r2, [pc, #152]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6313      	str	r3, [r2, #48]	; 0x30
 80021d2:	4b24      	ldr	r3, [pc, #144]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021de:	4b21      	ldr	r3, [pc, #132]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <HAL_SPI_MspInit+0xf0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021f6:	2320      	movs	r3, #32
 80021f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002206:	2305      	movs	r3, #5
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 031c 	add.w	r3, r7, #28
 800220e:	4619      	mov	r1, r3
 8002210:	4815      	ldr	r0, [pc, #84]	; (8002268 <HAL_SPI_MspInit+0xf4>)
 8002212:	f000 ffc1 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002226:	2305      	movs	r3, #5
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	480e      	ldr	r0, [pc, #56]	; (800226c <HAL_SPI_MspInit+0xf8>)
 8002232:	f000 ffb1 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002244:	2303      	movs	r3, #3
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002248:	2305      	movs	r3, #5
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800224c:	f107 031c 	add.w	r3, r7, #28
 8002250:	4619      	mov	r1, r3
 8002252:	4807      	ldr	r0, [pc, #28]	; (8002270 <HAL_SPI_MspInit+0xfc>)
 8002254:	f000 ffa0 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002258:	bf00      	nop
 800225a:	3730      	adds	r7, #48	; 0x30
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40013000 	.word	0x40013000
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021800 	.word	0x40021800

08002274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 031c 	add.w	r3, r7, #28
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a32      	ldr	r2, [pc, #200]	; (800235c <HAL_TIM_Base_MspInit+0xe8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d10c      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229a:	4a31      	ldr	r2, [pc, #196]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6453      	str	r3, [r2, #68]	; 0x44
 80022a2:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80022ae:	e051      	b.n	8002354 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d129      	bne.n	800230e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a28      	ldr	r2, [pc, #160]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b26      	ldr	r3, [pc, #152]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	4b23      	ldr	r3, [pc, #140]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a22      	ldr	r2, [pc, #136]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM2_CH3_HCSR04_ECHO_Pin;
 80022ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH3_HCSR04_ECHO_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	4619      	mov	r1, r3
 8002306:	4817      	ldr	r0, [pc, #92]	; (8002364 <HAL_TIM_Base_MspInit+0xf0>)
 8002308:	f000 ff46 	bl	8003198 <HAL_GPIO_Init>
}
 800230c:	e022      	b.n	8002354 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM5)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_TIM_Base_MspInit+0xf4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d10c      	bne.n	8002332 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	6413      	str	r3, [r2, #64]	; 0x40
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	e010      	b.n	8002354 <HAL_TIM_Base_MspInit+0xe0>
  else if(htim_base->Instance==TIM8)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a0d      	ldr	r2, [pc, #52]	; (800236c <HAL_TIM_Base_MspInit+0xf8>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d10b      	bne.n	8002354 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	6453      	str	r3, [r2, #68]	; 0x44
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_TIM_Base_MspInit+0xec>)
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
}
 8002354:	bf00      	nop
 8002356:	3730      	adds	r7, #48	; 0x30
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40010000 	.word	0x40010000
 8002360:	40023800 	.word	0x40023800
 8002364:	40020400 	.word	0x40020400
 8002368:	40000c00 	.word	0x40000c00
 800236c:	40010400 	.word	0x40010400

08002370 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <HAL_TIM_Encoder_MspInit+0xd8>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d128      	bne.n	80023e4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002392:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a2d      	ldr	r2, [pc, #180]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023aa:	4b28      	ldr	r3, [pc, #160]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a27      	ldr	r2, [pc, #156]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b25      	ldr	r3, [pc, #148]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = TIM3_CH1_ENC1A_Pin|TIM3_CH2_ENC1B_Pin;
 80023c2:	2330      	movs	r3, #48	; 0x30
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023d2:	2302      	movs	r3, #2
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	4619      	mov	r1, r3
 80023dc:	481c      	ldr	r0, [pc, #112]	; (8002450 <HAL_TIM_Encoder_MspInit+0xe0>)
 80023de:	f000 fedb 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023e2:	e02d      	b.n	8002440 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <HAL_TIM_Encoder_MspInit+0xe4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d128      	bne.n	8002440 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a16      	ldr	r2, [pc, #88]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a10      	ldr	r2, [pc, #64]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_TIM_Encoder_MspInit+0xdc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM4_CH1_ENC2A_Pin|TIM4_CH2_ENC2B_Pin;
 800241e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002424:	2302      	movs	r3, #2
 8002426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002430:	2302      	movs	r3, #2
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4619      	mov	r1, r3
 800243a:	4807      	ldr	r0, [pc, #28]	; (8002458 <HAL_TIM_Encoder_MspInit+0xe8>)
 800243c:	f000 feac 	bl	8003198 <HAL_GPIO_Init>
}
 8002440:	bf00      	nop
 8002442:	3730      	adds	r7, #48	; 0x30
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40000400 	.word	0x40000400
 800244c:	40023800 	.word	0x40023800
 8002450:	40020400 	.word	0x40020400
 8002454:	40000800 	.word	0x40000800
 8002458:	40020c00 	.word	0x40020c00

0800245c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_TIM_PWM_MspInit+0x38>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10b      	bne.n	8002486 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_TIM_PWM_MspInit+0x3c>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_TIM_PWM_MspInit+0x3c>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <HAL_TIM_PWM_MspInit+0x3c>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40014000 	.word	0x40014000
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a56      	ldr	r2, [pc, #344]	; (8002614 <HAL_TIM_MspPostInit+0x178>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d11d      	bne.n	80024fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024be:	4b56      	ldr	r3, [pc, #344]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a55      	ldr	r2, [pc, #340]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 80024c4:	f043 0310 	orr.w	r3, r3, #16
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0310 	and.w	r3, r3, #16
 80024d2:	61bb      	str	r3, [r7, #24]
 80024d4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = TIM1_CH1_SERVO1_Pin|TIM1_CH2_SERVO2_Pin|TIM1_CH3_SERVO3_Pin|TIM1_CH4_SERVO4_Pin;
 80024d6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	2302      	movs	r3, #2
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024e8:	2301      	movs	r3, #1
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	4619      	mov	r1, r3
 80024f2:	484a      	ldr	r0, [pc, #296]	; (800261c <HAL_TIM_MspPostInit+0x180>)
 80024f4:	f000 fe50 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80024f8:	e088      	b.n	800260c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002502:	d11d      	bne.n	8002540 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	4a43      	ldr	r2, [pc, #268]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6313      	str	r3, [r2, #48]	; 0x30
 8002510:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM2_CH1_HCSR04_TRIG_Pin;
 800251c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800252e:	2301      	movs	r3, #1
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM2_CH1_HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 8002532:	f107 031c 	add.w	r3, r7, #28
 8002536:	4619      	mov	r1, r3
 8002538:	4839      	ldr	r0, [pc, #228]	; (8002620 <HAL_TIM_MspPostInit+0x184>)
 800253a:	f000 fe2d 	bl	8003198 <HAL_GPIO_Init>
}
 800253e:	e065      	b.n	800260c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM5)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a37      	ldr	r2, [pc, #220]	; (8002624 <HAL_TIM_MspPostInit+0x188>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d11c      	bne.n	8002584 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	4b33      	ldr	r3, [pc, #204]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	4a32      	ldr	r2, [pc, #200]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b30      	ldr	r3, [pc, #192]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = TIM5_CH1_BUZZ_Pin;
 8002562:	2301      	movs	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002566:	2302      	movs	r3, #2
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002572:	2302      	movs	r3, #2
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TIM5_CH1_BUZZ_GPIO_Port, &GPIO_InitStruct);
 8002576:	f107 031c 	add.w	r3, r7, #28
 800257a:	4619      	mov	r1, r3
 800257c:	4828      	ldr	r0, [pc, #160]	; (8002620 <HAL_TIM_MspPostInit+0x184>)
 800257e:	f000 fe0b 	bl	8003198 <HAL_GPIO_Init>
}
 8002582:	e043      	b.n	800260c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM8)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a27      	ldr	r2, [pc, #156]	; (8002628 <HAL_TIM_MspPostInit+0x18c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d11d      	bne.n	80025ca <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a21      	ldr	r2, [pc, #132]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b1f      	ldr	r3, [pc, #124]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM8_CH1_MOT1A_Pin|TIM8_CH2_MOT1B_Pin|TIM8_CH3_MOT2A_Pin|TIM8_CH4_MOT2B_Pin;
 80025a6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025b8:	2303      	movs	r3, #3
 80025ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	481a      	ldr	r0, [pc, #104]	; (800262c <HAL_TIM_MspPostInit+0x190>)
 80025c4:	f000 fde8 	bl	8003198 <HAL_GPIO_Init>
}
 80025c8:	e020      	b.n	800260c <HAL_TIM_MspPostInit+0x170>
  else if(htim->Instance==TIM9)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a18      	ldr	r2, [pc, #96]	; (8002630 <HAL_TIM_MspPostInit+0x194>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d11b      	bne.n	800260c <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d4:	4b10      	ldr	r3, [pc, #64]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 80025da:	f043 0310 	orr.w	r3, r3, #16
 80025de:	6313      	str	r3, [r2, #48]	; 0x30
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <HAL_TIM_MspPostInit+0x17c>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM9_CH1_USER_LED1_Pin|TIM9_CH2_USER_LED2_Pin;
 80025ec:	2360      	movs	r3, #96	; 0x60
 80025ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025fc:	2303      	movs	r3, #3
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002600:	f107 031c 	add.w	r3, r7, #28
 8002604:	4619      	mov	r1, r3
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <HAL_TIM_MspPostInit+0x180>)
 8002608:	f000 fdc6 	bl	8003198 <HAL_GPIO_Init>
}
 800260c:	bf00      	nop
 800260e:	3730      	adds	r7, #48	; 0x30
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40010000 	.word	0x40010000
 8002618:	40023800 	.word	0x40023800
 800261c:	40021000 	.word	0x40021000
 8002620:	40020000 	.word	0x40020000
 8002624:	40000c00 	.word	0x40000c00
 8002628:	40010400 	.word	0x40010400
 800262c:	40020800 	.word	0x40020800
 8002630:	40014000 	.word	0x40014000

08002634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b092      	sub	sp, #72	; 0x48
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a8b      	ldr	r2, [pc, #556]	; (8002880 <HAL_UART_MspInit+0x24c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d129      	bne.n	80026aa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	4a8a      	ldr	r2, [pc, #552]	; (8002884 <HAL_UART_MspInit+0x250>)
 800265c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002660:	6413      	str	r3, [r2, #64]	; 0x40
 8002662:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
 800266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266e:	4b85      	ldr	r3, [pc, #532]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	4a84      	ldr	r2, [pc, #528]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6313      	str	r3, [r2, #48]	; 0x30
 800267a:	4b82      	ldr	r3, [pc, #520]	; (8002884 <HAL_UART_MspInit+0x250>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_LCD_Pin|UART4_RX_LCD_Pin;
 8002686:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800268a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002698:	2308      	movs	r3, #8
 800269a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026a0:	4619      	mov	r1, r3
 80026a2:	4879      	ldr	r0, [pc, #484]	; (8002888 <HAL_UART_MspInit+0x254>)
 80026a4:	f000 fd78 	bl	8003198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80026a8:	e0e6      	b.n	8002878 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==UART5)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_UART_MspInit+0x258>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d146      	bne.n	8002742 <HAL_UART_MspInit+0x10e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80026b4:	4b73      	ldr	r3, [pc, #460]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	4a72      	ldr	r2, [pc, #456]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026be:	6413      	str	r3, [r2, #64]	; 0x40
 80026c0:	4b70      	ldr	r3, [pc, #448]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026cc:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a6c      	ldr	r2, [pc, #432]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	6313      	str	r3, [r2, #48]	; 0x30
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e4:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6313      	str	r3, [r2, #48]	; 0x30
 80026f0:	4b64      	ldr	r3, [pc, #400]	; (8002884 <HAL_UART_MspInit+0x250>)
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002702:	2302      	movs	r3, #2
 8002704:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800270e:	2308      	movs	r3, #8
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002716:	4619      	mov	r1, r3
 8002718:	485d      	ldr	r0, [pc, #372]	; (8002890 <HAL_UART_MspInit+0x25c>)
 800271a:	f000 fd3d 	bl	8003198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002722:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272c:	2303      	movs	r3, #3
 800272e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002730:	2308      	movs	r3, #8
 8002732:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002738:	4619      	mov	r1, r3
 800273a:	4853      	ldr	r0, [pc, #332]	; (8002888 <HAL_UART_MspInit+0x254>)
 800273c:	f000 fd2c 	bl	8003198 <HAL_GPIO_Init>
}
 8002740:	e09a      	b.n	8002878 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART1)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a53      	ldr	r2, [pc, #332]	; (8002894 <HAL_UART_MspInit+0x260>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d139      	bne.n	80027c0 <HAL_UART_MspInit+0x18c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_UART_MspInit+0x250>)
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002752:	f043 0310 	orr.w	r3, r3, #16
 8002756:	6453      	str	r3, [r2, #68]	; 0x44
 8002758:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <HAL_UART_MspInit+0x250>)
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4a46      	ldr	r2, [pc, #280]	; (8002884 <HAL_UART_MspInit+0x250>)
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	6313      	str	r3, [r2, #48]	; 0x30
 8002770:	4b44      	ldr	r3, [pc, #272]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800277c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002782:	2302      	movs	r3, #2
 8002784:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002786:	2300      	movs	r3, #0
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278a:	2303      	movs	r3, #3
 800278c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800278e:	2304      	movs	r3, #4
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002796:	4619      	mov	r1, r3
 8002798:	483d      	ldr	r0, [pc, #244]	; (8002890 <HAL_UART_MspInit+0x25c>)
 800279a:	f000 fcfd 	bl	8003198 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800279e:	2340      	movs	r3, #64	; 0x40
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ae:	2307      	movs	r3, #7
 80027b0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027b6:	4619      	mov	r1, r3
 80027b8:	4835      	ldr	r0, [pc, #212]	; (8002890 <HAL_UART_MspInit+0x25c>)
 80027ba:	f000 fced 	bl	8003198 <HAL_GPIO_Init>
}
 80027be:	e05b      	b.n	8002878 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a34      	ldr	r2, [pc, #208]	; (8002898 <HAL_UART_MspInit+0x264>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d128      	bne.n	800281c <HAL_UART_MspInit+0x1e8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ca:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <HAL_UART_MspInit+0x250>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a2d      	ldr	r2, [pc, #180]	; (8002884 <HAL_UART_MspInit+0x250>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_UART_MspInit+0x250>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <HAL_UART_MspInit+0x250>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	4a27      	ldr	r2, [pc, #156]	; (8002884 <HAL_UART_MspInit+0x250>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	6313      	str	r3, [r2, #48]	; 0x30
 80027ee:	4b25      	ldr	r3, [pc, #148]	; (8002884 <HAL_UART_MspInit+0x250>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027fa:	2360      	movs	r3, #96	; 0x60
 80027fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fe:	2302      	movs	r3, #2
 8002800:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002802:	2300      	movs	r3, #0
 8002804:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800280a:	2307      	movs	r3, #7
 800280c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800280e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002812:	4619      	mov	r1, r3
 8002814:	4821      	ldr	r0, [pc, #132]	; (800289c <HAL_UART_MspInit+0x268>)
 8002816:	f000 fcbf 	bl	8003198 <HAL_GPIO_Init>
}
 800281a:	e02d      	b.n	8002878 <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART3)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <HAL_UART_MspInit+0x26c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d128      	bne.n	8002878 <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002826:	4b17      	ldr	r3, [pc, #92]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	4a16      	ldr	r2, [pc, #88]	; (8002884 <HAL_UART_MspInit+0x250>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6413      	str	r3, [r2, #64]	; 0x40
 8002832:	4b14      	ldr	r3, [pc, #80]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800283e:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a10      	ldr	r2, [pc, #64]	; (8002884 <HAL_UART_MspInit+0x250>)
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_UART_MspInit+0x250>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002856:	f44f 7340 	mov.w	r3, #768	; 0x300
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002864:	2303      	movs	r3, #3
 8002866:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002868:	2307      	movs	r3, #7
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800286c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002870:	4619      	mov	r1, r3
 8002872:	480a      	ldr	r0, [pc, #40]	; (800289c <HAL_UART_MspInit+0x268>)
 8002874:	f000 fc90 	bl	8003198 <HAL_GPIO_Init>
}
 8002878:	bf00      	nop
 800287a:	3748      	adds	r7, #72	; 0x48
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40004c00 	.word	0x40004c00
 8002884:	40023800 	.word	0x40023800
 8002888:	40020800 	.word	0x40020800
 800288c:	40005000 	.word	0x40005000
 8002890:	40020400 	.word	0x40020400
 8002894:	40011000 	.word	0x40011000
 8002898:	40004400 	.word	0x40004400
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	40004800 	.word	0x40004800

080028a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b08c      	sub	sp, #48	; 0x30
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80028b4:	2200      	movs	r2, #0
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	2036      	movs	r0, #54	; 0x36
 80028ba:	f000 fc43 	bl	8003144 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028be:	2036      	movs	r0, #54	; 0x36
 80028c0:	f000 fc5c 	bl	800317c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <HAL_InitTick+0xa0>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_InitTick+0xa0>)
 80028ca:	f043 0310 	orr.w	r3, r3, #16
 80028ce:	6413      	str	r3, [r2, #64]	; 0x40
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <HAL_InitTick+0xa0>)
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028dc:	f107 0210 	add.w	r2, r7, #16
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4611      	mov	r1, r2
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 f892 	bl	8004a10 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80028ec:	f002 f868 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 80028f0:	4603      	mov	r3, r0
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80028f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <HAL_InitTick+0xa4>)
 80028fa:	fba2 2303 	umull	r2, r3, r2, r3
 80028fe:	0c9b      	lsrs	r3, r3, #18
 8002900:	3b01      	subs	r3, #1
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_InitTick+0xa8>)
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_InitTick+0xac>)
 8002908:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_InitTick+0xa8>)
 800290c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002910:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002912:	4a0e      	ldr	r2, [pc, #56]	; (800294c <HAL_InitTick+0xa8>)
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <HAL_InitTick+0xa8>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <HAL_InitTick+0xa8>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002924:	4809      	ldr	r0, [pc, #36]	; (800294c <HAL_InitTick+0xa8>)
 8002926:	f002 fd5d 	bl	80053e4 <HAL_TIM_Base_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002930:	4806      	ldr	r0, [pc, #24]	; (800294c <HAL_InitTick+0xa8>)
 8002932:	f002 fd83 	bl	800543c <HAL_TIM_Base_Start_IT>
 8002936:	4603      	mov	r3, r0
 8002938:	e000      	b.n	800293c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
}
 800293c:	4618      	mov	r0, r3
 800293e:	3730      	adds	r7, #48	; 0x30
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	431bde83 	.word	0x431bde83
 800294c:	20004ff4 	.word	0x20004ff4
 8002950:	40001000 	.word	0x40001000

08002954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002958:	e7fe      	b.n	8002958 <NMI_Handler+0x4>

0800295a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800295a:	b480      	push	{r7}
 800295c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800295e:	e7fe      	b.n	800295e <HardFault_Handler+0x4>

08002960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002964:	e7fe      	b.n	8002964 <MemManage_Handler+0x4>

08002966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800296a:	e7fe      	b.n	800296a <BusFault_Handler+0x4>

0800296c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002970:	e7fe      	b.n	8002970 <UsageFault_Handler+0x4>

08002972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <TIM6_DAC_IRQHandler+0x10>)
 8002986:	f002 ff26 	bl	80057d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20004ff4 	.word	0x20004ff4

08002994 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002998:	4b08      	ldr	r3, [pc, #32]	; (80029bc <SystemInit+0x28>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <SystemInit+0x28>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <SystemInit+0x28>)
 80029aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029ae:	609a      	str	r2, [r3, #8]
#endif
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80029c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029c6:	e003      	b.n	80029d0 <LoopCopyDataInit>

080029c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80029ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029ce:	3104      	adds	r1, #4

080029d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80029d0:	480b      	ldr	r0, [pc, #44]	; (8002a00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80029d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029d8:	d3f6      	bcc.n	80029c8 <CopyDataInit>
  ldr  r2, =_sbss
 80029da:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80029dc:	e002      	b.n	80029e4 <LoopFillZerobss>

080029de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80029de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80029e0:	f842 3b04 	str.w	r3, [r2], #4

080029e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80029e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80029e8:	d3f9      	bcc.n	80029de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029ea:	f7ff ffd3 	bl	8002994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ee:	f008 fbbd 	bl	800b16c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029f2:	f7fd fe65 	bl	80006c0 <main>
  bx  lr    
 80029f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029f8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80029fc:	0800b334 	.word	0x0800b334
  ldr  r0, =_sdata
 8002a00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a04:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8002a08:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8002a0c:	20005078 	.word	0x20005078

08002a10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a10:	e7fe      	b.n	8002a10 <ADC_IRQHandler>
	...

08002a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_Init+0x28>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <HAL_Init+0x28>)
 8002a1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a22:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a24:	2003      	movs	r0, #3
 8002a26:	f000 fb82 	bl	800312e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff ff3a 	bl	80028a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002a30:	f7ff fac2 	bl	8001fb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40023c00 	.word	0x40023c00

08002a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_IncTick+0x20>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_IncTick+0x24>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <HAL_IncTick+0x24>)
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000024 	.word	0x20000024
 8002a64:	20005034 	.word	0x20005034

08002a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_GetTick+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20005034 	.word	0x20005034

08002a80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff ffee 	bl	8002a68 <HAL_GetTick>
 8002a8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d005      	beq.n	8002aa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_Delay+0x40>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002aa6:	bf00      	nop
 8002aa8:	f7ff ffde 	bl	8002a68 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d8f7      	bhi.n	8002aa8 <HAL_Delay+0x28>
  {
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000024 	.word	0x20000024

08002ac4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e031      	b.n	8002b3e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff fa90 	bl	8002008 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <HAL_ADC_Init+0x84>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	f043 0202 	orr.w	r2, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f964 	bl	8002de0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f023 0303 	bic.w	r3, r3, #3
 8002b26:	f043 0201 	orr.w	r2, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b2e:	e001      	b.n	8002b34 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	ffffeefd 	.word	0xffffeefd

08002b4c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1c>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e12a      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x272>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d93a      	bls.n	8002bee <HAL_ADC_ConfigChannel+0xa2>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b80:	d035      	beq.n	8002bee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68d9      	ldr	r1, [r3, #12]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	3b1e      	subs	r3, #30
 8002b98:	2207      	movs	r2, #7
 8002b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a87      	ldr	r2, [pc, #540]	; (8002dcc <HAL_ADC_ConfigChannel+0x280>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68d9      	ldr	r1, [r3, #12]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	061a      	lsls	r2, r3, #24
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bc6:	e035      	b.n	8002c34 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4403      	add	r3, r0
 8002be0:	3b1e      	subs	r3, #30
 8002be2:	409a      	lsls	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bec:	e022      	b.n	8002c34 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6919      	ldr	r1, [r3, #16]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	2207      	movs	r2, #7
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	400a      	ands	r2, r1
 8002c10:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6919      	ldr	r1, [r3, #16]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	4603      	mov	r3, r0
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4403      	add	r3, r0
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b06      	cmp	r3, #6
 8002c3a:	d824      	bhi.n	8002c86 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b05      	subs	r3, #5
 8002c4e:	221f      	movs	r2, #31
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	43da      	mvns	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	400a      	ands	r2, r1
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	3b05      	subs	r3, #5
 8002c78:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	635a      	str	r2, [r3, #52]	; 0x34
 8002c84:	e04c      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d824      	bhi.n	8002cd8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b23      	subs	r3, #35	; 0x23
 8002ca0:	221f      	movs	r2, #31
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	400a      	ands	r2, r1
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b23      	subs	r3, #35	; 0x23
 8002cca:	fa00 f203 	lsl.w	r2, r0, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd6:	e023      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3b41      	subs	r3, #65	; 0x41
 8002cea:	221f      	movs	r2, #31
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4618      	mov	r0, r3
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	3b41      	subs	r3, #65	; 0x41
 8002d14:	fa00 f203 	lsl.w	r2, r0, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <HAL_ADC_ConfigChannel+0x284>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10a      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x1f4>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d32:	d105      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d34:	4b27      	ldr	r3, [pc, #156]	; (8002dd4 <HAL_ADC_ConfigChannel+0x288>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a26      	ldr	r2, [pc, #152]	; (8002dd4 <HAL_ADC_ConfigChannel+0x288>)
 8002d3a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d3e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <HAL_ADC_ConfigChannel+0x284>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d109      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x212>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b12      	cmp	r3, #18
 8002d50:	d105      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <HAL_ADC_ConfigChannel+0x288>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <HAL_ADC_ConfigChannel+0x288>)
 8002d58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d5c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <HAL_ADC_ConfigChannel+0x284>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d125      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x268>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a17      	ldr	r2, [pc, #92]	; (8002dcc <HAL_ADC_ConfigChannel+0x280>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d003      	beq.n	8002d7a <HAL_ADC_ConfigChannel+0x22e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b11      	cmp	r3, #17
 8002d78:	d11c      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_ADC_ConfigChannel+0x288>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_ADC_ConfigChannel+0x288>)
 8002d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d84:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_ADC_ConfigChannel+0x280>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d111      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_ADC_ConfigChannel+0x28c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_ADC_ConfigChannel+0x290>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0c9a      	lsrs	r2, r3, #18
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002da6:	e002      	b.n	8002dae <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f9      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	10000012 	.word	0x10000012
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	40012300 	.word	0x40012300
 8002dd8:	2000001c 	.word	0x2000001c
 8002ddc:	431bde83 	.word	0x431bde83

08002de0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002de8:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <ADC_Init+0x1ec>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <ADC_Init+0x1ec>)
 8002dee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002df2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002df4:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <ADC_Init+0x1ec>)
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4973      	ldr	r1, [pc, #460]	; (8002fcc <ADC_Init+0x1ec>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	021a      	lsls	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <ADC_Init+0x1f0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	e00f      	b.n	8002eda <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0202 	bic.w	r2, r2, #2
 8002ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	005a      	lsls	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	3b01      	subs	r3, #1
 8002f34:	035a      	lsls	r2, r3, #13
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e007      	b.n	8002f50 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	051a      	lsls	r2, r3, #20
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f92:	025a      	lsls	r2, r3, #9
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	029a      	lsls	r2, r3, #10
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40012300 	.word	0x40012300
 8002fd0:	0f000001 	.word	0x0f000001

08002fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <__NVIC_SetPriorityGrouping+0x44>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003002:	4a04      	ldr	r2, [pc, #16]	; (8003014 <__NVIC_SetPriorityGrouping+0x40>)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	60d3      	str	r3, [r2, #12]
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000ed00 	.word	0xe000ed00
 8003018:	05fa0000 	.word	0x05fa0000

0800301c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003020:	4b04      	ldr	r3, [pc, #16]	; (8003034 <__NVIC_GetPriorityGrouping+0x18>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0307 	and.w	r3, r3, #7
}
 800302a:	4618      	mov	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003046:	2b00      	cmp	r3, #0
 8003048:	db0b      	blt.n	8003062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	f003 021f 	and.w	r2, r3, #31
 8003050:	4907      	ldr	r1, [pc, #28]	; (8003070 <__NVIC_EnableIRQ+0x38>)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2001      	movs	r0, #1
 800305a:	fa00 f202 	lsl.w	r2, r0, r2
 800305e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100

08003074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	6039      	str	r1, [r7, #0]
 800307e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003084:	2b00      	cmp	r3, #0
 8003086:	db0a      	blt.n	800309e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b2da      	uxtb	r2, r3
 800308c:	490c      	ldr	r1, [pc, #48]	; (80030c0 <__NVIC_SetPriority+0x4c>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	0112      	lsls	r2, r2, #4
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	440b      	add	r3, r1
 8003098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800309c:	e00a      	b.n	80030b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4908      	ldr	r1, [pc, #32]	; (80030c4 <__NVIC_SetPriority+0x50>)
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	3b04      	subs	r3, #4
 80030ac:	0112      	lsls	r2, r2, #4
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	761a      	strb	r2, [r3, #24]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000e100 	.word	0xe000e100
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f1c3 0307 	rsb	r3, r3, #7
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	bf28      	it	cs
 80030e6:	2304      	movcs	r3, #4
 80030e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2b06      	cmp	r3, #6
 80030f0:	d902      	bls.n	80030f8 <NVIC_EncodePriority+0x30>
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3b03      	subs	r3, #3
 80030f6:	e000      	b.n	80030fa <NVIC_EncodePriority+0x32>
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43da      	mvns	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	401a      	ands	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	fa01 f303 	lsl.w	r3, r1, r3
 800311a:	43d9      	mvns	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	4313      	orrs	r3, r2
         );
}
 8003122:	4618      	mov	r0, r3
 8003124:	3724      	adds	r7, #36	; 0x24
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff ff4c 	bl	8002fd4 <__NVIC_SetPriorityGrouping>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003156:	f7ff ff61 	bl	800301c <__NVIC_GetPriorityGrouping>
 800315a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	6978      	ldr	r0, [r7, #20]
 8003162:	f7ff ffb1 	bl	80030c8 <NVIC_EncodePriority>
 8003166:	4602      	mov	r2, r0
 8003168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff ff80 	bl	8003074 <__NVIC_SetPriority>
}
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff54 	bl	8003038 <__NVIC_EnableIRQ>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	; 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e175      	b.n	80034a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031b8:	2201      	movs	r2, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f040 8164 	bne.w	800349e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d00b      	beq.n	80031f6 <HAL_GPIO_Init+0x5e>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031ea:	2b11      	cmp	r3, #17
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b12      	cmp	r3, #18
 80031f4:	d130      	bne.n	8003258 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 0201 	and.w	r2, r3, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x100>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b12      	cmp	r3, #18
 8003296:	d123      	bne.n	80032e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	08da      	lsrs	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3208      	adds	r2, #8
 80032a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	220f      	movs	r2, #15
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0203 	and.w	r2, r3, #3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80be 	beq.w	800349e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <HAL_GPIO_Init+0x320>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	4a64      	ldr	r2, [pc, #400]	; (80034b8 <HAL_GPIO_Init+0x320>)
 8003328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332c:	6453      	str	r3, [r2, #68]	; 0x44
 800332e:	4b62      	ldr	r3, [pc, #392]	; (80034b8 <HAL_GPIO_Init+0x320>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800333a:	4a60      	ldr	r2, [pc, #384]	; (80034bc <HAL_GPIO_Init+0x324>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_GPIO_Init+0x328>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d037      	beq.n	80033d6 <HAL_GPIO_Init+0x23e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a56      	ldr	r2, [pc, #344]	; (80034c4 <HAL_GPIO_Init+0x32c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d031      	beq.n	80033d2 <HAL_GPIO_Init+0x23a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a55      	ldr	r2, [pc, #340]	; (80034c8 <HAL_GPIO_Init+0x330>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02b      	beq.n	80033ce <HAL_GPIO_Init+0x236>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a54      	ldr	r2, [pc, #336]	; (80034cc <HAL_GPIO_Init+0x334>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d025      	beq.n	80033ca <HAL_GPIO_Init+0x232>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a53      	ldr	r2, [pc, #332]	; (80034d0 <HAL_GPIO_Init+0x338>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01f      	beq.n	80033c6 <HAL_GPIO_Init+0x22e>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a52      	ldr	r2, [pc, #328]	; (80034d4 <HAL_GPIO_Init+0x33c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d019      	beq.n	80033c2 <HAL_GPIO_Init+0x22a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a51      	ldr	r2, [pc, #324]	; (80034d8 <HAL_GPIO_Init+0x340>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_GPIO_Init+0x226>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a50      	ldr	r2, [pc, #320]	; (80034dc <HAL_GPIO_Init+0x344>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00d      	beq.n	80033ba <HAL_GPIO_Init+0x222>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4f      	ldr	r2, [pc, #316]	; (80034e0 <HAL_GPIO_Init+0x348>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <HAL_GPIO_Init+0x21e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4e      	ldr	r2, [pc, #312]	; (80034e4 <HAL_GPIO_Init+0x34c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_GPIO_Init+0x21a>
 80033ae:	2309      	movs	r3, #9
 80033b0:	e012      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033b2:	230a      	movs	r3, #10
 80033b4:	e010      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033b6:	2308      	movs	r3, #8
 80033b8:	e00e      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ba:	2307      	movs	r3, #7
 80033bc:	e00c      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033be:	2306      	movs	r3, #6
 80033c0:	e00a      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033c2:	2305      	movs	r3, #5
 80033c4:	e008      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033c6:	2304      	movs	r3, #4
 80033c8:	e006      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ca:	2303      	movs	r3, #3
 80033cc:	e004      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033ce:	2302      	movs	r3, #2
 80033d0:	e002      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_GPIO_Init+0x240>
 80033d6:	2300      	movs	r3, #0
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f002 0203 	and.w	r2, r2, #3
 80033de:	0092      	lsls	r2, r2, #2
 80033e0:	4093      	lsls	r3, r2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033e8:	4934      	ldr	r1, [pc, #208]	; (80034bc <HAL_GPIO_Init+0x324>)
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f6:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <HAL_GPIO_Init+0x350>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	43db      	mvns	r3, r3
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341a:	4a33      	ldr	r2, [pc, #204]	; (80034e8 <HAL_GPIO_Init+0x350>)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003420:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <HAL_GPIO_Init+0x350>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003444:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_GPIO_Init+0x350>)
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800344a:	4b27      	ldr	r3, [pc, #156]	; (80034e8 <HAL_GPIO_Init+0x350>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800346e:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <HAL_GPIO_Init+0x350>)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003474:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_GPIO_Init+0x350>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <HAL_GPIO_Init+0x350>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	f67f ae86 	bls.w	80031b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034ac:	bf00      	nop
 80034ae:	3724      	adds	r7, #36	; 0x24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40020400 	.word	0x40020400
 80034c8:	40020800 	.word	0x40020800
 80034cc:	40020c00 	.word	0x40020c00
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40021400 	.word	0x40021400
 80034d8:	40021800 	.word	0x40021800
 80034dc:	40021c00 	.word	0x40021c00
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40022400 	.word	0x40022400
 80034e8:	40013c00 	.word	0x40013c00

080034ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
 80034f8:	4613      	mov	r3, r2
 80034fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003508:	e003      	b.n	8003512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800350a:	887b      	ldrh	r3, [r7, #2]
 800350c:	041a      	lsls	r2, r3, #16
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	619a      	str	r2, [r3, #24]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07f      	b.n	8003632 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fe fd9e 	bl	8002088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2224      	movs	r2, #36	; 0x24
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003570:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003580:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d107      	bne.n	800359a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e006      	b.n	80035a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d104      	bne.n	80035ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <HAL_I2C_Init+0x11c>)
 80035c6:	430b      	orrs	r3, r1
 80035c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68da      	ldr	r2, [r3, #12]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	ea42 0103 	orr.w	r1, r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	021a      	lsls	r2, r3, #8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69d9      	ldr	r1, [r3, #28]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1a      	ldr	r2, [r3, #32]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	02008000 	.word	0x02008000

08003640 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	817b      	strh	r3, [r7, #10]
 8003652:	460b      	mov	r3, r1
 8003654:	813b      	strh	r3, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b20      	cmp	r3, #32
 8003664:	f040 80f9 	bne.w	800385a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_I2C_Mem_Write+0x34>
 800366e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	d105      	bne.n	8003680 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0ed      	b.n	800385c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_I2C_Mem_Write+0x4e>
 800368a:	2302      	movs	r3, #2
 800368c:	e0e6      	b.n	800385c <HAL_I2C_Mem_Write+0x21c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003696:	f7ff f9e7 	bl	8002a68 <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2319      	movs	r3, #25
 80036a2:	2201      	movs	r2, #1
 80036a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fac3 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0d1      	b.n	800385c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2221      	movs	r2, #33	; 0x21
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2240      	movs	r2, #64	; 0x40
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a3a      	ldr	r2, [r7, #32]
 80036d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036e0:	88f8      	ldrh	r0, [r7, #6]
 80036e2:	893a      	ldrh	r2, [r7, #8]
 80036e4:	8979      	ldrh	r1, [r7, #10]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	9301      	str	r3, [sp, #4]
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4603      	mov	r3, r0
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f9d3 	bl	8003a9c <I2C_RequestMemoryWrite>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e0a9      	b.n	800385c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	2bff      	cmp	r3, #255	; 0xff
 8003710:	d90e      	bls.n	8003730 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	b2da      	uxtb	r2, r3
 800371e:	8979      	ldrh	r1, [r7, #10]
 8003720:	2300      	movs	r3, #0
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fba5 	bl	8003e78 <I2C_TransferConfig>
 800372e:	e00f      	b.n	8003750 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	b2da      	uxtb	r2, r3
 8003740:	8979      	ldrh	r1, [r7, #10]
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fb94 	bl	8003e78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 faad 	bl	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e07b      	b.n	800385c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d034      	beq.n	8003808 <HAL_I2C_Mem_Write+0x1c8>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d130      	bne.n	8003808 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	2200      	movs	r2, #0
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fa3f 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e04d      	b.n	800385c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2bff      	cmp	r3, #255	; 0xff
 80037c8:	d90e      	bls.n	80037e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	8979      	ldrh	r1, [r7, #10]
 80037d8:	2300      	movs	r3, #0
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fb49 	bl	8003e78 <I2C_TransferConfig>
 80037e6:	e00f      	b.n	8003808 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	8979      	ldrh	r1, [r7, #10]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fb38 	bl	8003e78 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d19e      	bne.n	8003750 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fa8c 	bl	8003d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e01a      	b.n	800385c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2220      	movs	r2, #32
 800382c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_I2C_Mem_Write+0x224>)
 800383a:	400b      	ands	r3, r1
 800383c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	e000      	b.n	800385c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
  }
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	fe00e800 	.word	0xfe00e800

08003868 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	4608      	mov	r0, r1
 8003872:	4611      	mov	r1, r2
 8003874:	461a      	mov	r2, r3
 8003876:	4603      	mov	r3, r0
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	460b      	mov	r3, r1
 800387c:	813b      	strh	r3, [r7, #8]
 800387e:	4613      	mov	r3, r2
 8003880:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b20      	cmp	r3, #32
 800388c:	f040 80fd 	bne.w	8003a8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_I2C_Mem_Read+0x34>
 8003896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d105      	bne.n	80038a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0f1      	b.n	8003a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Mem_Read+0x4e>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0ea      	b.n	8003a8c <HAL_I2C_Mem_Read+0x224>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038be:	f7ff f8d3 	bl	8002a68 <HAL_GetTick>
 80038c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2319      	movs	r3, #25
 80038ca:	2201      	movs	r2, #1
 80038cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f9af 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0d5      	b.n	8003a8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2222      	movs	r2, #34	; 0x22
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2240      	movs	r2, #64	; 0x40
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a3a      	ldr	r2, [r7, #32]
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003908:	88f8      	ldrh	r0, [r7, #6]
 800390a:	893a      	ldrh	r2, [r7, #8]
 800390c:	8979      	ldrh	r1, [r7, #10]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4603      	mov	r3, r0
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f913 	bl	8003b44 <I2C_RequestMemoryRead>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0ad      	b.n	8003a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003934:	b29b      	uxth	r3, r3
 8003936:	2bff      	cmp	r3, #255	; 0xff
 8003938:	d90e      	bls.n	8003958 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	22ff      	movs	r2, #255	; 0xff
 800393e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	b2da      	uxtb	r2, r3
 8003946:	8979      	ldrh	r1, [r7, #10]
 8003948:	4b52      	ldr	r3, [pc, #328]	; (8003a94 <HAL_I2C_Mem_Read+0x22c>)
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fa91 	bl	8003e78 <I2C_TransferConfig>
 8003956:	e00f      	b.n	8003978 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	b2da      	uxtb	r2, r3
 8003968:	8979      	ldrh	r1, [r7, #10]
 800396a:	4b4a      	ldr	r3, [pc, #296]	; (8003a94 <HAL_I2C_Mem_Read+0x22c>)
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 fa80 	bl	8003e78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	2200      	movs	r2, #0
 8003980:	2104      	movs	r1, #4
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f956 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07c      	b.n	8003a8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	b2d2      	uxtb	r2, r2
 800399e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d034      	beq.n	8003a38 <HAL_I2C_Mem_Read+0x1d0>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d130      	bne.n	8003a38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f927 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04d      	b.n	8003a8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2bff      	cmp	r3, #255	; 0xff
 80039f8:	d90e      	bls.n	8003a18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	8979      	ldrh	r1, [r7, #10]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fa31 	bl	8003e78 <I2C_TransferConfig>
 8003a16:	e00f      	b.n	8003a38 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fa20 	bl	8003e78 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d19a      	bne.n	8003978 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f974 	bl	8003d34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e01a      	b.n	8003a8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <HAL_I2C_Mem_Read+0x230>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	80002400 	.word	0x80002400
 8003a98:	fe00e800 	.word	0xfe00e800

08003a9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	817b      	strh	r3, [r7, #10]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	813b      	strh	r3, [r7, #8]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ab6:	88fb      	ldrh	r3, [r7, #6]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	8979      	ldrh	r1, [r7, #10]
 8003abc:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <I2C_RequestMemoryWrite+0xa4>)
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f9d7 	bl	8003e78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	69b9      	ldr	r1, [r7, #24]
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f8f0 	bl	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e02c      	b.n	8003b38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae4:	893b      	ldrh	r3, [r7, #8]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
 8003aee:	e015      	b.n	8003b1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	69b9      	ldr	r1, [r7, #24]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f8d6 	bl	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e012      	b.n	8003b38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b12:	893b      	ldrh	r3, [r7, #8]
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2200      	movs	r2, #0
 8003b24:	2180      	movs	r1, #128	; 0x80
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f884 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	80002000 	.word	0x80002000

08003b44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	817b      	strh	r3, [r7, #10]
 8003b56:	460b      	mov	r3, r1
 8003b58:	813b      	strh	r3, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	8979      	ldrh	r1, [r7, #10]
 8003b64:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <I2C_RequestMemoryRead+0xa4>)
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	2300      	movs	r3, #0
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 f984 	bl	8003e78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b70:	69fa      	ldr	r2, [r7, #28]
 8003b72:	69b9      	ldr	r1, [r7, #24]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f89d 	bl	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e02c      	b.n	8003bde <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b8a:	893b      	ldrh	r3, [r7, #8]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
 8003b94:	e015      	b.n	8003bc2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b96:	893b      	ldrh	r3, [r7, #8]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	69b9      	ldr	r1, [r7, #24]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f883 	bl	8003cb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e012      	b.n	8003bde <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb8:	893b      	ldrh	r3, [r7, #8]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2140      	movs	r1, #64	; 0x40
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f831 	bl	8003c34 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	80002000 	.word	0x80002000

08003bec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d103      	bne.n	8003c0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d007      	beq.n	8003c28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	619a      	str	r2, [r3, #24]
  }
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	4613      	mov	r3, r2
 8003c42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c44:	e022      	b.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4c:	d01e      	beq.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4e:	f7fe ff0b 	bl	8002a68 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d302      	bcc.n	8003c64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d113      	bne.n	8003c8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e00f      	b.n	8003cac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d0cd      	beq.n	8003c46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cc0:	e02c      	b.n	8003d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f870 	bl	8003dac <I2C_IsAcknowledgeFailed>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e02a      	b.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d01e      	beq.n	8003d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fe fec3 	bl	8002a68 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d113      	bne.n	8003d1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf8:	f043 0220 	orr.w	r2, r3, #32
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e007      	b.n	8003d2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d1cb      	bne.n	8003cc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d40:	e028      	b.n	8003d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f830 	bl	8003dac <I2C_IsAcknowledgeFailed>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e026      	b.n	8003da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d56:	f7fe fe87 	bl	8002a68 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d302      	bcc.n	8003d6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d113      	bne.n	8003d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d1cf      	bne.n	8003d42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d151      	bne.n	8003e6a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dc6:	e022      	b.n	8003e0e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dce:	d01e      	beq.n	8003e0e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd0:	f7fe fe4a 	bl	8002a68 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d302      	bcc.n	8003de6 <I2C_IsAcknowledgeFailed+0x3a>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d113      	bne.n	8003e0e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e02e      	b.n	8003e6c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d1d5      	bne.n	8003dc8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2210      	movs	r2, #16
 8003e22:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fedd 	bl	8003bec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6859      	ldr	r1, [r3, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <I2C_IsAcknowledgeFailed+0xc8>)
 8003e3e:	400b      	ands	r3, r1
 8003e40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e000      	b.n	8003e6c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	fe00e800 	.word	0xfe00e800

08003e78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	460b      	mov	r3, r1
 8003e84:	817b      	strh	r3, [r7, #10]
 8003e86:	4613      	mov	r3, r2
 8003e88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	0d5b      	lsrs	r3, r3, #21
 8003e94:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e98:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <I2C_TransferConfig+0x58>)
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	ea02 0103 	and.w	r1, r2, r3
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ea8:	7a7b      	ldrb	r3, [r7, #9]
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	03ff63ff 	.word	0x03ff63ff

08003ed4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d138      	bne.n	8003f5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e032      	b.n	8003f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2224      	movs	r2, #36	; 0x24
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 0201 	bic.w	r2, r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6819      	ldr	r1, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	e000      	b.n	8003f5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f5c:	2302      	movs	r3, #2
  }
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b20      	cmp	r3, #32
 8003f7e:	d139      	bne.n	8003ff4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e033      	b.n	8003ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2224      	movs	r2, #36	; 0x24
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a04      	ldr	r2, [pc, #16]	; (8004020 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800400e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004012:	6013      	str	r3, [r2, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40007000 	.word	0x40007000

08004024 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800402e:	4b23      	ldr	r3, [pc, #140]	; (80040bc <HAL_PWREx_EnableOverDrive+0x98>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a22      	ldr	r2, [pc, #136]	; (80040bc <HAL_PWREx_EnableOverDrive+0x98>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_PWREx_EnableOverDrive+0x98>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004046:	4b1e      	ldr	r3, [pc, #120]	; (80040c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004052:	f7fe fd09 	bl	8002a68 <HAL_GetTick>
 8004056:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004058:	e009      	b.n	800406e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800405a:	f7fe fd05 	bl	8002a68 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004068:	d901      	bls.n	800406e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e022      	b.n	80040b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407a:	d1ee      	bne.n	800405a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800407c:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004086:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004088:	f7fe fcee 	bl	8002a68 <HAL_GetTick>
 800408c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800408e:	e009      	b.n	80040a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004090:	f7fe fcea 	bl	8002a68 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800409e:	d901      	bls.n	80040a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e007      	b.n	80040b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040b0:	d1ee      	bne.n	8004090 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80040cc:	2300      	movs	r3, #0
 80040ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e29b      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 8087 	beq.w	80041f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040e8:	4b96      	ldr	r3, [pc, #600]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d00c      	beq.n	800410e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040f4:	4b93      	ldr	r3, [pc, #588]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 030c 	and.w	r3, r3, #12
 80040fc:	2b08      	cmp	r3, #8
 80040fe:	d112      	bne.n	8004126 <HAL_RCC_OscConfig+0x62>
 8004100:	4b90      	ldr	r3, [pc, #576]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410c:	d10b      	bne.n	8004126 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410e:	4b8d      	ldr	r3, [pc, #564]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d06c      	beq.n	80041f4 <HAL_RCC_OscConfig+0x130>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d168      	bne.n	80041f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e275      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412e:	d106      	bne.n	800413e <HAL_RCC_OscConfig+0x7a>
 8004130:	4b84      	ldr	r3, [pc, #528]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a83      	ldr	r2, [pc, #524]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	e02e      	b.n	800419c <HAL_RCC_OscConfig+0xd8>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10c      	bne.n	8004160 <HAL_RCC_OscConfig+0x9c>
 8004146:	4b7f      	ldr	r3, [pc, #508]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a7e      	ldr	r2, [pc, #504]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800414c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004150:	6013      	str	r3, [r2, #0]
 8004152:	4b7c      	ldr	r3, [pc, #496]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a7b      	ldr	r2, [pc, #492]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	e01d      	b.n	800419c <HAL_RCC_OscConfig+0xd8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	d10c      	bne.n	8004184 <HAL_RCC_OscConfig+0xc0>
 800416a:	4b76      	ldr	r3, [pc, #472]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a75      	ldr	r2, [pc, #468]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b73      	ldr	r3, [pc, #460]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a72      	ldr	r2, [pc, #456]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	e00b      	b.n	800419c <HAL_RCC_OscConfig+0xd8>
 8004184:	4b6f      	ldr	r3, [pc, #444]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a6e      	ldr	r2, [pc, #440]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b6c      	ldr	r3, [pc, #432]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a6b      	ldr	r2, [pc, #428]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800419a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fe fc60 	bl	8002a68 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041ac:	f7fe fc5c 	bl	8002a68 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b64      	cmp	r3, #100	; 0x64
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e229      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b61      	ldr	r3, [pc, #388]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0xe8>
 80041ca:	e014      	b.n	80041f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fe fc4c 	bl	8002a68 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d4:	f7fe fc48 	bl	8002a68 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e215      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	4b57      	ldr	r3, [pc, #348]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x110>
 80041f2:	e000      	b.n	80041f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d069      	beq.n	80042d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004202:	4b50      	ldr	r3, [pc, #320]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420e:	4b4d      	ldr	r3, [pc, #308]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b08      	cmp	r3, #8
 8004218:	d11c      	bne.n	8004254 <HAL_RCC_OscConfig+0x190>
 800421a:	4b4a      	ldr	r3, [pc, #296]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d116      	bne.n	8004254 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004226:	4b47      	ldr	r3, [pc, #284]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_RCC_OscConfig+0x17a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d001      	beq.n	800423e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e1e9      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423e:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	493d      	ldr	r1, [pc, #244]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	e040      	b.n	80042d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d023      	beq.n	80042a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800425c:	4b39      	ldr	r3, [pc, #228]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a38      	ldr	r2, [pc, #224]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe fbfe 	bl	8002a68 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004270:	f7fe fbfa 	bl	8002a68 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e1c7      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b30      	ldr	r3, [pc, #192]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b2d      	ldr	r3, [pc, #180]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4929      	ldr	r1, [pc, #164]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
 80042a2:	e018      	b.n	80042d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a4:	4b27      	ldr	r3, [pc, #156]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a26      	ldr	r2, [pc, #152]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b0:	f7fe fbda 	bl	8002a68 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b8:	f7fe fbd6 	bl	8002a68 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e1a3      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ca:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1f0      	bne.n	80042b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d038      	beq.n	8004354 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d019      	beq.n	800431e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	4a15      	ldr	r2, [pc, #84]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f6:	f7fe fbb7 	bl	8002a68 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042fe:	f7fe fbb3 	bl	8002a68 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e180      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004310:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x23a>
 800431c:	e01a      	b.n	8004354 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004322:	4a08      	ldr	r2, [pc, #32]	; (8004344 <HAL_RCC_OscConfig+0x280>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7fe fb9d 	bl	8002a68 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004332:	f7fe fb99 	bl	8002a68 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d903      	bls.n	8004348 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e166      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
 8004344:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004348:	4b92      	ldr	r3, [pc, #584]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800434a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ee      	bne.n	8004332 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a4 	beq.w	80044aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004362:	4b8c      	ldr	r3, [pc, #560]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800436e:	4b89      	ldr	r3, [pc, #548]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4a88      	ldr	r2, [pc, #544]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	; 0x40
 800437a:	4b86      	ldr	r3, [pc, #536]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004386:	2301      	movs	r3, #1
 8004388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800438a:	4b83      	ldr	r3, [pc, #524]	; (8004598 <HAL_RCC_OscConfig+0x4d4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d118      	bne.n	80043c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004396:	4b80      	ldr	r3, [pc, #512]	; (8004598 <HAL_RCC_OscConfig+0x4d4>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7f      	ldr	r2, [pc, #508]	; (8004598 <HAL_RCC_OscConfig+0x4d4>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a2:	f7fe fb61 	bl	8002a68 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043aa:	f7fe fb5d 	bl	8002a68 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b64      	cmp	r3, #100	; 0x64
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e12a      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043bc:	4b76      	ldr	r3, [pc, #472]	; (8004598 <HAL_RCC_OscConfig+0x4d4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d106      	bne.n	80043de <HAL_RCC_OscConfig+0x31a>
 80043d0:	4b70      	ldr	r3, [pc, #448]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a6f      	ldr	r2, [pc, #444]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	e02d      	b.n	800443a <HAL_RCC_OscConfig+0x376>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x33c>
 80043e6:	4b6b      	ldr	r3, [pc, #428]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	4a6a      	ldr	r2, [pc, #424]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	6713      	str	r3, [r2, #112]	; 0x70
 80043f2:	4b68      	ldr	r3, [pc, #416]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	4a67      	ldr	r2, [pc, #412]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80043f8:	f023 0304 	bic.w	r3, r3, #4
 80043fc:	6713      	str	r3, [r2, #112]	; 0x70
 80043fe:	e01c      	b.n	800443a <HAL_RCC_OscConfig+0x376>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	2b05      	cmp	r3, #5
 8004406:	d10c      	bne.n	8004422 <HAL_RCC_OscConfig+0x35e>
 8004408:	4b62      	ldr	r3, [pc, #392]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	4a61      	ldr	r2, [pc, #388]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800440e:	f043 0304 	orr.w	r3, r3, #4
 8004412:	6713      	str	r3, [r2, #112]	; 0x70
 8004414:	4b5f      	ldr	r3, [pc, #380]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004418:	4a5e      	ldr	r2, [pc, #376]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800441a:	f043 0301 	orr.w	r3, r3, #1
 800441e:	6713      	str	r3, [r2, #112]	; 0x70
 8004420:	e00b      	b.n	800443a <HAL_RCC_OscConfig+0x376>
 8004422:	4b5c      	ldr	r3, [pc, #368]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004426:	4a5b      	ldr	r2, [pc, #364]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	6713      	str	r3, [r2, #112]	; 0x70
 800442e:	4b59      	ldr	r3, [pc, #356]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004432:	4a58      	ldr	r2, [pc, #352]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004434:	f023 0304 	bic.w	r3, r3, #4
 8004438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d015      	beq.n	800446e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004442:	f7fe fb11 	bl	8002a68 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	e00a      	b.n	8004460 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fe fb0d 	bl	8002a68 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e0d8      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004460:	4b4c      	ldr	r3, [pc, #304]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0ee      	beq.n	800444a <HAL_RCC_OscConfig+0x386>
 800446c:	e014      	b.n	8004498 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446e:	f7fe fafb 	bl	8002a68 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fe faf7 	bl	8002a68 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e0c2      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448c:	4b41      	ldr	r3, [pc, #260]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800448e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1ee      	bne.n	8004476 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800449e:	4b3d      	ldr	r3, [pc, #244]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80044a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 80ae 	beq.w	8004610 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044b4:	4b37      	ldr	r3, [pc, #220]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d06d      	beq.n	800459c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d14b      	bne.n	8004560 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c8:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a31      	ldr	r2, [pc, #196]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80044ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fe fac8 	bl	8002a68 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fe fac4 	bl	8002a68 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e091      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	4b29      	ldr	r3, [pc, #164]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	3b01      	subs	r3, #1
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	491b      	ldr	r1, [pc, #108]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800452c:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a18      	ldr	r2, [pc, #96]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fe fa96 	bl	8002a68 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004540:	f7fe fa92 	bl	8002a68 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e05f      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	4b10      	ldr	r3, [pc, #64]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x47c>
 800455e:	e057      	b.n	8004610 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004560:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0b      	ldr	r2, [pc, #44]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800456a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456c:	f7fe fa7c 	bl	8002a68 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004574:	f7fe fa78 	bl	8002a68 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e045      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004586:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_RCC_OscConfig+0x4d0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f0      	bne.n	8004574 <HAL_RCC_OscConfig+0x4b0>
 8004592:	e03d      	b.n	8004610 <HAL_RCC_OscConfig+0x54c>
 8004594:	40023800 	.word	0x40023800
 8004598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <HAL_RCC_OscConfig+0x558>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d030      	beq.n	800460c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d129      	bne.n	800460c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d122      	bne.n	800460c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045cc:	4013      	ands	r3, r2
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d119      	bne.n	800460c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	085b      	lsrs	r3, r3, #1
 80045e4:	3b01      	subs	r3, #1
 80045e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d10f      	bne.n	800460c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d107      	bne.n	800460c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40023800 	.word	0x40023800

08004620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0d0      	b.n	80047da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004638:	4b6a      	ldr	r3, [pc, #424]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 030f 	and.w	r3, r3, #15
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	429a      	cmp	r2, r3
 8004644:	d910      	bls.n	8004668 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004646:	4b67      	ldr	r3, [pc, #412]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 020f 	bic.w	r2, r3, #15
 800464e:	4965      	ldr	r1, [pc, #404]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b63      	ldr	r3, [pc, #396]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0b8      	b.n	80047da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004680:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a58      	ldr	r2, [pc, #352]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004686:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800468a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004698:	4b53      	ldr	r3, [pc, #332]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a52      	ldr	r2, [pc, #328]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 800469e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a4:	4b50      	ldr	r3, [pc, #320]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	494d      	ldr	r1, [pc, #308]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d040      	beq.n	8004744 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b47      	ldr	r3, [pc, #284]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d115      	bne.n	8004702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d107      	bne.n	80046f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e2:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e073      	b.n	80047da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f2:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e06b      	b.n	80047da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004702:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f023 0203 	bic.w	r2, r3, #3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	4936      	ldr	r1, [pc, #216]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004710:	4313      	orrs	r3, r2
 8004712:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004714:	f7fe f9a8 	bl	8002a68 <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	e00a      	b.n	8004732 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471c:	f7fe f9a4 	bl	8002a68 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	f241 3288 	movw	r2, #5000	; 0x1388
 800472a:	4293      	cmp	r3, r2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e053      	b.n	80047da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004732:	4b2d      	ldr	r3, [pc, #180]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 020c 	and.w	r2, r3, #12
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	429a      	cmp	r2, r3
 8004742:	d1eb      	bne.n	800471c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004744:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d210      	bcs.n	8004774 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 020f 	bic.w	r2, r3, #15
 800475a:	4922      	ldr	r1, [pc, #136]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b20      	ldr	r3, [pc, #128]	; (80047e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e032      	b.n	80047da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004780:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4916      	ldr	r1, [pc, #88]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800479e:	4b12      	ldr	r3, [pc, #72]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	490e      	ldr	r1, [pc, #56]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047b2:	f000 f821 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 80047b6:	4601      	mov	r1, r0
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_RCC_ClockConfig+0x1c8>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <HAL_RCC_ClockConfig+0x1cc>)
 80047c4:	5cd3      	ldrb	r3, [r2, r3]
 80047c6:	fa21 f303 	lsr.w	r3, r1, r3
 80047ca:	4a09      	ldr	r2, [pc, #36]	; (80047f0 <HAL_RCC_ClockConfig+0x1d0>)
 80047cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <HAL_RCC_ClockConfig+0x1d4>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe f866 	bl	80028a4 <HAL_InitTick>

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40023c00 	.word	0x40023c00
 80047e8:	40023800 	.word	0x40023800
 80047ec:	0800b30c 	.word	0x0800b30c
 80047f0:	2000001c 	.word	0x2000001c
 80047f4:	20000020 	.word	0x20000020

080047f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	607b      	str	r3, [r7, #4]
 8004802:	2300      	movs	r3, #0
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	2300      	movs	r3, #0
 8004808:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800480e:	4b63      	ldr	r3, [pc, #396]	; (800499c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
 8004816:	2b04      	cmp	r3, #4
 8004818:	d007      	beq.n	800482a <HAL_RCC_GetSysClockFreq+0x32>
 800481a:	2b08      	cmp	r3, #8
 800481c:	d008      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x38>
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 80b4 	bne.w	800498c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004824:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004826:	60bb      	str	r3, [r7, #8]
      break;
 8004828:	e0b3      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800482a:	4b5e      	ldr	r3, [pc, #376]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800482c:	60bb      	str	r3, [r7, #8]
      break;
 800482e:	e0b0      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004830:	4b5a      	ldr	r3, [pc, #360]	; (800499c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004838:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800483a:	4b58      	ldr	r3, [pc, #352]	; (800499c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d04a      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004846:	4b55      	ldr	r3, [pc, #340]	; (800499c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	099b      	lsrs	r3, r3, #6
 800484c:	f04f 0400 	mov.w	r4, #0
 8004850:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	ea03 0501 	and.w	r5, r3, r1
 800485c:	ea04 0602 	and.w	r6, r4, r2
 8004860:	4629      	mov	r1, r5
 8004862:	4632      	mov	r2, r6
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	0154      	lsls	r4, r2, #5
 800486e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004872:	014b      	lsls	r3, r1, #5
 8004874:	4619      	mov	r1, r3
 8004876:	4622      	mov	r2, r4
 8004878:	1b49      	subs	r1, r1, r5
 800487a:	eb62 0206 	sbc.w	r2, r2, r6
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	f04f 0400 	mov.w	r4, #0
 8004886:	0194      	lsls	r4, r2, #6
 8004888:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800488c:	018b      	lsls	r3, r1, #6
 800488e:	1a5b      	subs	r3, r3, r1
 8004890:	eb64 0402 	sbc.w	r4, r4, r2
 8004894:	f04f 0100 	mov.w	r1, #0
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	00e2      	lsls	r2, r4, #3
 800489e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048a2:	00d9      	lsls	r1, r3, #3
 80048a4:	460b      	mov	r3, r1
 80048a6:	4614      	mov	r4, r2
 80048a8:	195b      	adds	r3, r3, r5
 80048aa:	eb44 0406 	adc.w	r4, r4, r6
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	0262      	lsls	r2, r4, #9
 80048b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80048bc:	0259      	lsls	r1, r3, #9
 80048be:	460b      	mov	r3, r1
 80048c0:	4614      	mov	r4, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	4621      	mov	r1, r4
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f04f 0400 	mov.w	r4, #0
 80048cc:	461a      	mov	r2, r3
 80048ce:	4623      	mov	r3, r4
 80048d0:	f7fb fcb6 	bl	8000240 <__aeabi_uldivmod>
 80048d4:	4603      	mov	r3, r0
 80048d6:	460c      	mov	r4, r1
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e049      	b.n	8004970 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048dc:	4b2f      	ldr	r3, [pc, #188]	; (800499c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	099b      	lsrs	r3, r3, #6
 80048e2:	f04f 0400 	mov.w	r4, #0
 80048e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	ea03 0501 	and.w	r5, r3, r1
 80048f2:	ea04 0602 	and.w	r6, r4, r2
 80048f6:	4629      	mov	r1, r5
 80048f8:	4632      	mov	r2, r6
 80048fa:	f04f 0300 	mov.w	r3, #0
 80048fe:	f04f 0400 	mov.w	r4, #0
 8004902:	0154      	lsls	r4, r2, #5
 8004904:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004908:	014b      	lsls	r3, r1, #5
 800490a:	4619      	mov	r1, r3
 800490c:	4622      	mov	r2, r4
 800490e:	1b49      	subs	r1, r1, r5
 8004910:	eb62 0206 	sbc.w	r2, r2, r6
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	f04f 0400 	mov.w	r4, #0
 800491c:	0194      	lsls	r4, r2, #6
 800491e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004922:	018b      	lsls	r3, r1, #6
 8004924:	1a5b      	subs	r3, r3, r1
 8004926:	eb64 0402 	sbc.w	r4, r4, r2
 800492a:	f04f 0100 	mov.w	r1, #0
 800492e:	f04f 0200 	mov.w	r2, #0
 8004932:	00e2      	lsls	r2, r4, #3
 8004934:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004938:	00d9      	lsls	r1, r3, #3
 800493a:	460b      	mov	r3, r1
 800493c:	4614      	mov	r4, r2
 800493e:	195b      	adds	r3, r3, r5
 8004940:	eb44 0406 	adc.w	r4, r4, r6
 8004944:	f04f 0100 	mov.w	r1, #0
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	02a2      	lsls	r2, r4, #10
 800494e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004952:	0299      	lsls	r1, r3, #10
 8004954:	460b      	mov	r3, r1
 8004956:	4614      	mov	r4, r2
 8004958:	4618      	mov	r0, r3
 800495a:	4621      	mov	r1, r4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f04f 0400 	mov.w	r4, #0
 8004962:	461a      	mov	r2, r3
 8004964:	4623      	mov	r3, r4
 8004966:	f7fb fc6b 	bl	8000240 <__aeabi_uldivmod>
 800496a:	4603      	mov	r3, r0
 800496c:	460c      	mov	r4, r1
 800496e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004970:	4b0a      	ldr	r3, [pc, #40]	; (800499c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	3301      	adds	r3, #1
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	fbb2 f3f3 	udiv	r3, r2, r3
 8004988:	60bb      	str	r3, [r7, #8]
      break;
 800498a:	e002      	b.n	8004992 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800498c:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800498e:	60bb      	str	r3, [r7, #8]
      break;
 8004990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004992:	68bb      	ldr	r3, [r7, #8]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	00f42400 	.word	0x00f42400
 80049a4:	007a1200 	.word	0x007a1200

080049a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ae:	681b      	ldr	r3, [r3, #0]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	2000001c 	.word	0x2000001c

080049c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c4:	f7ff fff0 	bl	80049a8 <HAL_RCC_GetHCLKFreq>
 80049c8:	4601      	mov	r1, r0
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	0a9b      	lsrs	r3, r3, #10
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	4a03      	ldr	r2, [pc, #12]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d6:	5cd3      	ldrb	r3, [r2, r3]
 80049d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40023800 	.word	0x40023800
 80049e4:	0800b31c 	.word	0x0800b31c

080049e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049ec:	f7ff ffdc 	bl	80049a8 <HAL_RCC_GetHCLKFreq>
 80049f0:	4601      	mov	r1, r0
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	0b5b      	lsrs	r3, r3, #13
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4a03      	ldr	r2, [pc, #12]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80049fe:	5cd3      	ldrb	r3, [r2, r3]
 8004a00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	0800b31c 	.word	0x0800b31c

08004a10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <HAL_RCC_GetClockConfig+0x5c>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0203 	and.w	r2, r3, #3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <HAL_RCC_GetClockConfig+0x5c>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <HAL_RCC_GetClockConfig+0x5c>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <HAL_RCC_GetClockConfig+0x5c>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	08db      	lsrs	r3, r3, #3
 8004a4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <HAL_RCC_GetClockConfig+0x60>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 020f 	and.w	r2, r3, #15
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	601a      	str	r2, [r3, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40023c00 	.word	0x40023c00

08004a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a9c:	4b69      	ldr	r3, [pc, #420]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a68      	ldr	r2, [pc, #416]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004aa6:	6093      	str	r3, [r2, #8]
 8004aa8:	4b66      	ldr	r3, [pc, #408]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	4964      	ldr	r1, [pc, #400]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d017      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ace:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	4959      	ldr	r1, [pc, #356]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aec:	d101      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004afa:	2301      	movs	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d017      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b0a:	4b4e      	ldr	r3, [pc, #312]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	494a      	ldr	r1, [pc, #296]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b28:	d101      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b46:	2301      	movs	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 808b 	beq.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b58:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	4a39      	ldr	r2, [pc, #228]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6413      	str	r3, [r2, #64]	; 0x40
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a34      	ldr	r2, [pc, #208]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7c:	f7fd ff74 	bl	8002a68 <HAL_GetTick>
 8004b80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b84:	f7fd ff70 	bl	8002a68 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e38d      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b96:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ba2:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d035      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d02e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bc0:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bca:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004be2:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d114      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd ff38 	bl	8002a68 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fd ff34 	bl	8002a68 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e34f      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ee      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2a:	d111      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	4901      	ldr	r1, [pc, #4]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	0ffffcff 	.word	0x0ffffcff
 8004c50:	4bb3      	ldr	r3, [pc, #716]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4ab2      	ldr	r2, [pc, #712]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c5a:	6093      	str	r3, [r2, #8]
 8004c5c:	4bb0      	ldr	r3, [pc, #704]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c68:	49ad      	ldr	r1, [pc, #692]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d010      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c7a:	4ba9      	ldr	r3, [pc, #676]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c80:	4aa7      	ldr	r2, [pc, #668]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c8a:	4ba5      	ldr	r3, [pc, #660]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	49a2      	ldr	r1, [pc, #648]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ca8:	4b9d      	ldr	r3, [pc, #628]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb6:	499a      	ldr	r1, [pc, #616]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cca:	4b95      	ldr	r3, [pc, #596]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd8:	4991      	ldr	r1, [pc, #580]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cec:	4b8c      	ldr	r3, [pc, #560]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfa:	4989      	ldr	r1, [pc, #548]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d0e:	4b84      	ldr	r3, [pc, #528]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	4980      	ldr	r1, [pc, #512]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d30:	4b7b      	ldr	r3, [pc, #492]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f023 0203 	bic.w	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	4978      	ldr	r1, [pc, #480]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d52:	4b73      	ldr	r3, [pc, #460]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f023 020c 	bic.w	r2, r3, #12
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d60:	496f      	ldr	r1, [pc, #444]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d74:	4b6a      	ldr	r3, [pc, #424]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d82:	4967      	ldr	r1, [pc, #412]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d96:	4b62      	ldr	r3, [pc, #392]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	495e      	ldr	r1, [pc, #376]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004db8:	4b59      	ldr	r3, [pc, #356]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	4956      	ldr	r1, [pc, #344]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dda:	4b51      	ldr	r3, [pc, #324]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	494d      	ldr	r1, [pc, #308]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004dfc:	4b48      	ldr	r3, [pc, #288]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	4945      	ldr	r1, [pc, #276]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e1e:	4b40      	ldr	r3, [pc, #256]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2c:	493c      	ldr	r1, [pc, #240]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e40:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4e:	4934      	ldr	r1, [pc, #208]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d011      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e62:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e70:	492b      	ldr	r1, [pc, #172]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e80:	d101      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ea2:	4b1f      	ldr	r3, [pc, #124]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	491b      	ldr	r1, [pc, #108]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ec4:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed4:	4912      	ldr	r1, [pc, #72]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00b      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef8:	4909      	ldr	r1, [pc, #36]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00f      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	4985      	ldr	r1, [pc, #532]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f38:	4b80      	ldr	r3, [pc, #512]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f48:	497c      	ldr	r1, [pc, #496]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d005      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f5e:	f040 80d6 	bne.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f62:	4b76      	ldr	r3, [pc, #472]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a75      	ldr	r2, [pc, #468]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6e:	f7fd fd7b 	bl	8002a68 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f76:	f7fd fd77 	bl	8002a68 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b64      	cmp	r3, #100	; 0x64
 8004f82:	d901      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e194      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f88:	4b6c      	ldr	r3, [pc, #432]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d021      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11d      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fa8:	4b64      	ldr	r3, [pc, #400]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fae:	0c1b      	lsrs	r3, r3, #16
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fb6:	4b61      	ldr	r3, [pc, #388]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbc:	0e1b      	lsrs	r3, r3, #24
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	019a      	lsls	r2, r3, #6
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	071b      	lsls	r3, r3, #28
 8004fdc:	4957      	ldr	r1, [pc, #348]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800500e:	d129      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005010:	4b4a      	ldr	r3, [pc, #296]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800501e:	4b47      	ldr	r3, [pc, #284]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005024:	0f1b      	lsrs	r3, r3, #28
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	019a      	lsls	r2, r3, #6
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	431a      	orrs	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	071b      	lsls	r3, r3, #28
 8005044:	493d      	ldr	r1, [pc, #244]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800504c:	4b3b      	ldr	r3, [pc, #236]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800504e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005052:	f023 021f 	bic.w	r2, r3, #31
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	3b01      	subs	r3, #1
 800505c:	4937      	ldr	r1, [pc, #220]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01d      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005070:	4b32      	ldr	r3, [pc, #200]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005076:	0e1b      	lsrs	r3, r3, #24
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800507e:	4b2f      	ldr	r3, [pc, #188]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005084:	0f1b      	lsrs	r3, r3, #28
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	019a      	lsls	r2, r3, #6
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	431a      	orrs	r2, r3
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	431a      	orrs	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	071b      	lsls	r3, r3, #28
 80050a4:	4925      	ldr	r1, [pc, #148]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d011      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	019a      	lsls	r2, r3, #6
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	041b      	lsls	r3, r3, #16
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	061b      	lsls	r3, r3, #24
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	071b      	lsls	r3, r3, #28
 80050d4:	4919      	ldr	r1, [pc, #100]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e8:	f7fd fcbe 	bl	8002a68 <HAL_GetTick>
 80050ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050f0:	f7fd fcba 	bl	8002a68 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e0d7      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005102:	4b0e      	ldr	r3, [pc, #56]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 80cd 	bne.w	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a08      	ldr	r2, [pc, #32]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fd fca1 	bl	8002a68 <HAL_GetTick>
 8005126:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005128:	e00a      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800512a:	f7fd fc9d 	bl	8002a68 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	; 0x64
 8005136:	d903      	bls.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e0ba      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800513c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005140:	4b5e      	ldr	r3, [pc, #376]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800514c:	d0ed      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800516a:	2b00      	cmp	r3, #0
 800516c:	d02e      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d12a      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005176:	4b51      	ldr	r3, [pc, #324]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005184:	4b4d      	ldr	r3, [pc, #308]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	0f1b      	lsrs	r3, r3, #28
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	019a      	lsls	r2, r3, #6
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	071b      	lsls	r3, r3, #28
 80051aa:	4944      	ldr	r1, [pc, #272]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051b2:	4b42      	ldr	r3, [pc, #264]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	3b01      	subs	r3, #1
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	493d      	ldr	r1, [pc, #244]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d022      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e0:	d11d      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051e2:	4b36      	ldr	r3, [pc, #216]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	0e1b      	lsrs	r3, r3, #24
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051f0:	4b32      	ldr	r3, [pc, #200]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	0f1b      	lsrs	r3, r3, #28
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	019a      	lsls	r2, r3, #6
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	431a      	orrs	r2, r3
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	431a      	orrs	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	071b      	lsls	r3, r3, #28
 8005216:	4929      	ldr	r1, [pc, #164]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d028      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	0e1b      	lsrs	r3, r3, #24
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	019a      	lsls	r2, r3, #6
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	431a      	orrs	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	071b      	lsls	r3, r3, #28
 800525e:	4917      	ldr	r1, [pc, #92]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4911      	ldr	r1, [pc, #68]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005288:	f7fd fbee 	bl	8002a68 <HAL_GetTick>
 800528c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005290:	f7fd fbea 	bl	8002a68 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e007      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ae:	d1ef      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800

080052c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e084      	b.n	80053dc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fc ff41 	bl	8002174 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005308:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005312:	d902      	bls.n	800531a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e002      	b.n	8005320 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800531a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005328:	d007      	beq.n	800533a <HAL_SPI_Init+0x7a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005332:	d002      	beq.n	800533a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800534a:	d903      	bls.n	8005354 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
 8005352:	e002      	b.n	800535a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	ea42 0103 	orr.w	r1, r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f003 0204 	and.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	ea42 0103 	orr.w	r1, r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e01d      	b.n	8005432 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fc ff32 	bl	8002274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f000 fe0a 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689a      	ldr	r2, [r3, #8]
 800545a:	4b0c      	ldr	r3, [pc, #48]	; (800548c <HAL_TIM_Base_Start_IT+0x50>)
 800545c:	4013      	ands	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b06      	cmp	r3, #6
 8005464:	d00b      	beq.n	800547e <HAL_TIM_Base_Start_IT+0x42>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546c:	d007      	beq.n	800547e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	00010007 	.word	0x00010007

08005490 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e01d      	b.n	80054de <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f815 	bl	80054e6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4619      	mov	r1, r3
 80054ce:	4610      	mov	r0, r2
 80054d0:	f000 fdb4 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b082      	sub	sp, #8
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e01d      	b.n	8005548 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fc ff9b 	bl	800245c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3304      	adds	r3, #4
 8005536:	4619      	mov	r1, r3
 8005538:	4610      	mov	r0, r2
 800553a:	f000 fd7f 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2201      	movs	r2, #1
 8005560:	6839      	ldr	r1, [r7, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f001 fa2c 	bl	80069c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a17      	ldr	r2, [pc, #92]	; (80055cc <HAL_TIM_PWM_Start+0x7c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d004      	beq.n	800557c <HAL_TIM_PWM_Start+0x2c>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <HAL_TIM_PWM_Start+0x80>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d101      	bne.n	8005580 <HAL_TIM_PWM_Start+0x30>
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_TIM_PWM_Start+0x32>
 8005580:	2300      	movs	r3, #0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_TIM_PWM_Start+0x84>)
 800559e:	4013      	ands	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b06      	cmp	r3, #6
 80055a6:	d00b      	beq.n	80055c0 <HAL_TIM_PWM_Start+0x70>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ae:	d007      	beq.n	80055c0 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400
 80055d4:	00010007 	.word	0x00010007

080055d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e01d      	b.n	8005626 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f815 	bl	800562e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3304      	adds	r3, #4
 8005614:	4619      	mov	r1, r3
 8005616:	4610      	mov	r0, r2
 8005618:	f000 fd10 	bl	800603c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
	...

08005644 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e07b      	b.n	8005750 <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565e:	b2db      	uxtb	r3, r3
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7fc fe7f 	bl	8002370 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2202      	movs	r2, #2
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6899      	ldr	r1, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b34      	ldr	r3, [pc, #208]	; (8005758 <HAL_TIM_Encoder_Init+0x114>)
 8005686:	400b      	ands	r3, r1
 8005688:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3304      	adds	r3, #4
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f000 fcd1 	bl	800603c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	4b27      	ldr	r3, [pc, #156]	; (800575c <HAL_TIM_Encoder_Init+0x118>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	4313      	orrs	r3, r2
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4b21      	ldr	r3, [pc, #132]	; (8005760 <HAL_TIM_Encoder_Init+0x11c>)
 80056da:	4013      	ands	r3, r2
 80056dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_TIM_Encoder_Init+0x120>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	4313      	orrs	r3, r2
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	011a      	lsls	r2, r3, #4
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	031b      	lsls	r3, r3, #12
 8005704:	4313      	orrs	r3, r2
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005712:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800571a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	4313      	orrs	r3, r2
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	fffebff8 	.word	0xfffebff8
 800575c:	fffffcfc 	.word	0xfffffcfc
 8005760:	fffff3f3 	.word	0xfffff3f3
 8005764:	ffff0f0f 	.word	0xffff0f0f

08005768 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_TIM_Encoder_Start+0x16>
 8005778:	2b04      	cmp	r3, #4
 800577a:	d008      	beq.n	800578e <HAL_TIM_Encoder_Start+0x26>
 800577c:	e00f      	b.n	800579e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2201      	movs	r2, #1
 8005784:	2100      	movs	r1, #0
 8005786:	4618      	mov	r0, r3
 8005788:	f001 f91a 	bl	80069c0 <TIM_CCxChannelCmd>
      break;
 800578c:	e016      	b.n	80057bc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	2104      	movs	r1, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f001 f912 	bl	80069c0 <TIM_CCxChannelCmd>
      break;
 800579c:	e00e      	b.n	80057bc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2201      	movs	r2, #1
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 f90a 	bl	80069c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2201      	movs	r2, #1
 80057b2:	2104      	movs	r1, #4
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 f903 	bl	80069c0 <TIM_CCxChannelCmd>
      break;
 80057ba:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d122      	bne.n	8005832 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d11b      	bne.n	8005832 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f06f 0202 	mvn.w	r2, #2
 8005802:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d003      	beq.n	8005820 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fbf1 	bl	8006000 <HAL_TIM_IC_CaptureCallback>
 800581e:	e005      	b.n	800582c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fbe3 	bl	8005fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fbf4 	bl	8006014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d122      	bne.n	8005886 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b04      	cmp	r3, #4
 800584c:	d11b      	bne.n	8005886 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f06f 0204 	mvn.w	r2, #4
 8005856:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 fbc7 	bl	8006000 <HAL_TIM_IC_CaptureCallback>
 8005872:	e005      	b.n	8005880 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fbb9 	bl	8005fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fbca 	bl	8006014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b08      	cmp	r3, #8
 8005892:	d122      	bne.n	80058da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d11b      	bne.n	80058da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f06f 0208 	mvn.w	r2, #8
 80058aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2204      	movs	r2, #4
 80058b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fb9d 	bl	8006000 <HAL_TIM_IC_CaptureCallback>
 80058c6:	e005      	b.n	80058d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fb8f 	bl	8005fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fba0 	bl	8006014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d122      	bne.n	800592e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b10      	cmp	r3, #16
 80058f4:	d11b      	bne.n	800592e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0210 	mvn.w	r2, #16
 80058fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2208      	movs	r2, #8
 8005904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb73 	bl	8006000 <HAL_TIM_IC_CaptureCallback>
 800591a:	e005      	b.n	8005928 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb65 	bl	8005fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fb76 	bl	8006014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10e      	bne.n	800595a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d107      	bne.n	800595a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f06f 0201 	mvn.w	r2, #1
 8005952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fc fb19 	bl	8001f8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	2b80      	cmp	r3, #128	; 0x80
 8005966:	d10e      	bne.n	8005986 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d107      	bne.n	8005986 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800597e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f001 f959 	bl	8006c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005994:	d10e      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	d107      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 f94c 	bl	8006c4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059cc:	2b40      	cmp	r3, #64	; 0x40
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fb24 	bl	8006028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d10e      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b20      	cmp	r3, #32
 80059fa:	d107      	bne.n	8005a0c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0220 	mvn.w	r2, #32
 8005a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 f90c 	bl	8006c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_TIM_OC_ConfigChannel+0x1a>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e06c      	b.n	8005b08 <HAL_TIM_OC_ConfigChannel+0xf4>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2b14      	cmp	r3, #20
 8005a42:	d857      	bhi.n	8005af4 <HAL_TIM_OC_ConfigChannel+0xe0>
 8005a44:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <HAL_TIM_OC_ConfigChannel+0x38>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005aa1 	.word	0x08005aa1
 8005a50:	08005af5 	.word	0x08005af5
 8005a54:	08005af5 	.word	0x08005af5
 8005a58:	08005af5 	.word	0x08005af5
 8005a5c:	08005aaf 	.word	0x08005aaf
 8005a60:	08005af5 	.word	0x08005af5
 8005a64:	08005af5 	.word	0x08005af5
 8005a68:	08005af5 	.word	0x08005af5
 8005a6c:	08005abd 	.word	0x08005abd
 8005a70:	08005af5 	.word	0x08005af5
 8005a74:	08005af5 	.word	0x08005af5
 8005a78:	08005af5 	.word	0x08005af5
 8005a7c:	08005acb 	.word	0x08005acb
 8005a80:	08005af5 	.word	0x08005af5
 8005a84:	08005af5 	.word	0x08005af5
 8005a88:	08005af5 	.word	0x08005af5
 8005a8c:	08005ad9 	.word	0x08005ad9
 8005a90:	08005af5 	.word	0x08005af5
 8005a94:	08005af5 	.word	0x08005af5
 8005a98:	08005af5 	.word	0x08005af5
 8005a9c:	08005ae7 	.word	0x08005ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 fb68 	bl	800617c <TIM_OC1_SetConfig>
      break;
 8005aac:	e023      	b.n	8005af6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68b9      	ldr	r1, [r7, #8]
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 fbd3 	bl	8006260 <TIM_OC2_SetConfig>
      break;
 8005aba:	e01c      	b.n	8005af6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fc44 	bl	8006350 <TIM_OC3_SetConfig>
      break;
 8005ac8:	e015      	b.n	8005af6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fcb3 	bl	800643c <TIM_OC4_SetConfig>
      break;
 8005ad6:	e00e      	b.n	8005af6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 fd04 	bl	80064ec <TIM_OC5_SetConfig>
      break;
 8005ae4:	e007      	b.n	8005af6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fd4f 	bl	8006590 <TIM_OC6_SetConfig>
      break;
 8005af2:	e000      	b.n	8005af6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8005af4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d101      	bne.n	8005b2a <HAL_TIM_IC_ConfigChannel+0x1a>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e08a      	b.n	8005c40 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	6819      	ldr	r1, [r3, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	685a      	ldr	r2, [r3, #4]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f000 fd72 	bl	8006638 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 020c 	bic.w	r2, r2, #12
 8005b62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	619a      	str	r2, [r3, #24]
 8005b76:	e05a      	b.n	8005c2e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d11c      	bne.n	8005bb8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	6819      	ldr	r1, [r3, #0]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f000 fdf6 	bl	800677e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ba0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6999      	ldr	r1, [r3, #24]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	021a      	lsls	r2, r3, #8
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	619a      	str	r2, [r3, #24]
 8005bb6:	e03a      	b.n	8005c2e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d11b      	bne.n	8005bf6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f000 fe43 	bl	8006858 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 020c 	bic.w	r2, r2, #12
 8005be0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69d9      	ldr	r1, [r3, #28]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	61da      	str	r2, [r3, #28]
 8005bf4:	e01b      	b.n	8005c2e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f000 fe63 	bl	80068d0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c18:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69d9      	ldr	r1, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	021a      	lsls	r2, r3, #8
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e105      	b.n	8005e6e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b14      	cmp	r3, #20
 8005c76:	f200 80f0 	bhi.w	8005e5a <HAL_TIM_PWM_ConfigChannel+0x212>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005e5b 	.word	0x08005e5b
 8005c88:	08005e5b 	.word	0x08005e5b
 8005c8c:	08005e5b 	.word	0x08005e5b
 8005c90:	08005d15 	.word	0x08005d15
 8005c94:	08005e5b 	.word	0x08005e5b
 8005c98:	08005e5b 	.word	0x08005e5b
 8005c9c:	08005e5b 	.word	0x08005e5b
 8005ca0:	08005d57 	.word	0x08005d57
 8005ca4:	08005e5b 	.word	0x08005e5b
 8005ca8:	08005e5b 	.word	0x08005e5b
 8005cac:	08005e5b 	.word	0x08005e5b
 8005cb0:	08005d97 	.word	0x08005d97
 8005cb4:	08005e5b 	.word	0x08005e5b
 8005cb8:	08005e5b 	.word	0x08005e5b
 8005cbc:	08005e5b 	.word	0x08005e5b
 8005cc0:	08005dd9 	.word	0x08005dd9
 8005cc4:	08005e5b 	.word	0x08005e5b
 8005cc8:	08005e5b 	.word	0x08005e5b
 8005ccc:	08005e5b 	.word	0x08005e5b
 8005cd0:	08005e19 	.word	0x08005e19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fa4e 	bl	800617c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0208 	orr.w	r2, r2, #8
 8005cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0204 	bic.w	r2, r2, #4
 8005cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6999      	ldr	r1, [r3, #24]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	619a      	str	r2, [r3, #24]
      break;
 8005d12:	e0a3      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 faa0 	bl	8006260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699a      	ldr	r2, [r3, #24]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	699a      	ldr	r2, [r3, #24]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6999      	ldr	r1, [r3, #24]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	021a      	lsls	r2, r3, #8
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	619a      	str	r2, [r3, #24]
      break;
 8005d54:	e082      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 faf7 	bl	8006350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0208 	orr.w	r2, r2, #8
 8005d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0204 	bic.w	r2, r2, #4
 8005d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69d9      	ldr	r1, [r3, #28]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	61da      	str	r2, [r3, #28]
      break;
 8005d94:	e062      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fb4d 	bl	800643c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69d9      	ldr	r1, [r3, #28]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	021a      	lsls	r2, r3, #8
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	61da      	str	r2, [r3, #28]
      break;
 8005dd6:	e041      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fb84 	bl	80064ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0208 	orr.w	r2, r2, #8
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0204 	bic.w	r2, r2, #4
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e16:	e021      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fbb6 	bl	8006590 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e58:	e000      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005e5a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop

08005e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIM_ConfigClockSource+0x18>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e0a6      	b.n	8005fde <HAL_TIM_ConfigClockSource+0x166>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4b4f      	ldr	r3, [pc, #316]	; (8005fe8 <HAL_TIM_ConfigClockSource+0x170>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	d067      	beq.n	8005f98 <HAL_TIM_ConfigClockSource+0x120>
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d80b      	bhi.n	8005ee4 <HAL_TIM_ConfigClockSource+0x6c>
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d073      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x140>
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d802      	bhi.n	8005eda <HAL_TIM_ConfigClockSource+0x62>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d06f      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ed8:	e078      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d06c      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x140>
 8005ede:	2b30      	cmp	r3, #48	; 0x30
 8005ee0:	d06a      	beq.n	8005fb8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005ee2:	e073      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ee4:	2b70      	cmp	r3, #112	; 0x70
 8005ee6:	d00d      	beq.n	8005f04 <HAL_TIM_ConfigClockSource+0x8c>
 8005ee8:	2b70      	cmp	r3, #112	; 0x70
 8005eea:	d804      	bhi.n	8005ef6 <HAL_TIM_ConfigClockSource+0x7e>
 8005eec:	2b50      	cmp	r3, #80	; 0x50
 8005eee:	d033      	beq.n	8005f58 <HAL_TIM_ConfigClockSource+0xe0>
 8005ef0:	2b60      	cmp	r3, #96	; 0x60
 8005ef2:	d041      	beq.n	8005f78 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005ef4:	e06a      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efa:	d066      	beq.n	8005fca <HAL_TIM_ConfigClockSource+0x152>
 8005efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f00:	d017      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f02:	e063      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6899      	ldr	r1, [r3, #8]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f000 fd34 	bl	8006980 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f26:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	609a      	str	r2, [r3, #8]
      break;
 8005f30:	e04c      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6899      	ldr	r1, [r3, #8]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f000 fd1d 	bl	8006980 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f54:	609a      	str	r2, [r3, #8]
      break;
 8005f56:	e039      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	6859      	ldr	r1, [r3, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	461a      	mov	r2, r3
 8005f66:	f000 fbdb 	bl	8006720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2150      	movs	r1, #80	; 0x50
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fcea 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8005f76:	e029      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	6859      	ldr	r1, [r3, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	461a      	mov	r2, r3
 8005f86:	f000 fc37 	bl	80067f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2160      	movs	r1, #96	; 0x60
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fcda 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8005f96:	e019      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6859      	ldr	r1, [r3, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	f000 fbbb 	bl	8006720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2140      	movs	r1, #64	; 0x40
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 fcca 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8005fb6:	e009      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f000 fcc1 	bl	800694a <TIM_ITRx_SetConfig>
      break;
 8005fc8:	e000      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	fffeff88 	.word	0xfffeff88

08005fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a40      	ldr	r2, [pc, #256]	; (8006150 <TIM_Base_SetConfig+0x114>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605a:	d00f      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a3d      	ldr	r2, [pc, #244]	; (8006154 <TIM_Base_SetConfig+0x118>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a3c      	ldr	r2, [pc, #240]	; (8006158 <TIM_Base_SetConfig+0x11c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a3b      	ldr	r2, [pc, #236]	; (800615c <TIM_Base_SetConfig+0x120>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0x40>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a3a      	ldr	r2, [pc, #232]	; (8006160 <TIM_Base_SetConfig+0x124>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d108      	bne.n	800608e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a2f      	ldr	r2, [pc, #188]	; (8006150 <TIM_Base_SetConfig+0x114>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d02b      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609c:	d027      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a2c      	ldr	r2, [pc, #176]	; (8006154 <TIM_Base_SetConfig+0x118>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d023      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a2b      	ldr	r2, [pc, #172]	; (8006158 <TIM_Base_SetConfig+0x11c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d01f      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a2a      	ldr	r2, [pc, #168]	; (800615c <TIM_Base_SetConfig+0x120>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01b      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a29      	ldr	r2, [pc, #164]	; (8006160 <TIM_Base_SetConfig+0x124>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d017      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a28      	ldr	r2, [pc, #160]	; (8006164 <TIM_Base_SetConfig+0x128>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a27      	ldr	r2, [pc, #156]	; (8006168 <TIM_Base_SetConfig+0x12c>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00f      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a26      	ldr	r2, [pc, #152]	; (800616c <TIM_Base_SetConfig+0x130>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a25      	ldr	r2, [pc, #148]	; (8006170 <TIM_Base_SetConfig+0x134>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a24      	ldr	r2, [pc, #144]	; (8006174 <TIM_Base_SetConfig+0x138>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_Base_SetConfig+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a23      	ldr	r2, [pc, #140]	; (8006178 <TIM_Base_SetConfig+0x13c>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d108      	bne.n	8006100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <TIM_Base_SetConfig+0x114>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_Base_SetConfig+0xf8>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <TIM_Base_SetConfig+0x124>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d103      	bne.n	800613c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	615a      	str	r2, [r3, #20]
}
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40010000 	.word	0x40010000
 8006154:	40000400 	.word	0x40000400
 8006158:	40000800 	.word	0x40000800
 800615c:	40000c00 	.word	0x40000c00
 8006160:	40010400 	.word	0x40010400
 8006164:	40014000 	.word	0x40014000
 8006168:	40014400 	.word	0x40014400
 800616c:	40014800 	.word	0x40014800
 8006170:	40001800 	.word	0x40001800
 8006174:	40001c00 	.word	0x40001c00
 8006178:	40002000 	.word	0x40002000

0800617c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f023 0201 	bic.w	r2, r3, #1
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <TIM_OC1_SetConfig+0xd8>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 0302 	bic.w	r3, r3, #2
 80061c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a21      	ldr	r2, [pc, #132]	; (8006258 <TIM_OC1_SetConfig+0xdc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC1_SetConfig+0x64>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a20      	ldr	r2, [pc, #128]	; (800625c <TIM_OC1_SetConfig+0xe0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10c      	bne.n	80061fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f023 0308 	bic.w	r3, r3, #8
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f023 0304 	bic.w	r3, r3, #4
 80061f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a16      	ldr	r2, [pc, #88]	; (8006258 <TIM_OC1_SetConfig+0xdc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_OC1_SetConfig+0x8e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a15      	ldr	r2, [pc, #84]	; (800625c <TIM_OC1_SetConfig+0xe0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d111      	bne.n	800622e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	fffeff8f 	.word	0xfffeff8f
 8006258:	40010000 	.word	0x40010000
 800625c:	40010400 	.word	0x40010400

08006260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0210 	bic.w	r2, r3, #16
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <TIM_OC2_SetConfig+0xe4>)
 800628c:	4013      	ands	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f023 0320 	bic.w	r3, r3, #32
 80062aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a23      	ldr	r2, [pc, #140]	; (8006348 <TIM_OC2_SetConfig+0xe8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_OC2_SetConfig+0x68>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a22      	ldr	r2, [pc, #136]	; (800634c <TIM_OC2_SetConfig+0xec>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d10d      	bne.n	80062e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a18      	ldr	r2, [pc, #96]	; (8006348 <TIM_OC2_SetConfig+0xe8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d003      	beq.n	80062f4 <TIM_OC2_SetConfig+0x94>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a17      	ldr	r2, [pc, #92]	; (800634c <TIM_OC2_SetConfig+0xec>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d113      	bne.n	800631c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	4313      	orrs	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	bf00      	nop
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	feff8fff 	.word	0xfeff8fff
 8006348:	40010000 	.word	0x40010000
 800634c:	40010400 	.word	0x40010400

08006350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4b2d      	ldr	r3, [pc, #180]	; (8006430 <TIM_OC3_SetConfig+0xe0>)
 800637c:	4013      	ands	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0303 	bic.w	r3, r3, #3
 8006386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a22      	ldr	r2, [pc, #136]	; (8006434 <TIM_OC3_SetConfig+0xe4>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d003      	beq.n	80063b6 <TIM_OC3_SetConfig+0x66>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a21      	ldr	r2, [pc, #132]	; (8006438 <TIM_OC3_SetConfig+0xe8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d10d      	bne.n	80063d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a17      	ldr	r2, [pc, #92]	; (8006434 <TIM_OC3_SetConfig+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_OC3_SetConfig+0x92>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a16      	ldr	r2, [pc, #88]	; (8006438 <TIM_OC3_SetConfig+0xe8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d113      	bne.n	800640a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	621a      	str	r2, [r3, #32]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	fffeff8f 	.word	0xfffeff8f
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400

0800643c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4b1e      	ldr	r3, [pc, #120]	; (80064e0 <TIM_OC4_SetConfig+0xa4>)
 8006468:	4013      	ands	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	031b      	lsls	r3, r3, #12
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a13      	ldr	r2, [pc, #76]	; (80064e4 <TIM_OC4_SetConfig+0xa8>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_OC4_SetConfig+0x68>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <TIM_OC4_SetConfig+0xac>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d109      	bne.n	80064b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	695b      	ldr	r3, [r3, #20]
 80064b0:	019b      	lsls	r3, r3, #6
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	621a      	str	r2, [r3, #32]
}
 80064d2:	bf00      	nop
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	feff8fff 	.word	0xfeff8fff
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40010400 	.word	0x40010400

080064ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4b1b      	ldr	r3, [pc, #108]	; (8006584 <TIM_OC5_SetConfig+0x98>)
 8006518:	4013      	ands	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800652c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	041b      	lsls	r3, r3, #16
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a12      	ldr	r2, [pc, #72]	; (8006588 <TIM_OC5_SetConfig+0x9c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d003      	beq.n	800654a <TIM_OC5_SetConfig+0x5e>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a11      	ldr	r2, [pc, #68]	; (800658c <TIM_OC5_SetConfig+0xa0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d109      	bne.n	800655e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4313      	orrs	r3, r2
 800655c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	621a      	str	r2, [r3, #32]
}
 8006578:	bf00      	nop
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr
 8006584:	fffeff8f 	.word	0xfffeff8f
 8006588:	40010000 	.word	0x40010000
 800658c:	40010400 	.word	0x40010400

08006590 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4b1c      	ldr	r3, [pc, #112]	; (800662c <TIM_OC6_SetConfig+0x9c>)
 80065bc:	4013      	ands	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80065d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	051b      	lsls	r3, r3, #20
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a13      	ldr	r2, [pc, #76]	; (8006630 <TIM_OC6_SetConfig+0xa0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_OC6_SetConfig+0x60>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a12      	ldr	r2, [pc, #72]	; (8006634 <TIM_OC6_SetConfig+0xa4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d109      	bne.n	8006604 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	feff8fff 	.word	0xfeff8fff
 8006630:	40010000 	.word	0x40010000
 8006634:	40010400 	.word	0x40010400

08006638 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	f023 0201 	bic.w	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4a28      	ldr	r2, [pc, #160]	; (8006704 <TIM_TI1_SetConfig+0xcc>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01b      	beq.n	800669e <TIM_TI1_SetConfig+0x66>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666c:	d017      	beq.n	800669e <TIM_TI1_SetConfig+0x66>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	4a25      	ldr	r2, [pc, #148]	; (8006708 <TIM_TI1_SetConfig+0xd0>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <TIM_TI1_SetConfig+0x66>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a24      	ldr	r2, [pc, #144]	; (800670c <TIM_TI1_SetConfig+0xd4>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00f      	beq.n	800669e <TIM_TI1_SetConfig+0x66>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	4a23      	ldr	r2, [pc, #140]	; (8006710 <TIM_TI1_SetConfig+0xd8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00b      	beq.n	800669e <TIM_TI1_SetConfig+0x66>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a22      	ldr	r2, [pc, #136]	; (8006714 <TIM_TI1_SetConfig+0xdc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d007      	beq.n	800669e <TIM_TI1_SetConfig+0x66>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a21      	ldr	r2, [pc, #132]	; (8006718 <TIM_TI1_SetConfig+0xe0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_TI1_SetConfig+0x66>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a20      	ldr	r2, [pc, #128]	; (800671c <TIM_TI1_SetConfig+0xe4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <TIM_TI1_SetConfig+0x6a>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <TIM_TI1_SetConfig+0x6c>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	e003      	b.n	80066c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	f043 0301 	orr.w	r3, r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f023 030a 	bic.w	r3, r3, #10
 80066dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f003 030a 	and.w	r3, r3, #10
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40010000 	.word	0x40010000
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40000c00 	.word	0x40000c00
 8006714:	40010400 	.word	0x40010400
 8006718:	40014000 	.word	0x40014000
 800671c:	40001800 	.word	0x40001800

08006720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	f023 0201 	bic.w	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800674a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	011b      	lsls	r3, r3, #4
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f023 030a 	bic.w	r3, r3, #10
 800675c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800677e:	b480      	push	{r7}
 8006780:	b087      	sub	sp, #28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
 800678a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f023 0210 	bic.w	r2, r3, #16
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	031b      	lsls	r3, r3, #12
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	621a      	str	r2, [r3, #32]
}
 80067ec:	bf00      	nop
 80067ee:	371c      	adds	r7, #28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	f023 0210 	bic.w	r2, r3, #16
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6a1b      	ldr	r3, [r3, #32]
 800681a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006822:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	031b      	lsls	r3, r3, #12
 8006828:	697a      	ldr	r2, [r7, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	621a      	str	r2, [r3, #32]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
 8006864:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a1b      	ldr	r3, [r3, #32]
 800687c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f023 0303 	bic.w	r3, r3, #3
 8006884:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006894:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	b2db      	uxtb	r3, r3
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80068a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	021b      	lsls	r3, r3, #8
 80068ae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800690e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	031b      	lsls	r3, r3, #12
 8006914:	b29b      	uxth	r3, r3
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006922:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	031b      	lsls	r3, r3, #12
 8006928:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	621a      	str	r2, [r3, #32]
}
 800693e:	bf00      	nop
 8006940:	371c      	adds	r7, #28
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	f043 0307 	orr.w	r3, r3, #7
 800696c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	609a      	str	r2, [r3, #8]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006980:	b480      	push	{r7}
 8006982:	b087      	sub	sp, #28
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800699a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	021a      	lsls	r2, r3, #8
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	609a      	str	r2, [r3, #8]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 031f 	and.w	r3, r3, #31
 80069d2:	2201      	movs	r2, #1
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1a      	ldr	r2, [r3, #32]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 031f 	and.w	r3, r3, #31
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	fa01 f303 	lsl.w	r3, r1, r3
 80069f8:	431a      	orrs	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
	...

08006a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e06d      	b.n	8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a30      	ldr	r2, [pc, #192]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d004      	beq.n	8006a58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2f      	ldr	r2, [pc, #188]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d108      	bne.n	8006a6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a20      	ldr	r2, [pc, #128]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d022      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a96:	d01d      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1d      	ldr	r2, [pc, #116]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d018      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1a      	ldr	r2, [pc, #104]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a15      	ldr	r2, [pc, #84]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a16      	ldr	r2, [pc, #88]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a15      	ldr	r2, [pc, #84]	; (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10c      	bne.n	8006aee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	40010000 	.word	0x40010000
 8006b10:	40010400 	.word	0x40010400
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00
 8006b20:	40014000 	.word	0x40014000
 8006b24:	40001800 	.word	0x40001800

08006b28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e065      	b.n	8006c10 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a16      	ldr	r2, [pc, #88]	; (8006c1c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a14      	ldr	r2, [pc, #80]	; (8006c20 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d115      	bne.n	8006bfe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bdc:	051b      	lsls	r3, r3, #20
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3714      	adds	r7, #20
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	40010000 	.word	0x40010000
 8006c20:	40010400 	.word	0x40010400

08006c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e040      	b.n	8006cf4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7fb fcd6 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2224      	movs	r2, #36	; 0x24
 8006c8c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f98a 	bl	8006fb8 <UART_SetConfig>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e022      	b.n	8006cf4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d002      	beq.n	8006cbc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fc28 	bl	800750c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0201 	orr.w	r2, r2, #1
 8006cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fcaf 	bl	8007650 <UART_CheckIdleState>
 8006cf2:	4603      	mov	r3, r0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	; 0x28
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	603b      	str	r3, [r7, #0]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d17f      	bne.n	8006e14 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <HAL_UART_Transmit+0x24>
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e078      	b.n	8006e16 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_UART_Transmit+0x36>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e071      	b.n	8006e16 <HAL_UART_Transmit+0x11a>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2221      	movs	r2, #33	; 0x21
 8006d44:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006d46:	f7fb fe8f 	bl	8002a68 <HAL_GetTick>
 8006d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	88fa      	ldrh	r2, [r7, #6]
 8006d50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	88fa      	ldrh	r2, [r7, #6]
 8006d58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d64:	d108      	bne.n	8006d78 <HAL_UART_Transmit+0x7c>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d104      	bne.n	8006d78 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	e003      	b.n	8006d80 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8006d88:	e02c      	b.n	8006de4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2200      	movs	r2, #0
 8006d92:	2180      	movs	r1, #128	; 0x80
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 fca0 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e038      	b.n	8006e16 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10b      	bne.n	8006dc2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	881b      	ldrh	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	e007      	b.n	8006dd2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	781a      	ldrb	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1cc      	bne.n	8006d8a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2200      	movs	r2, #0
 8006df8:	2140      	movs	r1, #64	; 0x40
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fc6d 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e005      	b.n	8006e16 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	e000      	b.n	8006e16 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8006e14:	2302      	movs	r3, #2
  }
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3720      	adds	r7, #32
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b08a      	sub	sp, #40	; 0x28
 8006e22:	af02      	add	r7, sp, #8
 8006e24:	60f8      	str	r0, [r7, #12]
 8006e26:	60b9      	str	r1, [r7, #8]
 8006e28:	603b      	str	r3, [r7, #0]
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	f040 80ba 	bne.w	8006fac <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d002      	beq.n	8006e44 <HAL_UART_Receive+0x26>
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e0b2      	b.n	8006fae <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_UART_Receive+0x38>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e0ab      	b.n	8006fae <HAL_UART_Receive+0x190>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2222      	movs	r2, #34	; 0x22
 8006e68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006e6a:	f7fb fdfd 	bl	8002a68 <HAL_GetTick>
 8006e6e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	88fa      	ldrh	r2, [r7, #6]
 8006e7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e88:	d10e      	bne.n	8006ea8 <HAL_UART_Receive+0x8a>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d105      	bne.n	8006e9e <HAL_UART_Receive+0x80>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006e9c:	e02d      	b.n	8006efa <HAL_UART_Receive+0xdc>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	22ff      	movs	r2, #255	; 0xff
 8006ea2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ea6:	e028      	b.n	8006efa <HAL_UART_Receive+0xdc>
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10d      	bne.n	8006ecc <HAL_UART_Receive+0xae>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <HAL_UART_Receive+0xa4>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	22ff      	movs	r2, #255	; 0xff
 8006ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ec0:	e01b      	b.n	8006efa <HAL_UART_Receive+0xdc>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	227f      	movs	r2, #127	; 0x7f
 8006ec6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006eca:	e016      	b.n	8006efa <HAL_UART_Receive+0xdc>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed4:	d10d      	bne.n	8006ef2 <HAL_UART_Receive+0xd4>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <HAL_UART_Receive+0xca>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	227f      	movs	r2, #127	; 0x7f
 8006ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ee6:	e008      	b.n	8006efa <HAL_UART_Receive+0xdc>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	223f      	movs	r2, #63	; 0x3f
 8006eec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ef0:	e003      	b.n	8006efa <HAL_UART_Receive+0xdc>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f00:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0a:	d108      	bne.n	8006f1e <HAL_UART_Receive+0x100>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e003      	b.n	8006f26 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f22:	2300      	movs	r3, #0
 8006f24:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006f2e:	e032      	b.n	8006f96 <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2200      	movs	r2, #0
 8006f38:	2120      	movs	r1, #32
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fbcd 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e031      	b.n	8006fae <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10c      	bne.n	8006f6a <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	8a7b      	ldrh	r3, [r7, #18]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	3302      	adds	r3, #2
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	e00c      	b.n	8006f84 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	8a7b      	ldrh	r3, [r7, #18]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	4013      	ands	r3, r2
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	3301      	adds	r3, #1
 8006f82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1c6      	bne.n	8006f30 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8006fac:	2302      	movs	r3, #2
  }
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4bb1      	ldr	r3, [pc, #708]	; (80072ac <UART_SetConfig+0x2f4>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	6939      	ldr	r1, [r7, #16]
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a1b      	ldr	r3, [r3, #32]
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	430a      	orrs	r2, r1
 800702c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a9f      	ldr	r2, [pc, #636]	; (80072b0 <UART_SetConfig+0x2f8>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d121      	bne.n	800707c <UART_SetConfig+0xc4>
 8007038:	4b9e      	ldr	r3, [pc, #632]	; (80072b4 <UART_SetConfig+0x2fc>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	2b03      	cmp	r3, #3
 8007044:	d816      	bhi.n	8007074 <UART_SetConfig+0xbc>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x94>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	0800705d 	.word	0x0800705d
 8007050:	08007069 	.word	0x08007069
 8007054:	08007063 	.word	0x08007063
 8007058:	0800706f 	.word	0x0800706f
 800705c:	2301      	movs	r3, #1
 800705e:	77fb      	strb	r3, [r7, #31]
 8007060:	e151      	b.n	8007306 <UART_SetConfig+0x34e>
 8007062:	2302      	movs	r3, #2
 8007064:	77fb      	strb	r3, [r7, #31]
 8007066:	e14e      	b.n	8007306 <UART_SetConfig+0x34e>
 8007068:	2304      	movs	r3, #4
 800706a:	77fb      	strb	r3, [r7, #31]
 800706c:	e14b      	b.n	8007306 <UART_SetConfig+0x34e>
 800706e:	2308      	movs	r3, #8
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e148      	b.n	8007306 <UART_SetConfig+0x34e>
 8007074:	2310      	movs	r3, #16
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	bf00      	nop
 800707a:	e144      	b.n	8007306 <UART_SetConfig+0x34e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a8d      	ldr	r2, [pc, #564]	; (80072b8 <UART_SetConfig+0x300>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d134      	bne.n	80070f0 <UART_SetConfig+0x138>
 8007086:	4b8b      	ldr	r3, [pc, #556]	; (80072b4 <UART_SetConfig+0x2fc>)
 8007088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708c:	f003 030c 	and.w	r3, r3, #12
 8007090:	2b0c      	cmp	r3, #12
 8007092:	d829      	bhi.n	80070e8 <UART_SetConfig+0x130>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <UART_SetConfig+0xe4>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070d1 	.word	0x080070d1
 80070a0:	080070e9 	.word	0x080070e9
 80070a4:	080070e9 	.word	0x080070e9
 80070a8:	080070e9 	.word	0x080070e9
 80070ac:	080070dd 	.word	0x080070dd
 80070b0:	080070e9 	.word	0x080070e9
 80070b4:	080070e9 	.word	0x080070e9
 80070b8:	080070e9 	.word	0x080070e9
 80070bc:	080070d7 	.word	0x080070d7
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070e9 	.word	0x080070e9
 80070c8:	080070e9 	.word	0x080070e9
 80070cc:	080070e3 	.word	0x080070e3
 80070d0:	2300      	movs	r3, #0
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e117      	b.n	8007306 <UART_SetConfig+0x34e>
 80070d6:	2302      	movs	r3, #2
 80070d8:	77fb      	strb	r3, [r7, #31]
 80070da:	e114      	b.n	8007306 <UART_SetConfig+0x34e>
 80070dc:	2304      	movs	r3, #4
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e111      	b.n	8007306 <UART_SetConfig+0x34e>
 80070e2:	2308      	movs	r3, #8
 80070e4:	77fb      	strb	r3, [r7, #31]
 80070e6:	e10e      	b.n	8007306 <UART_SetConfig+0x34e>
 80070e8:	2310      	movs	r3, #16
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	bf00      	nop
 80070ee:	e10a      	b.n	8007306 <UART_SetConfig+0x34e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a71      	ldr	r2, [pc, #452]	; (80072bc <UART_SetConfig+0x304>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d120      	bne.n	800713c <UART_SetConfig+0x184>
 80070fa:	4b6e      	ldr	r3, [pc, #440]	; (80072b4 <UART_SetConfig+0x2fc>)
 80070fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007100:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007104:	2b10      	cmp	r3, #16
 8007106:	d00f      	beq.n	8007128 <UART_SetConfig+0x170>
 8007108:	2b10      	cmp	r3, #16
 800710a:	d802      	bhi.n	8007112 <UART_SetConfig+0x15a>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d005      	beq.n	800711c <UART_SetConfig+0x164>
 8007110:	e010      	b.n	8007134 <UART_SetConfig+0x17c>
 8007112:	2b20      	cmp	r3, #32
 8007114:	d005      	beq.n	8007122 <UART_SetConfig+0x16a>
 8007116:	2b30      	cmp	r3, #48	; 0x30
 8007118:	d009      	beq.n	800712e <UART_SetConfig+0x176>
 800711a:	e00b      	b.n	8007134 <UART_SetConfig+0x17c>
 800711c:	2300      	movs	r3, #0
 800711e:	77fb      	strb	r3, [r7, #31]
 8007120:	e0f1      	b.n	8007306 <UART_SetConfig+0x34e>
 8007122:	2302      	movs	r3, #2
 8007124:	77fb      	strb	r3, [r7, #31]
 8007126:	e0ee      	b.n	8007306 <UART_SetConfig+0x34e>
 8007128:	2304      	movs	r3, #4
 800712a:	77fb      	strb	r3, [r7, #31]
 800712c:	e0eb      	b.n	8007306 <UART_SetConfig+0x34e>
 800712e:	2308      	movs	r3, #8
 8007130:	77fb      	strb	r3, [r7, #31]
 8007132:	e0e8      	b.n	8007306 <UART_SetConfig+0x34e>
 8007134:	2310      	movs	r3, #16
 8007136:	77fb      	strb	r3, [r7, #31]
 8007138:	bf00      	nop
 800713a:	e0e4      	b.n	8007306 <UART_SetConfig+0x34e>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a5f      	ldr	r2, [pc, #380]	; (80072c0 <UART_SetConfig+0x308>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d120      	bne.n	8007188 <UART_SetConfig+0x1d0>
 8007146:	4b5b      	ldr	r3, [pc, #364]	; (80072b4 <UART_SetConfig+0x2fc>)
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007150:	2b40      	cmp	r3, #64	; 0x40
 8007152:	d00f      	beq.n	8007174 <UART_SetConfig+0x1bc>
 8007154:	2b40      	cmp	r3, #64	; 0x40
 8007156:	d802      	bhi.n	800715e <UART_SetConfig+0x1a6>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d005      	beq.n	8007168 <UART_SetConfig+0x1b0>
 800715c:	e010      	b.n	8007180 <UART_SetConfig+0x1c8>
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d005      	beq.n	800716e <UART_SetConfig+0x1b6>
 8007162:	2bc0      	cmp	r3, #192	; 0xc0
 8007164:	d009      	beq.n	800717a <UART_SetConfig+0x1c2>
 8007166:	e00b      	b.n	8007180 <UART_SetConfig+0x1c8>
 8007168:	2300      	movs	r3, #0
 800716a:	77fb      	strb	r3, [r7, #31]
 800716c:	e0cb      	b.n	8007306 <UART_SetConfig+0x34e>
 800716e:	2302      	movs	r3, #2
 8007170:	77fb      	strb	r3, [r7, #31]
 8007172:	e0c8      	b.n	8007306 <UART_SetConfig+0x34e>
 8007174:	2304      	movs	r3, #4
 8007176:	77fb      	strb	r3, [r7, #31]
 8007178:	e0c5      	b.n	8007306 <UART_SetConfig+0x34e>
 800717a:	2308      	movs	r3, #8
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e0c2      	b.n	8007306 <UART_SetConfig+0x34e>
 8007180:	2310      	movs	r3, #16
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	bf00      	nop
 8007186:	e0be      	b.n	8007306 <UART_SetConfig+0x34e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a4d      	ldr	r2, [pc, #308]	; (80072c4 <UART_SetConfig+0x30c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d124      	bne.n	80071dc <UART_SetConfig+0x224>
 8007192:	4b48      	ldr	r3, [pc, #288]	; (80072b4 <UART_SetConfig+0x2fc>)
 8007194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a0:	d012      	beq.n	80071c8 <UART_SetConfig+0x210>
 80071a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a6:	d802      	bhi.n	80071ae <UART_SetConfig+0x1f6>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d007      	beq.n	80071bc <UART_SetConfig+0x204>
 80071ac:	e012      	b.n	80071d4 <UART_SetConfig+0x21c>
 80071ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071b2:	d006      	beq.n	80071c2 <UART_SetConfig+0x20a>
 80071b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071b8:	d009      	beq.n	80071ce <UART_SetConfig+0x216>
 80071ba:	e00b      	b.n	80071d4 <UART_SetConfig+0x21c>
 80071bc:	2300      	movs	r3, #0
 80071be:	77fb      	strb	r3, [r7, #31]
 80071c0:	e0a1      	b.n	8007306 <UART_SetConfig+0x34e>
 80071c2:	2302      	movs	r3, #2
 80071c4:	77fb      	strb	r3, [r7, #31]
 80071c6:	e09e      	b.n	8007306 <UART_SetConfig+0x34e>
 80071c8:	2304      	movs	r3, #4
 80071ca:	77fb      	strb	r3, [r7, #31]
 80071cc:	e09b      	b.n	8007306 <UART_SetConfig+0x34e>
 80071ce:	2308      	movs	r3, #8
 80071d0:	77fb      	strb	r3, [r7, #31]
 80071d2:	e098      	b.n	8007306 <UART_SetConfig+0x34e>
 80071d4:	2310      	movs	r3, #16
 80071d6:	77fb      	strb	r3, [r7, #31]
 80071d8:	bf00      	nop
 80071da:	e094      	b.n	8007306 <UART_SetConfig+0x34e>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a39      	ldr	r2, [pc, #228]	; (80072c8 <UART_SetConfig+0x310>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d124      	bne.n	8007230 <UART_SetConfig+0x278>
 80071e6:	4b33      	ldr	r3, [pc, #204]	; (80072b4 <UART_SetConfig+0x2fc>)
 80071e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f4:	d012      	beq.n	800721c <UART_SetConfig+0x264>
 80071f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071fa:	d802      	bhi.n	8007202 <UART_SetConfig+0x24a>
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d007      	beq.n	8007210 <UART_SetConfig+0x258>
 8007200:	e012      	b.n	8007228 <UART_SetConfig+0x270>
 8007202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007206:	d006      	beq.n	8007216 <UART_SetConfig+0x25e>
 8007208:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800720c:	d009      	beq.n	8007222 <UART_SetConfig+0x26a>
 800720e:	e00b      	b.n	8007228 <UART_SetConfig+0x270>
 8007210:	2301      	movs	r3, #1
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e077      	b.n	8007306 <UART_SetConfig+0x34e>
 8007216:	2302      	movs	r3, #2
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	e074      	b.n	8007306 <UART_SetConfig+0x34e>
 800721c:	2304      	movs	r3, #4
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e071      	b.n	8007306 <UART_SetConfig+0x34e>
 8007222:	2308      	movs	r3, #8
 8007224:	77fb      	strb	r3, [r7, #31]
 8007226:	e06e      	b.n	8007306 <UART_SetConfig+0x34e>
 8007228:	2310      	movs	r3, #16
 800722a:	77fb      	strb	r3, [r7, #31]
 800722c:	bf00      	nop
 800722e:	e06a      	b.n	8007306 <UART_SetConfig+0x34e>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a25      	ldr	r2, [pc, #148]	; (80072cc <UART_SetConfig+0x314>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d124      	bne.n	8007284 <UART_SetConfig+0x2cc>
 800723a:	4b1e      	ldr	r3, [pc, #120]	; (80072b4 <UART_SetConfig+0x2fc>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007240:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007248:	d012      	beq.n	8007270 <UART_SetConfig+0x2b8>
 800724a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724e:	d802      	bhi.n	8007256 <UART_SetConfig+0x29e>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d007      	beq.n	8007264 <UART_SetConfig+0x2ac>
 8007254:	e012      	b.n	800727c <UART_SetConfig+0x2c4>
 8007256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800725a:	d006      	beq.n	800726a <UART_SetConfig+0x2b2>
 800725c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007260:	d009      	beq.n	8007276 <UART_SetConfig+0x2be>
 8007262:	e00b      	b.n	800727c <UART_SetConfig+0x2c4>
 8007264:	2300      	movs	r3, #0
 8007266:	77fb      	strb	r3, [r7, #31]
 8007268:	e04d      	b.n	8007306 <UART_SetConfig+0x34e>
 800726a:	2302      	movs	r3, #2
 800726c:	77fb      	strb	r3, [r7, #31]
 800726e:	e04a      	b.n	8007306 <UART_SetConfig+0x34e>
 8007270:	2304      	movs	r3, #4
 8007272:	77fb      	strb	r3, [r7, #31]
 8007274:	e047      	b.n	8007306 <UART_SetConfig+0x34e>
 8007276:	2308      	movs	r3, #8
 8007278:	77fb      	strb	r3, [r7, #31]
 800727a:	e044      	b.n	8007306 <UART_SetConfig+0x34e>
 800727c:	2310      	movs	r3, #16
 800727e:	77fb      	strb	r3, [r7, #31]
 8007280:	bf00      	nop
 8007282:	e040      	b.n	8007306 <UART_SetConfig+0x34e>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a11      	ldr	r2, [pc, #68]	; (80072d0 <UART_SetConfig+0x318>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d139      	bne.n	8007302 <UART_SetConfig+0x34a>
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <UART_SetConfig+0x2fc>)
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800729c:	d027      	beq.n	80072ee <UART_SetConfig+0x336>
 800729e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072a2:	d817      	bhi.n	80072d4 <UART_SetConfig+0x31c>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d01c      	beq.n	80072e2 <UART_SetConfig+0x32a>
 80072a8:	e027      	b.n	80072fa <UART_SetConfig+0x342>
 80072aa:	bf00      	nop
 80072ac:	efff69f3 	.word	0xefff69f3
 80072b0:	40011000 	.word	0x40011000
 80072b4:	40023800 	.word	0x40023800
 80072b8:	40004400 	.word	0x40004400
 80072bc:	40004800 	.word	0x40004800
 80072c0:	40004c00 	.word	0x40004c00
 80072c4:	40005000 	.word	0x40005000
 80072c8:	40011400 	.word	0x40011400
 80072cc:	40007800 	.word	0x40007800
 80072d0:	40007c00 	.word	0x40007c00
 80072d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072d8:	d006      	beq.n	80072e8 <UART_SetConfig+0x330>
 80072da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80072de:	d009      	beq.n	80072f4 <UART_SetConfig+0x33c>
 80072e0:	e00b      	b.n	80072fa <UART_SetConfig+0x342>
 80072e2:	2300      	movs	r3, #0
 80072e4:	77fb      	strb	r3, [r7, #31]
 80072e6:	e00e      	b.n	8007306 <UART_SetConfig+0x34e>
 80072e8:	2302      	movs	r3, #2
 80072ea:	77fb      	strb	r3, [r7, #31]
 80072ec:	e00b      	b.n	8007306 <UART_SetConfig+0x34e>
 80072ee:	2304      	movs	r3, #4
 80072f0:	77fb      	strb	r3, [r7, #31]
 80072f2:	e008      	b.n	8007306 <UART_SetConfig+0x34e>
 80072f4:	2308      	movs	r3, #8
 80072f6:	77fb      	strb	r3, [r7, #31]
 80072f8:	e005      	b.n	8007306 <UART_SetConfig+0x34e>
 80072fa:	2310      	movs	r3, #16
 80072fc:	77fb      	strb	r3, [r7, #31]
 80072fe:	bf00      	nop
 8007300:	e001      	b.n	8007306 <UART_SetConfig+0x34e>
 8007302:	2310      	movs	r3, #16
 8007304:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800730e:	d17f      	bne.n	8007410 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007310:	7ffb      	ldrb	r3, [r7, #31]
 8007312:	2b08      	cmp	r3, #8
 8007314:	d85c      	bhi.n	80073d0 <UART_SetConfig+0x418>
 8007316:	a201      	add	r2, pc, #4	; (adr r2, 800731c <UART_SetConfig+0x364>)
 8007318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731c:	08007341 	.word	0x08007341
 8007320:	08007361 	.word	0x08007361
 8007324:	08007381 	.word	0x08007381
 8007328:	080073d1 	.word	0x080073d1
 800732c:	08007399 	.word	0x08007399
 8007330:	080073d1 	.word	0x080073d1
 8007334:	080073d1 	.word	0x080073d1
 8007338:	080073d1 	.word	0x080073d1
 800733c:	080073b9 	.word	0x080073b9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007340:	f7fd fb3e 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8007344:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	005a      	lsls	r2, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	085b      	lsrs	r3, r3, #1
 8007350:	441a      	add	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	fbb2 f3f3 	udiv	r3, r2, r3
 800735a:	b29b      	uxth	r3, r3
 800735c:	61bb      	str	r3, [r7, #24]
        break;
 800735e:	e03a      	b.n	80073d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007360:	f7fd fb42 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 8007364:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	005a      	lsls	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	441a      	add	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	fbb2 f3f3 	udiv	r3, r2, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	61bb      	str	r3, [r7, #24]
        break;
 800737e:	e02a      	b.n	80073d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	085a      	lsrs	r2, r3, #1
 8007386:	4b5f      	ldr	r3, [pc, #380]	; (8007504 <UART_SetConfig+0x54c>)
 8007388:	4413      	add	r3, r2
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	6852      	ldr	r2, [r2, #4]
 800738e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007392:	b29b      	uxth	r3, r3
 8007394:	61bb      	str	r3, [r7, #24]
        break;
 8007396:	e01e      	b.n	80073d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007398:	f7fd fa2e 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 800739c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	005a      	lsls	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	085b      	lsrs	r3, r3, #1
 80073a8:	441a      	add	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	61bb      	str	r3, [r7, #24]
        break;
 80073b6:	e00e      	b.n	80073d6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	085b      	lsrs	r3, r3, #1
 80073be:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	61bb      	str	r3, [r7, #24]
        break;
 80073ce:	e002      	b.n	80073d6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	75fb      	strb	r3, [r7, #23]
        break;
 80073d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	2b0f      	cmp	r3, #15
 80073da:	d916      	bls.n	800740a <UART_SetConfig+0x452>
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e2:	d212      	bcs.n	800740a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	f023 030f 	bic.w	r3, r3, #15
 80073ec:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	085b      	lsrs	r3, r3, #1
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	897b      	ldrh	r3, [r7, #10]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	897a      	ldrh	r2, [r7, #10]
 8007406:	60da      	str	r2, [r3, #12]
 8007408:	e070      	b.n	80074ec <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	75fb      	strb	r3, [r7, #23]
 800740e:	e06d      	b.n	80074ec <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007410:	7ffb      	ldrb	r3, [r7, #31]
 8007412:	2b08      	cmp	r3, #8
 8007414:	d859      	bhi.n	80074ca <UART_SetConfig+0x512>
 8007416:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0x464>)
 8007418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741c:	08007441 	.word	0x08007441
 8007420:	0800745f 	.word	0x0800745f
 8007424:	0800747d 	.word	0x0800747d
 8007428:	080074cb 	.word	0x080074cb
 800742c:	08007495 	.word	0x08007495
 8007430:	080074cb 	.word	0x080074cb
 8007434:	080074cb 	.word	0x080074cb
 8007438:	080074cb 	.word	0x080074cb
 800743c:	080074b3 	.word	0x080074b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007440:	f7fd fabe 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8007444:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	085a      	lsrs	r2, r3, #1
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	441a      	add	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	b29b      	uxth	r3, r3
 800745a:	61bb      	str	r3, [r7, #24]
        break;
 800745c:	e038      	b.n	80074d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800745e:	f7fd fac3 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 8007462:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	085a      	lsrs	r2, r3, #1
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	441a      	add	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	fbb2 f3f3 	udiv	r3, r2, r3
 8007476:	b29b      	uxth	r3, r3
 8007478:	61bb      	str	r3, [r7, #24]
        break;
 800747a:	e029      	b.n	80074d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	085a      	lsrs	r2, r3, #1
 8007482:	4b21      	ldr	r3, [pc, #132]	; (8007508 <UART_SetConfig+0x550>)
 8007484:	4413      	add	r3, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6852      	ldr	r2, [r2, #4]
 800748a:	fbb3 f3f2 	udiv	r3, r3, r2
 800748e:	b29b      	uxth	r3, r3
 8007490:	61bb      	str	r3, [r7, #24]
        break;
 8007492:	e01d      	b.n	80074d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007494:	f7fd f9b0 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 8007498:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	085a      	lsrs	r2, r3, #1
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	441a      	add	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	61bb      	str	r3, [r7, #24]
        break;
 80074b0:	e00e      	b.n	80074d0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	61bb      	str	r3, [r7, #24]
        break;
 80074c8:	e002      	b.n	80074d0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
        break;
 80074ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b0f      	cmp	r3, #15
 80074d4:	d908      	bls.n	80074e8 <UART_SetConfig+0x530>
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074dc:	d204      	bcs.n	80074e8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	60da      	str	r2, [r3, #12]
 80074e6:	e001      	b.n	80074ec <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3720      	adds	r7, #32
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	01e84800 	.word	0x01e84800
 8007508:	00f42400 	.word	0x00f42400

0800750c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01a      	beq.n	8007622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800760a:	d10a      	bne.n	8007622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	605a      	str	r2, [r3, #4]
  }
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af02      	add	r7, sp, #8
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800765e:	f7fb fa03 	bl	8002a68 <HAL_GetTick>
 8007662:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b08      	cmp	r3, #8
 8007670:	d10e      	bne.n	8007690 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f82a 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e020      	b.n	80076d2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0304 	and.w	r3, r3, #4
 800769a:	2b04      	cmp	r3, #4
 800769c:	d10e      	bne.n	80076bc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800769e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f814 	bl	80076da <UART_WaitOnFlagUntilTimeout>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e00a      	b.n	80076d2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2220      	movs	r2, #32
 80076c0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2220      	movs	r2, #32
 80076c6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	60f8      	str	r0, [r7, #12]
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	603b      	str	r3, [r7, #0]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ea:	e05d      	b.n	80077a8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f2:	d059      	beq.n	80077a8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076f4:	f7fb f9b8 	bl	8002a68 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	429a      	cmp	r2, r3
 8007702:	d302      	bcc.n	800770a <UART_WaitOnFlagUntilTimeout+0x30>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d11b      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007718:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689a      	ldr	r2, [r3, #8]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 0201 	bic.w	r2, r2, #1
 8007728:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2220      	movs	r2, #32
 800772e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2220      	movs	r2, #32
 8007734:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e042      	b.n	80077c8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d02b      	beq.n	80077a8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800775a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775e:	d123      	bne.n	80077a8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007768:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007778:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689a      	ldr	r2, [r3, #8]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0201 	bic.w	r2, r2, #1
 8007788:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2220      	movs	r2, #32
 800778e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e00f      	b.n	80077c8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	4013      	ands	r3, r2
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	bf0c      	ite	eq
 80077b8:	2301      	moveq	r3, #1
 80077ba:	2300      	movne	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	461a      	mov	r2, r3
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d092      	beq.n	80076ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
	...

080077e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e6:	f3ef 8305 	mrs	r3, IPSR
 80077ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10f      	bne.n	8007812 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f2:	f3ef 8310 	mrs	r3, PRIMASK
 80077f6:	607b      	str	r3, [r7, #4]
  return(result);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d105      	bne.n	800780a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80077fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007802:	603b      	str	r3, [r7, #0]
  return(result);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <osKernelInitialize+0x3a>
 800780a:	4b0e      	ldr	r3, [pc, #56]	; (8007844 <osKernelInitialize+0x64>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b02      	cmp	r3, #2
 8007810:	d103      	bne.n	800781a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007812:	f06f 0305 	mvn.w	r3, #5
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e00c      	b.n	8007834 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800781a:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <osKernelInitialize+0x64>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007822:	4b08      	ldr	r3, [pc, #32]	; (8007844 <osKernelInitialize+0x64>)
 8007824:	2201      	movs	r2, #1
 8007826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	e002      	b.n	8007834 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800782e:	f04f 33ff 	mov.w	r3, #4294967295
 8007832:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007834:	68fb      	ldr	r3, [r7, #12]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20000060 	.word	0x20000060

08007848 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800784e:	f3ef 8305 	mrs	r3, IPSR
 8007852:	60bb      	str	r3, [r7, #8]
  return(result);
 8007854:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10f      	bne.n	800787a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800785a:	f3ef 8310 	mrs	r3, PRIMASK
 800785e:	607b      	str	r3, [r7, #4]
  return(result);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d105      	bne.n	8007872 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007866:	f3ef 8311 	mrs	r3, BASEPRI
 800786a:	603b      	str	r3, [r7, #0]
  return(result);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <osKernelStart+0x3a>
 8007872:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <osKernelStart+0x68>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d103      	bne.n	8007882 <osKernelStart+0x3a>
    stat = osErrorISR;
 800787a:	f06f 0305 	mvn.w	r3, #5
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e010      	b.n	80078a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007882:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <osKernelStart+0x68>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d109      	bne.n	800789e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800788a:	f7ff ffa1 	bl	80077d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800788e:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <osKernelStart+0x68>)
 8007890:	2202      	movs	r2, #2
 8007892:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007894:	f001 feda 	bl	800964c <vTaskStartScheduler>
      stat = osOK;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e002      	b.n	80078a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800789e:	f04f 33ff 	mov.w	r3, #4294967295
 80078a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078a4:	68fb      	ldr	r3, [r7, #12]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000060 	.word	0x20000060

080078b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b090      	sub	sp, #64	; 0x40
 80078b8:	af04      	add	r7, sp, #16
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078c4:	f3ef 8305 	mrs	r3, IPSR
 80078c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80078ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 808f 	bne.w	80079f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078d2:	f3ef 8310 	mrs	r3, PRIMASK
 80078d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d105      	bne.n	80078ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078de:	f3ef 8311 	mrs	r3, BASEPRI
 80078e2:	617b      	str	r3, [r7, #20]
  return(result);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <osThreadNew+0x3e>
 80078ea:	4b44      	ldr	r3, [pc, #272]	; (80079fc <osThreadNew+0x148>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d07e      	beq.n	80079f0 <osThreadNew+0x13c>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d07b      	beq.n	80079f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80078f8:	2380      	movs	r3, #128	; 0x80
 80078fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80078fc:	2318      	movs	r3, #24
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8007900:	2300      	movs	r3, #0
 8007902:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8007904:	f04f 33ff 	mov.w	r3, #4294967295
 8007908:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d045      	beq.n	800799c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <osThreadNew+0x6a>
        name = attr->name;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <osThreadNew+0x90>
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	2b38      	cmp	r3, #56	; 0x38
 8007936:	d805      	bhi.n	8007944 <osThreadNew+0x90>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <osThreadNew+0x94>
        return (NULL);
 8007944:	2300      	movs	r3, #0
 8007946:	e054      	b.n	80079f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	089b      	lsrs	r3, r3, #2
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00e      	beq.n	800797e <osThreadNew+0xca>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	2b5b      	cmp	r3, #91	; 0x5b
 8007966:	d90a      	bls.n	800797e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <osThreadNew+0xca>
        mem = 1;
 8007978:	2301      	movs	r3, #1
 800797a:	623b      	str	r3, [r7, #32]
 800797c:	e010      	b.n	80079a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10c      	bne.n	80079a0 <osThreadNew+0xec>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d108      	bne.n	80079a0 <osThreadNew+0xec>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <osThreadNew+0xec>
          mem = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	623b      	str	r3, [r7, #32]
 800799a:	e001      	b.n	80079a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800799c:	2300      	movs	r3, #0
 800799e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d110      	bne.n	80079c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079ae:	9202      	str	r2, [sp, #8]
 80079b0:	9301      	str	r3, [sp, #4]
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f001 fbe9 	bl	8009194 <xTaskCreateStatic>
 80079c2:	4603      	mov	r3, r0
 80079c4:	613b      	str	r3, [r7, #16]
 80079c6:	e013      	b.n	80079f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d110      	bne.n	80079f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	f107 0310 	add.w	r3, r7, #16
 80079d6:	9301      	str	r3, [sp, #4]
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f001 fc37 	bl	8009254 <xTaskCreate>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d001      	beq.n	80079f0 <osThreadNew+0x13c>
          hTask = NULL;
 80079ec:	2300      	movs	r3, #0
 80079ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80079f0:	693b      	ldr	r3, [r7, #16]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3730      	adds	r7, #48	; 0x30
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000060 	.word	0x20000060

08007a00 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a08:	f3ef 8305 	mrs	r3, IPSR
 8007a0c:	613b      	str	r3, [r7, #16]
  return(result);
 8007a0e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10f      	bne.n	8007a34 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a14:	f3ef 8310 	mrs	r3, PRIMASK
 8007a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d105      	bne.n	8007a2c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a20:	f3ef 8311 	mrs	r3, BASEPRI
 8007a24:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d007      	beq.n	8007a3c <osDelay+0x3c>
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <osDelay+0x58>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d103      	bne.n	8007a3c <osDelay+0x3c>
    stat = osErrorISR;
 8007a34:	f06f 0305 	mvn.w	r3, #5
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	e007      	b.n	8007a4c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d002      	beq.n	8007a4c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 fdca 	bl	80095e0 <vTaskDelay>
    }
  }

  return (stat);
 8007a4c:	697b      	ldr	r3, [r7, #20]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20000060 	.word	0x20000060

08007a5c <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a64:	f3ef 8305 	mrs	r3, IPSR
 8007a68:	617b      	str	r3, [r7, #20]
  return(result);
 8007a6a:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10f      	bne.n	8007a90 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a70:	f3ef 8310 	mrs	r3, PRIMASK
 8007a74:	613b      	str	r3, [r7, #16]
  return(result);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d105      	bne.n	8007a88 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8007a80:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d007      	beq.n	8007a98 <osDelayUntil+0x3c>
 8007a88:	4b13      	ldr	r3, [pc, #76]	; (8007ad8 <osDelayUntil+0x7c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d103      	bne.n	8007a98 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8007a90:	f06f 0305 	mvn.w	r3, #5
 8007a94:	61fb      	str	r3, [r7, #28]
 8007a96:	e019      	b.n	8007acc <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8007a9c:	f001 feea 	bl	8009874 <xTaskGetTickCount>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d009      	beq.n	8007ac6 <osDelayUntil+0x6a>
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	db06      	blt.n	8007ac6 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8007ab8:	f107 0308 	add.w	r3, r7, #8
 8007abc:	69b9      	ldr	r1, [r7, #24]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 fd0e 	bl	80094e0 <vTaskDelayUntil>
 8007ac4:	e002      	b.n	8007acc <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007ac6:	f06f 0303 	mvn.w	r3, #3
 8007aca:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8007acc:	69fb      	ldr	r3, [r7, #28]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3720      	adds	r7, #32
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000060 	.word	0x20000060

08007adc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08a      	sub	sp, #40	; 0x28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ae8:	f3ef 8305 	mrs	r3, IPSR
 8007aec:	613b      	str	r3, [r7, #16]
  return(result);
 8007aee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f040 8085 	bne.w	8007c00 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007af6:	f3ef 8310 	mrs	r3, PRIMASK
 8007afa:	60fb      	str	r3, [r7, #12]
  return(result);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d105      	bne.n	8007b0e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007b02:	f3ef 8311 	mrs	r3, BASEPRI
 8007b06:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <osMutexNew+0x3a>
 8007b0e:	4b3f      	ldr	r3, [pc, #252]	; (8007c0c <osMutexNew+0x130>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d074      	beq.n	8007c00 <osMutexNew+0x124>
    if (attr != NULL) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <osMutexNew+0x48>
      type = attr->attr_bits;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	623b      	str	r3, [r7, #32]
 8007b22:	e001      	b.n	8007b28 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <osMutexNew+0x5c>
      rmtx = 1U;
 8007b32:	2301      	movs	r3, #1
 8007b34:	61fb      	str	r3, [r7, #28]
 8007b36:	e001      	b.n	8007b3c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d15c      	bne.n	8007c00 <osMutexNew+0x124>
      mem = -1;
 8007b46:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d015      	beq.n	8007b7e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d006      	beq.n	8007b68 <osMutexNew+0x8c>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b4f      	cmp	r3, #79	; 0x4f
 8007b60:	d902      	bls.n	8007b68 <osMutexNew+0x8c>
          mem = 1;
 8007b62:	2301      	movs	r3, #1
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	e00c      	b.n	8007b82 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d108      	bne.n	8007b82 <osMutexNew+0xa6>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d104      	bne.n	8007b82 <osMutexNew+0xa6>
            mem = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61bb      	str	r3, [r7, #24]
 8007b7c:	e001      	b.n	8007b82 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d112      	bne.n	8007bae <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d007      	beq.n	8007b9e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	4619      	mov	r1, r3
 8007b94:	2004      	movs	r0, #4
 8007b96:	f000 fbfc 	bl	8008392 <xQueueCreateMutexStatic>
 8007b9a:	6278      	str	r0, [r7, #36]	; 0x24
 8007b9c:	e016      	b.n	8007bcc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	f000 fbf4 	bl	8008392 <xQueueCreateMutexStatic>
 8007baa:	6278      	str	r0, [r7, #36]	; 0x24
 8007bac:	e00e      	b.n	8007bcc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10b      	bne.n	8007bcc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d004      	beq.n	8007bc4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8007bba:	2004      	movs	r0, #4
 8007bbc:	f000 fbd1 	bl	8008362 <xQueueCreateMutex>
 8007bc0:	6278      	str	r0, [r7, #36]	; 0x24
 8007bc2:	e003      	b.n	8007bcc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	f000 fbcc 	bl	8008362 <xQueueCreateMutex>
 8007bca:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00c      	beq.n	8007bec <osMutexNew+0x110>
        if (attr != NULL) {
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <osMutexNew+0x104>
          name = attr->name;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e001      	b.n	8007be4 <osMutexNew+0x108>
        } else {
          name = NULL;
 8007be0:	2300      	movs	r3, #0
 8007be2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8007be4:	6979      	ldr	r1, [r7, #20]
 8007be6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007be8:	f001 fa4e 	bl	8009088 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d006      	beq.n	8007c00 <osMutexNew+0x124>
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d003      	beq.n	8007c00 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	f043 0301 	orr.w	r3, r3, #1
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3728      	adds	r7, #40	; 0x28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000060 	.word	0x20000060

08007c10 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08c      	sub	sp, #48	; 0x30
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c20:	f3ef 8305 	mrs	r3, IPSR
 8007c24:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c26:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f040 8087 	bne.w	8007d3c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c32:	617b      	str	r3, [r7, #20]
  return(result);
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d105      	bne.n	8007c46 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c3a:	f3ef 8311 	mrs	r3, BASEPRI
 8007c3e:	613b      	str	r3, [r7, #16]
  return(result);
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <osSemaphoreNew+0x3e>
 8007c46:	4b40      	ldr	r3, [pc, #256]	; (8007d48 <osSemaphoreNew+0x138>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d076      	beq.n	8007d3c <osSemaphoreNew+0x12c>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d073      	beq.n	8007d3c <osSemaphoreNew+0x12c>
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d86f      	bhi.n	8007d3c <osSemaphoreNew+0x12c>
    mem = -1;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c60:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d015      	beq.n	8007c94 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d006      	beq.n	8007c7e <osSemaphoreNew+0x6e>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	2b4f      	cmp	r3, #79	; 0x4f
 8007c76:	d902      	bls.n	8007c7e <osSemaphoreNew+0x6e>
        mem = 1;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	623b      	str	r3, [r7, #32]
 8007c7c:	e00c      	b.n	8007c98 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d108      	bne.n	8007c98 <osSemaphoreNew+0x88>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d104      	bne.n	8007c98 <osSemaphoreNew+0x88>
          mem = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	623b      	str	r3, [r7, #32]
 8007c92:	e001      	b.n	8007c98 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9e:	d04d      	beq.n	8007d3c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d129      	bne.n	8007cfa <osSemaphoreNew+0xea>
        if (mem == 1) {
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d10b      	bne.n	8007cc4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689a      	ldr	r2, [r3, #8]
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	2100      	movs	r1, #0
 8007cba:	2001      	movs	r0, #1
 8007cbc:	f000 fa56 	bl	800816c <xQueueGenericCreateStatic>
 8007cc0:	6278      	str	r0, [r7, #36]	; 0x24
 8007cc2:	e005      	b.n	8007cd0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	2001      	movs	r0, #1
 8007cca:	f000 facc 	bl	8008266 <xQueueGenericCreate>
 8007cce:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d022      	beq.n	8007d1c <osSemaphoreNew+0x10c>
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01f      	beq.n	8007d1c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007cdc:	2300      	movs	r3, #0
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ce4:	f000 fbde 	bl	80084a4 <xQueueGenericSend>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d016      	beq.n	8007d1c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8007cee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cf0:	f001 f87d 	bl	8008dee <vQueueDelete>
            hSemaphore = NULL;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf8:	e010      	b.n	8007d1c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d108      	bne.n	8007d12 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	461a      	mov	r2, r3
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 fb5d 	bl	80083c8 <xQueueCreateCountingSemaphoreStatic>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d10:	e004      	b.n	8007d1c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fb90 	bl	800843a <xQueueCreateCountingSemaphore>
 8007d1a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00c      	beq.n	8007d3c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <osSemaphoreNew+0x120>
          name = attr->name;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	e001      	b.n	8007d34 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8007d30:	2300      	movs	r3, #0
 8007d32:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d38:	f001 f9a6 	bl	8009088 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3728      	adds	r7, #40	; 0x28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000060 	.word	0x20000060

08007d4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007d64:	f06f 0303 	mvn.w	r3, #3
 8007d68:	61fb      	str	r3, [r7, #28]
 8007d6a:	e04b      	b.n	8007e04 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d6c:	f3ef 8305 	mrs	r3, IPSR
 8007d70:	617b      	str	r3, [r7, #20]
  return(result);
 8007d72:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10f      	bne.n	8007d98 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d78:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7c:	613b      	str	r3, [r7, #16]
  return(result);
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d84:	f3ef 8311 	mrs	r3, BASEPRI
 8007d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d026      	beq.n	8007dde <osSemaphoreAcquire+0x92>
 8007d90:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <osSemaphoreAcquire+0xc4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d122      	bne.n	8007dde <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8007d9e:	f06f 0303 	mvn.w	r3, #3
 8007da2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007da4:	e02d      	b.n	8007e02 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007daa:	f107 0308 	add.w	r3, r7, #8
 8007dae:	461a      	mov	r2, r3
 8007db0:	2100      	movs	r1, #0
 8007db2:	69b8      	ldr	r0, [r7, #24]
 8007db4:	f000 ff98 	bl	8008ce8 <xQueueReceiveFromISR>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d003      	beq.n	8007dc6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8007dbe:	f06f 0302 	mvn.w	r3, #2
 8007dc2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8007dc4:	e01d      	b.n	8007e02 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01a      	beq.n	8007e02 <osSemaphoreAcquire+0xb6>
 8007dcc:	4b11      	ldr	r3, [pc, #68]	; (8007e14 <osSemaphoreAcquire+0xc8>)
 8007dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8007ddc:	e011      	b.n	8007e02 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	69b8      	ldr	r0, [r7, #24]
 8007de2:	f000 fe71 	bl	8008ac8 <xQueueSemaphoreTake>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d00b      	beq.n	8007e04 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8007df2:	f06f 0301 	mvn.w	r3, #1
 8007df6:	61fb      	str	r3, [r7, #28]
 8007df8:	e004      	b.n	8007e04 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8007dfa:	f06f 0302 	mvn.w	r3, #2
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	e000      	b.n	8007e04 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8007e02:	bf00      	nop
      }
    }
  }

  return (stat);
 8007e04:	69fb      	ldr	r3, [r7, #28]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000060 	.word	0x20000060
 8007e14:	e000ed04 	.word	0xe000ed04

08007e18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d103      	bne.n	8007e36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007e2e:	f06f 0303 	mvn.w	r3, #3
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	e03e      	b.n	8007eb4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e36:	f3ef 8305 	mrs	r3, IPSR
 8007e3a:	617b      	str	r3, [r7, #20]
  return(result);
 8007e3c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10f      	bne.n	8007e62 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e42:	f3ef 8310 	mrs	r3, PRIMASK
 8007e46:	613b      	str	r3, [r7, #16]
  return(result);
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d105      	bne.n	8007e5a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8007e52:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d01e      	beq.n	8007e98 <osSemaphoreRelease+0x80>
 8007e5a:	4b19      	ldr	r3, [pc, #100]	; (8007ec0 <osSemaphoreRelease+0xa8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d11a      	bne.n	8007e98 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e66:	f107 0308 	add.w	r3, r7, #8
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	69b8      	ldr	r0, [r7, #24]
 8007e6e:	f000 fcb7 	bl	80087e0 <xQueueGiveFromISR>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d003      	beq.n	8007e80 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8007e78:	f06f 0302 	mvn.w	r3, #2
 8007e7c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e7e:	e018      	b.n	8007eb2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d015      	beq.n	8007eb2 <osSemaphoreRelease+0x9a>
 8007e86:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <osSemaphoreRelease+0xac>)
 8007e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8c:	601a      	str	r2, [r3, #0]
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007e96:	e00c      	b.n	8007eb2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007e98:	2300      	movs	r3, #0
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	69b8      	ldr	r0, [r7, #24]
 8007ea0:	f000 fb00 	bl	80084a4 <xQueueGenericSend>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d004      	beq.n	8007eb4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8007eaa:	f06f 0302 	mvn.w	r3, #2
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	e000      	b.n	8007eb4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007eb2:	bf00      	nop
    }
  }

  return (stat);
 8007eb4:	69fb      	ldr	r3, [r7, #28]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20000060 	.word	0x20000060
 8007ec4:	e000ed04 	.word	0xe000ed04

08007ec8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4a07      	ldr	r2, [pc, #28]	; (8007ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8007ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	4a06      	ldr	r2, [pc, #24]	; (8007ef8 <vApplicationGetIdleTaskMemory+0x30>)
 8007ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2280      	movs	r2, #128	; 0x80
 8007ee4:	601a      	str	r2, [r3, #0]
}
 8007ee6:	bf00      	nop
 8007ee8:	3714      	adds	r7, #20
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	20000064 	.word	0x20000064
 8007ef8:	200000c0 	.word	0x200000c0

08007efc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4a07      	ldr	r2, [pc, #28]	; (8007f28 <vApplicationGetTimerTaskMemory+0x2c>)
 8007f0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4a06      	ldr	r2, [pc, #24]	; (8007f2c <vApplicationGetTimerTaskMemory+0x30>)
 8007f12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f1a:	601a      	str	r2, [r3, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	200002c0 	.word	0x200002c0
 8007f2c:	2000031c 	.word	0x2000031c

08007f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f103 0208 	add.w	r2, r3, #8
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f04f 32ff 	mov.w	r2, #4294967295
 8007f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f103 0208 	add.w	r2, r3, #8
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f103 0208 	add.w	r2, r3, #8
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr

08007f70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	601a      	str	r2, [r3, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b085      	sub	sp, #20
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe8:	d103      	bne.n	8007ff2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	e00c      	b.n	800800c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	3308      	adds	r3, #8
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e002      	b.n	8008000 <vListInsert+0x2e>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	429a      	cmp	r2, r3
 800800a:	d2f6      	bcs.n	8007ffa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	683a      	ldr	r2, [r7, #0]
 800801a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	601a      	str	r2, [r3, #0]
}
 8008038:	bf00      	nop
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6892      	ldr	r2, [r2, #8]
 800805a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6852      	ldr	r2, [r2, #4]
 8008064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d103      	bne.n	8008078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	1e5a      	subs	r2, r3, #1
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10b      	bne.n	80080c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80080ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b0:	b672      	cpsid	i
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	b662      	cpsie	i
 80080c0:	60bb      	str	r3, [r7, #8]
 80080c2:	e7fe      	b.n	80080c2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80080c4:	f002 fd50 	bl	800ab68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080d4:	fb01 f303 	mul.w	r3, r1, r3
 80080d8:	441a      	add	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f4:	3b01      	subs	r3, #1
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080fa:	fb01 f303 	mul.w	r3, r1, r3
 80080fe:	441a      	add	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	22ff      	movs	r2, #255	; 0xff
 8008108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	22ff      	movs	r2, #255	; 0xff
 8008110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d114      	bne.n	8008144 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d01a      	beq.n	8008158 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3310      	adds	r3, #16
 8008126:	4618      	mov	r0, r3
 8008128:	f001 fd1e 	bl	8009b68 <xTaskRemoveFromEventList>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d012      	beq.n	8008158 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008132:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <xQueueGenericReset+0xd0>)
 8008134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	e009      	b.n	8008158 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3310      	adds	r3, #16
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff fef1 	bl	8007f30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3324      	adds	r3, #36	; 0x24
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff feec 	bl	8007f30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008158:	f002 fd38 	bl	800abcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800815c:	2301      	movs	r3, #1
}
 800815e:	4618      	mov	r0, r3
 8008160:	3710      	adds	r7, #16
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08e      	sub	sp, #56	; 0x38
 8008170:	af02      	add	r7, sp, #8
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10b      	bne.n	8008198 <xQueueGenericCreateStatic+0x2c>
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	b672      	cpsid	i
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	b662      	cpsie	i
 8008194:	62bb      	str	r3, [r7, #40]	; 0x28
 8008196:	e7fe      	b.n	8008196 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10b      	bne.n	80081b6 <xQueueGenericCreateStatic+0x4a>
 800819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a2:	b672      	cpsid	i
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	b662      	cpsie	i
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
 80081b4:	e7fe      	b.n	80081b4 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <xQueueGenericCreateStatic+0x56>
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <xQueueGenericCreateStatic+0x5a>
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <xQueueGenericCreateStatic+0x5c>
 80081c6:	2300      	movs	r3, #0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d10b      	bne.n	80081e4 <xQueueGenericCreateStatic+0x78>
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	b672      	cpsid	i
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	b662      	cpsie	i
 80081e0:	623b      	str	r3, [r7, #32]
 80081e2:	e7fe      	b.n	80081e2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <xQueueGenericCreateStatic+0x84>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <xQueueGenericCreateStatic+0x88>
 80081f0:	2301      	movs	r3, #1
 80081f2:	e000      	b.n	80081f6 <xQueueGenericCreateStatic+0x8a>
 80081f4:	2300      	movs	r3, #0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10b      	bne.n	8008212 <xQueueGenericCreateStatic+0xa6>
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	b672      	cpsid	i
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	b662      	cpsie	i
 800820e:	61fb      	str	r3, [r7, #28]
 8008210:	e7fe      	b.n	8008210 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008212:	2350      	movs	r3, #80	; 0x50
 8008214:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b50      	cmp	r3, #80	; 0x50
 800821a:	d00b      	beq.n	8008234 <xQueueGenericCreateStatic+0xc8>
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	e7fe      	b.n	8008232 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008234:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00d      	beq.n	800825c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008248:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	68b9      	ldr	r1, [r7, #8]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f846 	bl	80082e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800825c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800825e:	4618      	mov	r0, r3
 8008260:	3730      	adds	r7, #48	; 0x30
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008266:	b580      	push	{r7, lr}
 8008268:	b08a      	sub	sp, #40	; 0x28
 800826a:	af02      	add	r7, sp, #8
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	4613      	mov	r3, r2
 8008272:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10b      	bne.n	8008292 <xQueueGenericCreate+0x2c>
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	b672      	cpsid	i
 8008280:	f383 8811 	msr	BASEPRI, r3
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	f3bf 8f4f 	dsb	sy
 800828c:	b662      	cpsie	i
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	e7fe      	b.n	8008290 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d102      	bne.n	800829e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008298:	2300      	movs	r3, #0
 800829a:	61fb      	str	r3, [r7, #28]
 800829c:	e004      	b.n	80082a8 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	fb02 f303 	mul.w	r3, r2, r3
 80082a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	3350      	adds	r3, #80	; 0x50
 80082ac:	4618      	mov	r0, r3
 80082ae:	f002 fd7d 	bl	800adac <pvPortMalloc>
 80082b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d011      	beq.n	80082de <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	3350      	adds	r3, #80	; 0x50
 80082c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	2200      	movs	r2, #0
 80082c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082cc:	79fa      	ldrb	r2, [r7, #7]
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	4613      	mov	r3, r2
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f805 	bl	80082e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80082de:	69bb      	ldr	r3, [r7, #24]
	}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3720      	adds	r7, #32
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d103      	bne.n	8008304 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	69ba      	ldr	r2, [r7, #24]
 8008300:	601a      	str	r2, [r3, #0]
 8008302:	e002      	b.n	800830a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008316:	2101      	movs	r1, #1
 8008318:	69b8      	ldr	r0, [r7, #24]
 800831a:	f7ff febd 	bl	8008098 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800832e:	b580      	push	{r7, lr}
 8008330:	b082      	sub	sp, #8
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800834e:	2300      	movs	r3, #0
 8008350:	2200      	movs	r2, #0
 8008352:	2100      	movs	r1, #0
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f8a5 	bl	80084a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008362:	b580      	push	{r7, lr}
 8008364:	b086      	sub	sp, #24
 8008366:	af00      	add	r7, sp, #0
 8008368:	4603      	mov	r3, r0
 800836a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800836c:	2301      	movs	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	2300      	movs	r3, #0
 8008372:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	461a      	mov	r2, r3
 8008378:	6939      	ldr	r1, [r7, #16]
 800837a:	6978      	ldr	r0, [r7, #20]
 800837c:	f7ff ff73 	bl	8008266 <xQueueGenericCreate>
 8008380:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff ffd3 	bl	800832e <prvInitialiseMutex>

		return xNewQueue;
 8008388:	68fb      	ldr	r3, [r7, #12]
	}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008392:	b580      	push	{r7, lr}
 8008394:	b088      	sub	sp, #32
 8008396:	af02      	add	r7, sp, #8
 8008398:	4603      	mov	r3, r0
 800839a:	6039      	str	r1, [r7, #0]
 800839c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800839e:	2301      	movs	r3, #1
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	2300      	movs	r3, #0
 80083a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2200      	movs	r2, #0
 80083ae:	6939      	ldr	r1, [r7, #16]
 80083b0:	6978      	ldr	r0, [r7, #20]
 80083b2:	f7ff fedb 	bl	800816c <xQueueGenericCreateStatic>
 80083b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f7ff ffb8 	bl	800832e <prvInitialiseMutex>

		return xNewQueue;
 80083be:	68fb      	ldr	r3, [r7, #12]
	}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08a      	sub	sp, #40	; 0x28
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80083da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083de:	b672      	cpsid	i
 80083e0:	f383 8811 	msr	BASEPRI, r3
 80083e4:	f3bf 8f6f 	isb	sy
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	b662      	cpsie	i
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e7fe      	b.n	80083f0 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d90b      	bls.n	8008412 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	b672      	cpsid	i
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	b662      	cpsie	i
 800840e:	617b      	str	r3, [r7, #20]
 8008410:	e7fe      	b.n	8008410 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008412:	2302      	movs	r3, #2
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	2100      	movs	r1, #0
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f7ff fea5 	bl	800816c <xQueueGenericCreateStatic>
 8008422:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008430:	69fb      	ldr	r3, [r7, #28]
	}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10b      	bne.n	8008462 <xQueueCreateCountingSemaphore+0x28>
 800844a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800844e:	b672      	cpsid	i
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	b662      	cpsie	i
 800845e:	613b      	str	r3, [r7, #16]
 8008460:	e7fe      	b.n	8008460 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d90b      	bls.n	8008482 <xQueueCreateCountingSemaphore+0x48>
 800846a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846e:	b672      	cpsid	i
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	b662      	cpsie	i
 800847e:	60fb      	str	r3, [r7, #12]
 8008480:	e7fe      	b.n	8008480 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008482:	2202      	movs	r2, #2
 8008484:	2100      	movs	r1, #0
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff feed 	bl	8008266 <xQueueGenericCreate>
 800848c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800849a:	697b      	ldr	r3, [r7, #20]
	}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08e      	sub	sp, #56	; 0x38
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084b2:	2300      	movs	r3, #0
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d10b      	bne.n	80084d8 <xQueueGenericSend+0x34>
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	b672      	cpsid	i
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	b662      	cpsie	i
 80084d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80084d6:	e7fe      	b.n	80084d6 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <xQueueGenericSend+0x42>
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <xQueueGenericSend+0x46>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <xQueueGenericSend+0x48>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10b      	bne.n	8008508 <xQueueGenericSend+0x64>
 80084f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f4:	b672      	cpsid	i
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	b662      	cpsie	i
 8008504:	627b      	str	r3, [r7, #36]	; 0x24
 8008506:	e7fe      	b.n	8008506 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	2b02      	cmp	r3, #2
 800850c:	d103      	bne.n	8008516 <xQueueGenericSend+0x72>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <xQueueGenericSend+0x76>
 8008516:	2301      	movs	r3, #1
 8008518:	e000      	b.n	800851c <xQueueGenericSend+0x78>
 800851a:	2300      	movs	r3, #0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10b      	bne.n	8008538 <xQueueGenericSend+0x94>
 8008520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008524:	b672      	cpsid	i
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	b662      	cpsie	i
 8008534:	623b      	str	r3, [r7, #32]
 8008536:	e7fe      	b.n	8008536 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008538:	f001 fcd4 	bl	8009ee4 <xTaskGetSchedulerState>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d102      	bne.n	8008548 <xQueueGenericSend+0xa4>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <xQueueGenericSend+0xa8>
 8008548:	2301      	movs	r3, #1
 800854a:	e000      	b.n	800854e <xQueueGenericSend+0xaa>
 800854c:	2300      	movs	r3, #0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <xQueueGenericSend+0xc6>
 8008552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008556:	b672      	cpsid	i
 8008558:	f383 8811 	msr	BASEPRI, r3
 800855c:	f3bf 8f6f 	isb	sy
 8008560:	f3bf 8f4f 	dsb	sy
 8008564:	b662      	cpsie	i
 8008566:	61fb      	str	r3, [r7, #28]
 8008568:	e7fe      	b.n	8008568 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800856a:	f002 fafd 	bl	800ab68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008576:	429a      	cmp	r2, r3
 8008578:	d302      	bcc.n	8008580 <xQueueGenericSend+0xdc>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d129      	bne.n	80085d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	68b9      	ldr	r1, [r7, #8]
 8008584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008586:	f000 fc6e 	bl	8008e66 <prvCopyDataToQueue>
 800858a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	2b00      	cmp	r3, #0
 8008592:	d010      	beq.n	80085b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	3324      	adds	r3, #36	; 0x24
 8008598:	4618      	mov	r0, r3
 800859a:	f001 fae5 	bl	8009b68 <xTaskRemoveFromEventList>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d013      	beq.n	80085cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085a4:	4b3f      	ldr	r3, [pc, #252]	; (80086a4 <xQueueGenericSend+0x200>)
 80085a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	e00a      	b.n	80085cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d007      	beq.n	80085cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085bc:	4b39      	ldr	r3, [pc, #228]	; (80086a4 <xQueueGenericSend+0x200>)
 80085be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085cc:	f002 fafe 	bl	800abcc <vPortExitCritical>
				return pdPASS;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e063      	b.n	800869c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d103      	bne.n	80085e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085da:	f002 faf7 	bl	800abcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	e05c      	b.n	800869c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085e8:	f107 0314 	add.w	r3, r7, #20
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 fb1f 	bl	8009c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085f2:	2301      	movs	r3, #1
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085f6:	f002 fae9 	bl	800abcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085fa:	f001 f88f 	bl	800971c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085fe:	f002 fab3 	bl	800ab68 <vPortEnterCritical>
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008608:	b25b      	sxtb	r3, r3
 800860a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800860e:	d103      	bne.n	8008618 <xQueueGenericSend+0x174>
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	2200      	movs	r2, #0
 8008614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800861e:	b25b      	sxtb	r3, r3
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d103      	bne.n	800862e <xQueueGenericSend+0x18a>
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800862e:	f002 facd 	bl	800abcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008632:	1d3a      	adds	r2, r7, #4
 8008634:	f107 0314 	add.w	r3, r7, #20
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f001 fb0e 	bl	8009c5c <xTaskCheckForTimeOut>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d124      	bne.n	8008690 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008648:	f000 fd05 	bl	8009056 <prvIsQueueFull>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d018      	beq.n	8008684 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	3310      	adds	r3, #16
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f001 fa32 	bl	8009ac4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008662:	f000 fc90 	bl	8008f86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008666:	f001 f867 	bl	8009738 <xTaskResumeAll>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	f47f af7c 	bne.w	800856a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008672:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <xQueueGenericSend+0x200>)
 8008674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	e772      	b.n	800856a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008686:	f000 fc7e 	bl	8008f86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800868a:	f001 f855 	bl	8009738 <xTaskResumeAll>
 800868e:	e76c      	b.n	800856a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008692:	f000 fc78 	bl	8008f86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008696:	f001 f84f 	bl	8009738 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800869a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800869c:	4618      	mov	r0, r3
 800869e:	3738      	adds	r7, #56	; 0x38
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	e000ed04 	.word	0xe000ed04

080086a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08e      	sub	sp, #56	; 0x38
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10b      	bne.n	80086d8 <xQueueGenericSendFromISR+0x30>
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	b672      	cpsid	i
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	b662      	cpsie	i
 80086d4:	627b      	str	r3, [r7, #36]	; 0x24
 80086d6:	e7fe      	b.n	80086d6 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d103      	bne.n	80086e6 <xQueueGenericSendFromISR+0x3e>
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d101      	bne.n	80086ea <xQueueGenericSendFromISR+0x42>
 80086e6:	2301      	movs	r3, #1
 80086e8:	e000      	b.n	80086ec <xQueueGenericSendFromISR+0x44>
 80086ea:	2300      	movs	r3, #0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10b      	bne.n	8008708 <xQueueGenericSendFromISR+0x60>
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	b672      	cpsid	i
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	b662      	cpsie	i
 8008704:	623b      	str	r3, [r7, #32]
 8008706:	e7fe      	b.n	8008706 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d103      	bne.n	8008716 <xQueueGenericSendFromISR+0x6e>
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <xQueueGenericSendFromISR+0x72>
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <xQueueGenericSendFromISR+0x74>
 800871a:	2300      	movs	r3, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10b      	bne.n	8008738 <xQueueGenericSendFromISR+0x90>
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	b672      	cpsid	i
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	b662      	cpsie	i
 8008734:	61fb      	str	r3, [r7, #28]
 8008736:	e7fe      	b.n	8008736 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008738:	f002 faf6 	bl	800ad28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800873c:	f3ef 8211 	mrs	r2, BASEPRI
 8008740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008744:	b672      	cpsid	i
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	b662      	cpsie	i
 8008754:	61ba      	str	r2, [r7, #24]
 8008756:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008758:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008764:	429a      	cmp	r2, r3
 8008766:	d302      	bcc.n	800876e <xQueueGenericSendFromISR+0xc6>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d12c      	bne.n	80087c8 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008774:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	68b9      	ldr	r1, [r7, #8]
 800877c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800877e:	f000 fb72 	bl	8008e66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008782:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d112      	bne.n	80087b2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d016      	beq.n	80087c2 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	3324      	adds	r3, #36	; 0x24
 8008798:	4618      	mov	r0, r3
 800879a:	f001 f9e5 	bl	8009b68 <xTaskRemoveFromEventList>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d00e      	beq.n	80087c2 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00b      	beq.n	80087c2 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	601a      	str	r2, [r3, #0]
 80087b0:	e007      	b.n	80087c2 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087b6:	3301      	adds	r3, #1
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	b25a      	sxtb	r2, r3
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80087c2:	2301      	movs	r3, #1
 80087c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80087c6:	e001      	b.n	80087cc <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	637b      	str	r3, [r7, #52]	; 0x34
 80087cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3738      	adds	r7, #56	; 0x38
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08e      	sub	sp, #56	; 0x38
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80087ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10b      	bne.n	800880c <xQueueGiveFromISR+0x2c>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	b672      	cpsid	i
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	b662      	cpsie	i
 8008808:	623b      	str	r3, [r7, #32]
 800880a:	e7fe      	b.n	800880a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00b      	beq.n	800882c <xQueueGiveFromISR+0x4c>
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	b672      	cpsid	i
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	b662      	cpsie	i
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	e7fe      	b.n	800882a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d103      	bne.n	800883c <xQueueGiveFromISR+0x5c>
 8008834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <xQueueGiveFromISR+0x60>
 800883c:	2301      	movs	r3, #1
 800883e:	e000      	b.n	8008842 <xQueueGiveFromISR+0x62>
 8008840:	2300      	movs	r3, #0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <xQueueGiveFromISR+0x7e>
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	b672      	cpsid	i
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	b662      	cpsie	i
 800885a:	61bb      	str	r3, [r7, #24]
 800885c:	e7fe      	b.n	800885c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800885e:	f002 fa63 	bl	800ad28 <vPortValidateInterruptPriority>
	__asm volatile
 8008862:	f3ef 8211 	mrs	r2, BASEPRI
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	b672      	cpsid	i
 800886c:	f383 8811 	msr	BASEPRI, r3
 8008870:	f3bf 8f6f 	isb	sy
 8008874:	f3bf 8f4f 	dsb	sy
 8008878:	b662      	cpsie	i
 800887a:	617a      	str	r2, [r7, #20]
 800887c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800887e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800888e:	429a      	cmp	r2, r3
 8008890:	d22b      	bcs.n	80088ea <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80088a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ac:	d112      	bne.n	80088d4 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d016      	beq.n	80088e4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	3324      	adds	r3, #36	; 0x24
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 f954 	bl	8009b68 <xTaskRemoveFromEventList>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00e      	beq.n	80088e4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00b      	beq.n	80088e4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	2201      	movs	r2, #1
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	e007      	b.n	80088e4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80088d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d8:	3301      	adds	r3, #1
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	b25a      	sxtb	r2, r3
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80088e4:	2301      	movs	r3, #1
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
 80088e8:	e001      	b.n	80088ee <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3738      	adds	r7, #56	; 0x38
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08c      	sub	sp, #48	; 0x30
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008910:	2300      	movs	r3, #0
 8008912:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10b      	bne.n	8008936 <xQueueReceive+0x32>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	b672      	cpsid	i
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	b662      	cpsie	i
 8008932:	623b      	str	r3, [r7, #32]
 8008934:	e7fe      	b.n	8008934 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d103      	bne.n	8008944 <xQueueReceive+0x40>
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <xQueueReceive+0x44>
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <xQueueReceive+0x46>
 8008948:	2300      	movs	r3, #0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10b      	bne.n	8008966 <xQueueReceive+0x62>
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	b672      	cpsid	i
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	b662      	cpsie	i
 8008962:	61fb      	str	r3, [r7, #28]
 8008964:	e7fe      	b.n	8008964 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008966:	f001 fabd 	bl	8009ee4 <xTaskGetSchedulerState>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d102      	bne.n	8008976 <xQueueReceive+0x72>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <xQueueReceive+0x76>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueReceive+0x78>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <xQueueReceive+0x94>
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	b672      	cpsid	i
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	b662      	cpsie	i
 8008994:	61bb      	str	r3, [r7, #24]
 8008996:	e7fe      	b.n	8008996 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008998:	f002 f8e6 	bl	800ab68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d01f      	beq.n	80089e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089a8:	68b9      	ldr	r1, [r7, #8]
 80089aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ac:	f000 fac5 	bl	8008f3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	1e5a      	subs	r2, r3, #1
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00f      	beq.n	80089e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	3310      	adds	r3, #16
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 f8cf 	bl	8009b68 <xTaskRemoveFromEventList>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d007      	beq.n	80089e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089d0:	4b3c      	ldr	r3, [pc, #240]	; (8008ac4 <xQueueReceive+0x1c0>)
 80089d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d6:	601a      	str	r2, [r3, #0]
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089e0:	f002 f8f4 	bl	800abcc <vPortExitCritical>
				return pdPASS;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e069      	b.n	8008abc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d103      	bne.n	80089f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ee:	f002 f8ed 	bl	800abcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e062      	b.n	8008abc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d106      	bne.n	8008a0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089fc:	f107 0310 	add.w	r3, r7, #16
 8008a00:	4618      	mov	r0, r3
 8008a02:	f001 f915 	bl	8009c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a06:	2301      	movs	r3, #1
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a0a:	f002 f8df 	bl	800abcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a0e:	f000 fe85 	bl	800971c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a12:	f002 f8a9 	bl	800ab68 <vPortEnterCritical>
 8008a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a1c:	b25b      	sxtb	r3, r3
 8008a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a22:	d103      	bne.n	8008a2c <xQueueReceive+0x128>
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a32:	b25b      	sxtb	r3, r3
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d103      	bne.n	8008a42 <xQueueReceive+0x13e>
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a42:	f002 f8c3 	bl	800abcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a46:	1d3a      	adds	r2, r7, #4
 8008a48:	f107 0310 	add.w	r3, r7, #16
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 f904 	bl	8009c5c <xTaskCheckForTimeOut>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d123      	bne.n	8008aa2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a5c:	f000 fae5 	bl	800902a <prvIsQueueEmpty>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d017      	beq.n	8008a96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	3324      	adds	r3, #36	; 0x24
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 f828 	bl	8009ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a76:	f000 fa86 	bl	8008f86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a7a:	f000 fe5d 	bl	8009738 <xTaskResumeAll>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d189      	bne.n	8008998 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008a84:	4b0f      	ldr	r3, [pc, #60]	; (8008ac4 <xQueueReceive+0x1c0>)
 8008a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	e780      	b.n	8008998 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a98:	f000 fa75 	bl	8008f86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a9c:	f000 fe4c 	bl	8009738 <xTaskResumeAll>
 8008aa0:	e77a      	b.n	8008998 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aa4:	f000 fa6f 	bl	8008f86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aa8:	f000 fe46 	bl	8009738 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aae:	f000 fabc 	bl	800902a <prvIsQueueEmpty>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f43f af6f 	beq.w	8008998 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008aba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3730      	adds	r7, #48	; 0x30
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	e000ed04 	.word	0xe000ed04

08008ac8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08e      	sub	sp, #56	; 0x38
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ada:	2300      	movs	r3, #0
 8008adc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <xQueueSemaphoreTake+0x34>
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	b672      	cpsid	i
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	b662      	cpsie	i
 8008af8:	623b      	str	r3, [r7, #32]
 8008afa:	e7fe      	b.n	8008afa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d00b      	beq.n	8008b1c <xQueueSemaphoreTake+0x54>
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	b672      	cpsid	i
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	b662      	cpsie	i
 8008b18:	61fb      	str	r3, [r7, #28]
 8008b1a:	e7fe      	b.n	8008b1a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b1c:	f001 f9e2 	bl	8009ee4 <xTaskGetSchedulerState>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d102      	bne.n	8008b2c <xQueueSemaphoreTake+0x64>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <xQueueSemaphoreTake+0x68>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e000      	b.n	8008b32 <xQueueSemaphoreTake+0x6a>
 8008b30:	2300      	movs	r3, #0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10b      	bne.n	8008b4e <xQueueSemaphoreTake+0x86>
 8008b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3a:	b672      	cpsid	i
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	b662      	cpsie	i
 8008b4a:	61bb      	str	r3, [r7, #24]
 8008b4c:	e7fe      	b.n	8008b4c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b4e:	f002 f80b 	bl	800ab68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b56:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d024      	beq.n	8008ba8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	1e5a      	subs	r2, r3, #1
 8008b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d104      	bne.n	8008b78 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008b6e:	f001 fb33 	bl	800a1d8 <pvTaskIncrementMutexHeldCount>
 8008b72:	4602      	mov	r2, r0
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00f      	beq.n	8008ba0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b82:	3310      	adds	r3, #16
 8008b84:	4618      	mov	r0, r3
 8008b86:	f000 ffef 	bl	8009b68 <xTaskRemoveFromEventList>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d007      	beq.n	8008ba0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b90:	4b54      	ldr	r3, [pc, #336]	; (8008ce4 <xQueueSemaphoreTake+0x21c>)
 8008b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ba0:	f002 f814 	bl	800abcc <vPortExitCritical>
				return pdPASS;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e098      	b.n	8008cda <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d112      	bne.n	8008bd4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <xQueueSemaphoreTake+0x104>
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	b672      	cpsid	i
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	b662      	cpsie	i
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	e7fe      	b.n	8008bca <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008bcc:	f001 fffe 	bl	800abcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e082      	b.n	8008cda <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d106      	bne.n	8008be8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bda:	f107 030c 	add.w	r3, r7, #12
 8008bde:	4618      	mov	r0, r3
 8008be0:	f001 f826 	bl	8009c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008be4:	2301      	movs	r3, #1
 8008be6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008be8:	f001 fff0 	bl	800abcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bec:	f000 fd96 	bl	800971c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bf0:	f001 ffba 	bl	800ab68 <vPortEnterCritical>
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bfa:	b25b      	sxtb	r3, r3
 8008bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c00:	d103      	bne.n	8008c0a <xQueueSemaphoreTake+0x142>
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c10:	b25b      	sxtb	r3, r3
 8008c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c16:	d103      	bne.n	8008c20 <xQueueSemaphoreTake+0x158>
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c20:	f001 ffd4 	bl	800abcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c24:	463a      	mov	r2, r7
 8008c26:	f107 030c 	add.w	r3, r7, #12
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f001 f815 	bl	8009c5c <xTaskCheckForTimeOut>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d132      	bne.n	8008c9e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c3a:	f000 f9f6 	bl	800902a <prvIsQueueEmpty>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d026      	beq.n	8008c92 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d109      	bne.n	8008c60 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008c4c:	f001 ff8c 	bl	800ab68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 f963 	bl	8009f20 <xTaskPriorityInherit>
 8008c5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008c5c:	f001 ffb6 	bl	800abcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	3324      	adds	r3, #36	; 0x24
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 ff2b 	bl	8009ac4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c70:	f000 f989 	bl	8008f86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c74:	f000 fd60 	bl	8009738 <xTaskResumeAll>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f47f af67 	bne.w	8008b4e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008c80:	4b18      	ldr	r3, [pc, #96]	; (8008ce4 <xQueueSemaphoreTake+0x21c>)
 8008c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	e75d      	b.n	8008b4e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008c92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c94:	f000 f977 	bl	8008f86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c98:	f000 fd4e 	bl	8009738 <xTaskResumeAll>
 8008c9c:	e757      	b.n	8008b4e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ca0:	f000 f971 	bl	8008f86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ca4:	f000 fd48 	bl	8009738 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008caa:	f000 f9be 	bl	800902a <prvIsQueueEmpty>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f43f af4c 	beq.w	8008b4e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00d      	beq.n	8008cd8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008cbc:	f001 ff54 	bl	800ab68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cc2:	f000 f8b8 	bl	8008e36 <prvGetDisinheritPriorityAfterTimeout>
 8008cc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 f9fe 	bl	800a0d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008cd4:	f001 ff7a 	bl	800abcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3738      	adds	r7, #56	; 0x38
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	e000ed04 	.word	0xe000ed04

08008ce8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08e      	sub	sp, #56	; 0x38
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10b      	bne.n	8008d16 <xQueueReceiveFromISR+0x2e>
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	b672      	cpsid	i
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	b662      	cpsie	i
 8008d12:	623b      	str	r3, [r7, #32]
 8008d14:	e7fe      	b.n	8008d14 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <xQueueReceiveFromISR+0x3c>
 8008d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <xQueueReceiveFromISR+0x40>
 8008d24:	2301      	movs	r3, #1
 8008d26:	e000      	b.n	8008d2a <xQueueReceiveFromISR+0x42>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10b      	bne.n	8008d46 <xQueueReceiveFromISR+0x5e>
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	b672      	cpsid	i
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	b662      	cpsie	i
 8008d42:	61fb      	str	r3, [r7, #28]
 8008d44:	e7fe      	b.n	8008d44 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d46:	f001 ffef 	bl	800ad28 <vPortValidateInterruptPriority>
	__asm volatile
 8008d4a:	f3ef 8211 	mrs	r2, BASEPRI
 8008d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d52:	b672      	cpsid	i
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	b662      	cpsie	i
 8008d62:	61ba      	str	r2, [r7, #24]
 8008d64:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008d66:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d68:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d02f      	beq.n	8008dd6 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d80:	68b9      	ldr	r1, [r7, #8]
 8008d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d84:	f000 f8d9 	bl	8008f3a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8a:	1e5a      	subs	r2, r3, #1
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008d90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d98:	d112      	bne.n	8008dc0 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d016      	beq.n	8008dd0 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	3310      	adds	r3, #16
 8008da6:	4618      	mov	r0, r3
 8008da8:	f000 fede 	bl	8009b68 <xTaskRemoveFromEventList>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00e      	beq.n	8008dd0 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]
 8008dbe:	e007      	b.n	8008dd0 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	b25a      	sxtb	r2, r3
 8008dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd4:	e001      	b.n	8008dda <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3738      	adds	r7, #56	; 0x38
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d10b      	bne.n	8008e18 <vQueueDelete+0x2a>
	__asm volatile
 8008e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e04:	b672      	cpsid	i
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	b662      	cpsie	i
 8008e14:	60bb      	str	r3, [r7, #8]
 8008e16:	e7fe      	b.n	8008e16 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 f95d 	bl	80090d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d102      	bne.n	8008e2e <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f002 f887 	bl	800af3c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008e2e:	bf00      	nop
 8008e30:	3710      	adds	r7, #16
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}

08008e36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e36:	b480      	push	{r7}
 8008e38:	b085      	sub	sp, #20
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d006      	beq.n	8008e54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e001      	b.n	8008e58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e58:	68fb      	ldr	r3, [r7, #12]
	}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3714      	adds	r7, #20
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b086      	sub	sp, #24
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008e72:	2300      	movs	r3, #0
 8008e74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10d      	bne.n	8008ea0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d14d      	bne.n	8008f28 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f001 f8ad 	bl	8009ff0 <xTaskPriorityDisinherit>
 8008e96:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	609a      	str	r2, [r3, #8]
 8008e9e:	e043      	b.n	8008f28 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d119      	bne.n	8008eda <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6858      	ldr	r0, [r3, #4]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eae:	461a      	mov	r2, r3
 8008eb0:	68b9      	ldr	r1, [r7, #8]
 8008eb2:	f002 f97f 	bl	800b1b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	685a      	ldr	r2, [r3, #4]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	441a      	add	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d32b      	bcc.n	8008f28 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	605a      	str	r2, [r3, #4]
 8008ed8:	e026      	b.n	8008f28 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	68d8      	ldr	r0, [r3, #12]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	f002 f965 	bl	800b1b4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef2:	425b      	negs	r3, r3
 8008ef4:	441a      	add	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	68da      	ldr	r2, [r3, #12]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d207      	bcs.n	8008f16 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689a      	ldr	r2, [r3, #8]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	425b      	negs	r3, r3
 8008f10:	441a      	add	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d105      	bne.n	8008f28 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d002      	beq.n	8008f28 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	1c5a      	adds	r2, r3, #1
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f30:	697b      	ldr	r3, [r7, #20]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b082      	sub	sp, #8
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d018      	beq.n	8008f7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68da      	ldr	r2, [r3, #12]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f54:	441a      	add	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d303      	bcc.n	8008f6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	68d9      	ldr	r1, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f76:	461a      	mov	r2, r3
 8008f78:	6838      	ldr	r0, [r7, #0]
 8008f7a:	f002 f91b 	bl	800b1b4 <memcpy>
	}
}
 8008f7e:	bf00      	nop
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b084      	sub	sp, #16
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008f8e:	f001 fdeb 	bl	800ab68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f98:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008f9a:	e011      	b.n	8008fc0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d012      	beq.n	8008fca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	3324      	adds	r3, #36	; 0x24
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fddd 	bl	8009b68 <xTaskRemoveFromEventList>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fb4:	f000 feb6 	bl	8009d24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	dce9      	bgt.n	8008f9c <prvUnlockQueue+0x16>
 8008fc8:	e000      	b.n	8008fcc <prvUnlockQueue+0x46>
					break;
 8008fca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	22ff      	movs	r2, #255	; 0xff
 8008fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008fd4:	f001 fdfa 	bl	800abcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008fd8:	f001 fdc6 	bl	800ab68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fe2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008fe4:	e011      	b.n	800900a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d012      	beq.n	8009014 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3310      	adds	r3, #16
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f000 fdb8 	bl	8009b68 <xTaskRemoveFromEventList>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ffe:	f000 fe91 	bl	8009d24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	3b01      	subs	r3, #1
 8009006:	b2db      	uxtb	r3, r3
 8009008:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800900a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dce9      	bgt.n	8008fe6 <prvUnlockQueue+0x60>
 8009012:	e000      	b.n	8009016 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009014:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	22ff      	movs	r2, #255	; 0xff
 800901a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800901e:	f001 fdd5 	bl	800abcc <vPortExitCritical>
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009032:	f001 fd99 	bl	800ab68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800903e:	2301      	movs	r3, #1
 8009040:	60fb      	str	r3, [r7, #12]
 8009042:	e001      	b.n	8009048 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009048:	f001 fdc0 	bl	800abcc <vPortExitCritical>

	return xReturn;
 800904c:	68fb      	ldr	r3, [r7, #12]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800905e:	f001 fd83 	bl	800ab68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906a:	429a      	cmp	r2, r3
 800906c:	d102      	bne.n	8009074 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800906e:	2301      	movs	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
 8009072:	e001      	b.n	8009078 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009078:	f001 fda8 	bl	800abcc <vPortExitCritical>

	return xReturn;
 800907c:	68fb      	ldr	r3, [r7, #12]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	e014      	b.n	80090c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009098:	4a0e      	ldr	r2, [pc, #56]	; (80090d4 <vQueueAddToRegistry+0x4c>)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10b      	bne.n	80090bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80090a4:	490b      	ldr	r1, [pc, #44]	; (80090d4 <vQueueAddToRegistry+0x4c>)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80090ae:	4a09      	ldr	r2, [pc, #36]	; (80090d4 <vQueueAddToRegistry+0x4c>)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	4413      	add	r3, r2
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80090ba:	e005      	b.n	80090c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3301      	adds	r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2b07      	cmp	r3, #7
 80090c6:	d9e7      	bls.n	8009098 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80090c8:	bf00      	nop
 80090ca:	3714      	adds	r7, #20
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	20005038 	.word	0x20005038

080090d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e016      	b.n	8009114 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80090e6:	4a10      	ldr	r2, [pc, #64]	; (8009128 <vQueueUnregisterQueue+0x50>)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	4413      	add	r3, r2
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d10b      	bne.n	800910e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80090f6:	4a0c      	ldr	r2, [pc, #48]	; (8009128 <vQueueUnregisterQueue+0x50>)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2100      	movs	r1, #0
 80090fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009100:	4a09      	ldr	r2, [pc, #36]	; (8009128 <vQueueUnregisterQueue+0x50>)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	00db      	lsls	r3, r3, #3
 8009106:	4413      	add	r3, r2
 8009108:	2200      	movs	r2, #0
 800910a:	605a      	str	r2, [r3, #4]
				break;
 800910c:	e005      	b.n	800911a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	3301      	adds	r3, #1
 8009112:	60fb      	str	r3, [r7, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2b07      	cmp	r3, #7
 8009118:	d9e5      	bls.n	80090e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	20005038 	.word	0x20005038

0800912c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	60f8      	str	r0, [r7, #12]
 8009134:	60b9      	str	r1, [r7, #8]
 8009136:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800913c:	f001 fd14 	bl	800ab68 <vPortEnterCritical>
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009146:	b25b      	sxtb	r3, r3
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914c:	d103      	bne.n	8009156 <vQueueWaitForMessageRestricted+0x2a>
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800915c:	b25b      	sxtb	r3, r3
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d103      	bne.n	800916c <vQueueWaitForMessageRestricted+0x40>
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800916c:	f001 fd2e 	bl	800abcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009174:	2b00      	cmp	r3, #0
 8009176:	d106      	bne.n	8009186 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	3324      	adds	r3, #36	; 0x24
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	68b9      	ldr	r1, [r7, #8]
 8009180:	4618      	mov	r0, r3
 8009182:	f000 fcc5 	bl	8009b10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009186:	6978      	ldr	r0, [r7, #20]
 8009188:	f7ff fefd 	bl	8008f86 <prvUnlockQueue>
	}
 800918c:	bf00      	nop
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009194:	b580      	push	{r7, lr}
 8009196:	b08e      	sub	sp, #56	; 0x38
 8009198:	af04      	add	r7, sp, #16
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]
 80091a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80091a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10b      	bne.n	80091c0 <xTaskCreateStatic+0x2c>
 80091a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ac:	b672      	cpsid	i
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	b662      	cpsie	i
 80091bc:	623b      	str	r3, [r7, #32]
 80091be:	e7fe      	b.n	80091be <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10b      	bne.n	80091de <xTaskCreateStatic+0x4a>
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	b672      	cpsid	i
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	b662      	cpsie	i
 80091da:	61fb      	str	r3, [r7, #28]
 80091dc:	e7fe      	b.n	80091dc <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80091de:	235c      	movs	r3, #92	; 0x5c
 80091e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2b5c      	cmp	r3, #92	; 0x5c
 80091e6:	d00b      	beq.n	8009200 <xTaskCreateStatic+0x6c>
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	b672      	cpsid	i
 80091ee:	f383 8811 	msr	BASEPRI, r3
 80091f2:	f3bf 8f6f 	isb	sy
 80091f6:	f3bf 8f4f 	dsb	sy
 80091fa:	b662      	cpsie	i
 80091fc:	61bb      	str	r3, [r7, #24]
 80091fe:	e7fe      	b.n	80091fe <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009200:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01e      	beq.n	8009246 <xTaskCreateStatic+0xb2>
 8009208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01b      	beq.n	8009246 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800920e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009216:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	2202      	movs	r2, #2
 800921c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009220:	2300      	movs	r3, #0
 8009222:	9303      	str	r3, [sp, #12]
 8009224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009226:	9302      	str	r3, [sp, #8]
 8009228:	f107 0314 	add.w	r3, r7, #20
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f850 	bl	80092de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800923e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009240:	f000 f8de 	bl	8009400 <prvAddNewTaskToReadyList>
 8009244:	e001      	b.n	800924a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800924a:	697b      	ldr	r3, [r7, #20]
	}
 800924c:	4618      	mov	r0, r3
 800924e:	3728      	adds	r7, #40	; 0x28
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009254:	b580      	push	{r7, lr}
 8009256:	b08c      	sub	sp, #48	; 0x30
 8009258:	af04      	add	r7, sp, #16
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	4613      	mov	r3, r2
 8009262:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009264:	88fb      	ldrh	r3, [r7, #6]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4618      	mov	r0, r3
 800926a:	f001 fd9f 	bl	800adac <pvPortMalloc>
 800926e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00e      	beq.n	8009294 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009276:	205c      	movs	r0, #92	; 0x5c
 8009278:	f001 fd98 	bl	800adac <pvPortMalloc>
 800927c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d003      	beq.n	800928c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	631a      	str	r2, [r3, #48]	; 0x30
 800928a:	e005      	b.n	8009298 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800928c:	6978      	ldr	r0, [r7, #20]
 800928e:	f001 fe55 	bl	800af3c <vPortFree>
 8009292:	e001      	b.n	8009298 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d017      	beq.n	80092ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80092a6:	88fa      	ldrh	r2, [r7, #6]
 80092a8:	2300      	movs	r3, #0
 80092aa:	9303      	str	r3, [sp, #12]
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	9302      	str	r3, [sp, #8]
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	9301      	str	r3, [sp, #4]
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	68b9      	ldr	r1, [r7, #8]
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f80e 	bl	80092de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092c2:	69f8      	ldr	r0, [r7, #28]
 80092c4:	f000 f89c 	bl	8009400 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80092c8:	2301      	movs	r3, #1
 80092ca:	61bb      	str	r3, [r7, #24]
 80092cc:	e002      	b.n	80092d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80092ce:	f04f 33ff 	mov.w	r3, #4294967295
 80092d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80092d4:	69bb      	ldr	r3, [r7, #24]
	}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3720      	adds	r7, #32
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}

080092de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80092de:	b580      	push	{r7, lr}
 80092e0:	b088      	sub	sp, #32
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	60f8      	str	r0, [r7, #12]
 80092e6:	60b9      	str	r1, [r7, #8]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	461a      	mov	r2, r3
 80092f6:	21a5      	movs	r1, #165	; 0xa5
 80092f8:	f001 ff67 	bl	800b1ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80092fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009300:	6879      	ldr	r1, [r7, #4]
 8009302:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009306:	440b      	add	r3, r1
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4413      	add	r3, r2
 800930c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	f023 0307 	bic.w	r3, r3, #7
 8009314:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	f003 0307 	and.w	r3, r3, #7
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <prvInitialiseNewTask+0x5a>
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	b672      	cpsid	i
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	b662      	cpsie	i
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e7fe      	b.n	8009336 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d01f      	beq.n	800937e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800933e:	2300      	movs	r3, #0
 8009340:	61fb      	str	r3, [r7, #28]
 8009342:	e012      	b.n	800936a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	4413      	add	r3, r2
 800934a:	7819      	ldrb	r1, [r3, #0]
 800934c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	3334      	adds	r3, #52	; 0x34
 8009354:	460a      	mov	r2, r1
 8009356:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4413      	add	r3, r2
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d006      	beq.n	8009372 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	3301      	adds	r3, #1
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	2b0f      	cmp	r3, #15
 800936e:	d9e9      	bls.n	8009344 <prvInitialiseNewTask+0x66>
 8009370:	e000      	b.n	8009374 <prvInitialiseNewTask+0x96>
			{
				break;
 8009372:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800937c:	e003      	b.n	8009386 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	2200      	movs	r2, #0
 8009382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	2b37      	cmp	r3, #55	; 0x37
 800938a:	d901      	bls.n	8009390 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800938c:	2337      	movs	r3, #55	; 0x37
 800938e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009394:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800939a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	2200      	movs	r2, #0
 80093a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	3304      	adds	r3, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7fe fde2 	bl	8007f70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	3318      	adds	r3, #24
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7fe fddd 	bl	8007f70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	2200      	movs	r2, #0
 80093d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80093d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80093da:	683a      	ldr	r2, [r7, #0]
 80093dc:	68f9      	ldr	r1, [r7, #12]
 80093de:	69b8      	ldr	r0, [r7, #24]
 80093e0:	f001 fab6 	bl	800a950 <pxPortInitialiseStack>
 80093e4:	4602      	mov	r2, r0
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80093ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80093f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093f6:	bf00      	nop
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009408:	f001 fbae 	bl	800ab68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800940c:	4b2d      	ldr	r3, [pc, #180]	; (80094c4 <prvAddNewTaskToReadyList+0xc4>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	4a2c      	ldr	r2, [pc, #176]	; (80094c4 <prvAddNewTaskToReadyList+0xc4>)
 8009414:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009416:	4b2c      	ldr	r3, [pc, #176]	; (80094c8 <prvAddNewTaskToReadyList+0xc8>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d109      	bne.n	8009432 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800941e:	4a2a      	ldr	r2, [pc, #168]	; (80094c8 <prvAddNewTaskToReadyList+0xc8>)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009424:	4b27      	ldr	r3, [pc, #156]	; (80094c4 <prvAddNewTaskToReadyList+0xc4>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d110      	bne.n	800944e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800942c:	f000 fc9e 	bl	8009d6c <prvInitialiseTaskLists>
 8009430:	e00d      	b.n	800944e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009432:	4b26      	ldr	r3, [pc, #152]	; (80094cc <prvAddNewTaskToReadyList+0xcc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800943a:	4b23      	ldr	r3, [pc, #140]	; (80094c8 <prvAddNewTaskToReadyList+0xc8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	429a      	cmp	r2, r3
 8009446:	d802      	bhi.n	800944e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009448:	4a1f      	ldr	r2, [pc, #124]	; (80094c8 <prvAddNewTaskToReadyList+0xc8>)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800944e:	4b20      	ldr	r3, [pc, #128]	; (80094d0 <prvAddNewTaskToReadyList+0xd0>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	4a1e      	ldr	r2, [pc, #120]	; (80094d0 <prvAddNewTaskToReadyList+0xd0>)
 8009456:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009458:	4b1d      	ldr	r3, [pc, #116]	; (80094d0 <prvAddNewTaskToReadyList+0xd0>)
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009464:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <prvAddNewTaskToReadyList+0xd4>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	429a      	cmp	r2, r3
 800946a:	d903      	bls.n	8009474 <prvAddNewTaskToReadyList+0x74>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009470:	4a18      	ldr	r2, [pc, #96]	; (80094d4 <prvAddNewTaskToReadyList+0xd4>)
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4a15      	ldr	r2, [pc, #84]	; (80094d8 <prvAddNewTaskToReadyList+0xd8>)
 8009482:	441a      	add	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3304      	adds	r3, #4
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f7fe fd7d 	bl	8007f8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009490:	f001 fb9c 	bl	800abcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009494:	4b0d      	ldr	r3, [pc, #52]	; (80094cc <prvAddNewTaskToReadyList+0xcc>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00e      	beq.n	80094ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800949c:	4b0a      	ldr	r3, [pc, #40]	; (80094c8 <prvAddNewTaskToReadyList+0xc8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d207      	bcs.n	80094ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <prvAddNewTaskToReadyList+0xdc>)
 80094ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000bf0 	.word	0x20000bf0
 80094c8:	2000071c 	.word	0x2000071c
 80094cc:	20000bfc 	.word	0x20000bfc
 80094d0:	20000c0c 	.word	0x20000c0c
 80094d4:	20000bf8 	.word	0x20000bf8
 80094d8:	20000720 	.word	0x20000720
 80094dc:	e000ed04 	.word	0xe000ed04

080094e0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	; 0x28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10b      	bne.n	800950c <vTaskDelayUntil+0x2c>
 80094f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f8:	b672      	cpsid	i
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	b662      	cpsie	i
 8009508:	617b      	str	r3, [r7, #20]
 800950a:	e7fe      	b.n	800950a <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10b      	bne.n	800952a <vTaskDelayUntil+0x4a>
 8009512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009516:	b672      	cpsid	i
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	b662      	cpsie	i
 8009526:	613b      	str	r3, [r7, #16]
 8009528:	e7fe      	b.n	8009528 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800952a:	4b2a      	ldr	r3, [pc, #168]	; (80095d4 <vTaskDelayUntil+0xf4>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <vTaskDelayUntil+0x6a>
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	b672      	cpsid	i
 8009538:	f383 8811 	msr	BASEPRI, r3
 800953c:	f3bf 8f6f 	isb	sy
 8009540:	f3bf 8f4f 	dsb	sy
 8009544:	b662      	cpsie	i
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	e7fe      	b.n	8009548 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800954a:	f000 f8e7 	bl	800971c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800954e:	4b22      	ldr	r3, [pc, #136]	; (80095d8 <vTaskDelayUntil+0xf8>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	4413      	add	r3, r2
 800955c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	6a3a      	ldr	r2, [r7, #32]
 8009564:	429a      	cmp	r2, r3
 8009566:	d20b      	bcs.n	8009580 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	69fa      	ldr	r2, [r7, #28]
 800956e:	429a      	cmp	r2, r3
 8009570:	d211      	bcs.n	8009596 <vTaskDelayUntil+0xb6>
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	6a3b      	ldr	r3, [r7, #32]
 8009576:	429a      	cmp	r2, r3
 8009578:	d90d      	bls.n	8009596 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800957a:	2301      	movs	r3, #1
 800957c:	627b      	str	r3, [r7, #36]	; 0x24
 800957e:	e00a      	b.n	8009596 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	69fa      	ldr	r2, [r7, #28]
 8009586:	429a      	cmp	r2, r3
 8009588:	d303      	bcc.n	8009592 <vTaskDelayUntil+0xb2>
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	429a      	cmp	r2, r3
 8009590:	d901      	bls.n	8009596 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8009592:	2301      	movs	r3, #1
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	69fa      	ldr	r2, [r7, #28]
 800959a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d006      	beq.n	80095b0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80095a2:	69fa      	ldr	r2, [r7, #28]
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	2100      	movs	r1, #0
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fe28 	bl	800a200 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80095b0:	f000 f8c2 	bl	8009738 <xTaskResumeAll>
 80095b4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d107      	bne.n	80095cc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80095bc:	4b07      	ldr	r3, [pc, #28]	; (80095dc <vTaskDelayUntil+0xfc>)
 80095be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095cc:	bf00      	nop
 80095ce:	3728      	adds	r7, #40	; 0x28
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20000c18 	.word	0x20000c18
 80095d8:	20000bf4 	.word	0x20000bf4
 80095dc:	e000ed04 	.word	0xe000ed04

080095e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d018      	beq.n	8009624 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80095f2:	4b14      	ldr	r3, [pc, #80]	; (8009644 <vTaskDelay+0x64>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00b      	beq.n	8009612 <vTaskDelay+0x32>
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	b672      	cpsid	i
 8009600:	f383 8811 	msr	BASEPRI, r3
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	b662      	cpsie	i
 800960e:	60bb      	str	r3, [r7, #8]
 8009610:	e7fe      	b.n	8009610 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8009612:	f000 f883 	bl	800971c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009616:	2100      	movs	r1, #0
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fdf1 	bl	800a200 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800961e:	f000 f88b 	bl	8009738 <xTaskResumeAll>
 8009622:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d107      	bne.n	800963a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800962a:	4b07      	ldr	r3, [pc, #28]	; (8009648 <vTaskDelay+0x68>)
 800962c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	f3bf 8f4f 	dsb	sy
 8009636:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000c18 	.word	0x20000c18
 8009648:	e000ed04 	.word	0xe000ed04

0800964c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b08a      	sub	sp, #40	; 0x28
 8009650:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009652:	2300      	movs	r3, #0
 8009654:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009656:	2300      	movs	r3, #0
 8009658:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800965a:	463a      	mov	r2, r7
 800965c:	1d39      	adds	r1, r7, #4
 800965e:	f107 0308 	add.w	r3, r7, #8
 8009662:	4618      	mov	r0, r3
 8009664:	f7fe fc30 	bl	8007ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009668:	6839      	ldr	r1, [r7, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	9202      	str	r2, [sp, #8]
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	2300      	movs	r3, #0
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	2300      	movs	r3, #0
 8009678:	460a      	mov	r2, r1
 800967a:	4922      	ldr	r1, [pc, #136]	; (8009704 <vTaskStartScheduler+0xb8>)
 800967c:	4822      	ldr	r0, [pc, #136]	; (8009708 <vTaskStartScheduler+0xbc>)
 800967e:	f7ff fd89 	bl	8009194 <xTaskCreateStatic>
 8009682:	4602      	mov	r2, r0
 8009684:	4b21      	ldr	r3, [pc, #132]	; (800970c <vTaskStartScheduler+0xc0>)
 8009686:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009688:	4b20      	ldr	r3, [pc, #128]	; (800970c <vTaskStartScheduler+0xc0>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009690:	2301      	movs	r3, #1
 8009692:	617b      	str	r3, [r7, #20]
 8009694:	e001      	b.n	800969a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009696:	2300      	movs	r3, #0
 8009698:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d102      	bne.n	80096a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096a0:	f000 fe02 	bl	800a2a8 <xTimerCreateTimerTask>
 80096a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d117      	bne.n	80096dc <vTaskStartScheduler+0x90>
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	b672      	cpsid	i
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	b662      	cpsie	i
 80096c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096c2:	4b13      	ldr	r3, [pc, #76]	; (8009710 <vTaskStartScheduler+0xc4>)
 80096c4:	f04f 32ff 	mov.w	r2, #4294967295
 80096c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096ca:	4b12      	ldr	r3, [pc, #72]	; (8009714 <vTaskStartScheduler+0xc8>)
 80096cc:	2201      	movs	r2, #1
 80096ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096d0:	4b11      	ldr	r3, [pc, #68]	; (8009718 <vTaskStartScheduler+0xcc>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096d6:	f001 f9cb 	bl	800aa70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096da:	e00f      	b.n	80096fc <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e2:	d10b      	bne.n	80096fc <vTaskStartScheduler+0xb0>
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	b672      	cpsid	i
 80096ea:	f383 8811 	msr	BASEPRI, r3
 80096ee:	f3bf 8f6f 	isb	sy
 80096f2:	f3bf 8f4f 	dsb	sy
 80096f6:	b662      	cpsie	i
 80096f8:	60fb      	str	r3, [r7, #12]
 80096fa:	e7fe      	b.n	80096fa <vTaskStartScheduler+0xae>
}
 80096fc:	bf00      	nop
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	0800b244 	.word	0x0800b244
 8009708:	08009d3d 	.word	0x08009d3d
 800970c:	20000c14 	.word	0x20000c14
 8009710:	20000c10 	.word	0x20000c10
 8009714:	20000bfc 	.word	0x20000bfc
 8009718:	20000bf4 	.word	0x20000bf4

0800971c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <vTaskSuspendAll+0x18>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3301      	adds	r3, #1
 8009726:	4a03      	ldr	r2, [pc, #12]	; (8009734 <vTaskSuspendAll+0x18>)
 8009728:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800972a:	bf00      	nop
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr
 8009734:	20000c18 	.word	0x20000c18

08009738 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800973e:	2300      	movs	r3, #0
 8009740:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009742:	2300      	movs	r3, #0
 8009744:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009746:	4b42      	ldr	r3, [pc, #264]	; (8009850 <xTaskResumeAll+0x118>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10b      	bne.n	8009766 <xTaskResumeAll+0x2e>
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	b672      	cpsid	i
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	b662      	cpsie	i
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	e7fe      	b.n	8009764 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009766:	f001 f9ff 	bl	800ab68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800976a:	4b39      	ldr	r3, [pc, #228]	; (8009850 <xTaskResumeAll+0x118>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3b01      	subs	r3, #1
 8009770:	4a37      	ldr	r2, [pc, #220]	; (8009850 <xTaskResumeAll+0x118>)
 8009772:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009774:	4b36      	ldr	r3, [pc, #216]	; (8009850 <xTaskResumeAll+0x118>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d162      	bne.n	8009842 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800977c:	4b35      	ldr	r3, [pc, #212]	; (8009854 <xTaskResumeAll+0x11c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d05e      	beq.n	8009842 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009784:	e02f      	b.n	80097e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009786:	4b34      	ldr	r3, [pc, #208]	; (8009858 <xTaskResumeAll+0x120>)
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3318      	adds	r3, #24
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe fc56 	bl	8008044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3304      	adds	r3, #4
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe fc51 	bl	8008044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a6:	4b2d      	ldr	r3, [pc, #180]	; (800985c <xTaskResumeAll+0x124>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d903      	bls.n	80097b6 <xTaskResumeAll+0x7e>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	4a2a      	ldr	r2, [pc, #168]	; (800985c <xTaskResumeAll+0x124>)
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4a27      	ldr	r2, [pc, #156]	; (8009860 <xTaskResumeAll+0x128>)
 80097c4:	441a      	add	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f7fe fbdc 	bl	8007f8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d6:	4b23      	ldr	r3, [pc, #140]	; (8009864 <xTaskResumeAll+0x12c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097dc:	429a      	cmp	r2, r3
 80097de:	d302      	bcc.n	80097e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80097e0:	4b21      	ldr	r3, [pc, #132]	; (8009868 <xTaskResumeAll+0x130>)
 80097e2:	2201      	movs	r2, #1
 80097e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097e6:	4b1c      	ldr	r3, [pc, #112]	; (8009858 <xTaskResumeAll+0x120>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1cb      	bne.n	8009786 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80097f4:	f000 fb56 	bl	8009ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80097f8:	4b1c      	ldr	r3, [pc, #112]	; (800986c <xTaskResumeAll+0x134>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d010      	beq.n	8009826 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009804:	f000 f846 	bl	8009894 <xTaskIncrementTick>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800980e:	4b16      	ldr	r3, [pc, #88]	; (8009868 <xTaskResumeAll+0x130>)
 8009810:	2201      	movs	r2, #1
 8009812:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	3b01      	subs	r3, #1
 8009818:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1f1      	bne.n	8009804 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009820:	4b12      	ldr	r3, [pc, #72]	; (800986c <xTaskResumeAll+0x134>)
 8009822:	2200      	movs	r2, #0
 8009824:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009826:	4b10      	ldr	r3, [pc, #64]	; (8009868 <xTaskResumeAll+0x130>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d009      	beq.n	8009842 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800982e:	2301      	movs	r3, #1
 8009830:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009832:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <xTaskResumeAll+0x138>)
 8009834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009842:	f001 f9c3 	bl	800abcc <vPortExitCritical>

	return xAlreadyYielded;
 8009846:	68bb      	ldr	r3, [r7, #8]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	20000c18 	.word	0x20000c18
 8009854:	20000bf0 	.word	0x20000bf0
 8009858:	20000bb0 	.word	0x20000bb0
 800985c:	20000bf8 	.word	0x20000bf8
 8009860:	20000720 	.word	0x20000720
 8009864:	2000071c 	.word	0x2000071c
 8009868:	20000c04 	.word	0x20000c04
 800986c:	20000c00 	.word	0x20000c00
 8009870:	e000ed04 	.word	0xe000ed04

08009874 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <xTaskGetTickCount+0x1c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009880:	687b      	ldr	r3, [r7, #4]
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000bf4 	.word	0x20000bf4

08009894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800989e:	4b4f      	ldr	r3, [pc, #316]	; (80099dc <xTaskIncrementTick+0x148>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f040 808a 	bne.w	80099bc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098a8:	4b4d      	ldr	r3, [pc, #308]	; (80099e0 <xTaskIncrementTick+0x14c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3301      	adds	r3, #1
 80098ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098b0:	4a4b      	ldr	r2, [pc, #300]	; (80099e0 <xTaskIncrementTick+0x14c>)
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d121      	bne.n	8009900 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098bc:	4b49      	ldr	r3, [pc, #292]	; (80099e4 <xTaskIncrementTick+0x150>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00b      	beq.n	80098de <xTaskIncrementTick+0x4a>
 80098c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ca:	b672      	cpsid	i
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	b662      	cpsie	i
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	e7fe      	b.n	80098dc <xTaskIncrementTick+0x48>
 80098de:	4b41      	ldr	r3, [pc, #260]	; (80099e4 <xTaskIncrementTick+0x150>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	4b40      	ldr	r3, [pc, #256]	; (80099e8 <xTaskIncrementTick+0x154>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a3e      	ldr	r2, [pc, #248]	; (80099e4 <xTaskIncrementTick+0x150>)
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	4a3e      	ldr	r2, [pc, #248]	; (80099e8 <xTaskIncrementTick+0x154>)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	4b3e      	ldr	r3, [pc, #248]	; (80099ec <xTaskIncrementTick+0x158>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3301      	adds	r3, #1
 80098f8:	4a3c      	ldr	r2, [pc, #240]	; (80099ec <xTaskIncrementTick+0x158>)
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	f000 fad2 	bl	8009ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009900:	4b3b      	ldr	r3, [pc, #236]	; (80099f0 <xTaskIncrementTick+0x15c>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	429a      	cmp	r2, r3
 8009908:	d349      	bcc.n	800999e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800990a:	4b36      	ldr	r3, [pc, #216]	; (80099e4 <xTaskIncrementTick+0x150>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d104      	bne.n	800991e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009914:	4b36      	ldr	r3, [pc, #216]	; (80099f0 <xTaskIncrementTick+0x15c>)
 8009916:	f04f 32ff 	mov.w	r2, #4294967295
 800991a:	601a      	str	r2, [r3, #0]
					break;
 800991c:	e03f      	b.n	800999e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800991e:	4b31      	ldr	r3, [pc, #196]	; (80099e4 <xTaskIncrementTick+0x150>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68db      	ldr	r3, [r3, #12]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	429a      	cmp	r2, r3
 8009934:	d203      	bcs.n	800993e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009936:	4a2e      	ldr	r2, [pc, #184]	; (80099f0 <xTaskIncrementTick+0x15c>)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800993c:	e02f      	b.n	800999e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	3304      	adds	r3, #4
 8009942:	4618      	mov	r0, r3
 8009944:	f7fe fb7e 	bl	8008044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994c:	2b00      	cmp	r3, #0
 800994e:	d004      	beq.n	800995a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	3318      	adds	r3, #24
 8009954:	4618      	mov	r0, r3
 8009956:	f7fe fb75 	bl	8008044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <xTaskIncrementTick+0x160>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	429a      	cmp	r2, r3
 8009964:	d903      	bls.n	800996e <xTaskIncrementTick+0xda>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996a:	4a22      	ldr	r2, [pc, #136]	; (80099f4 <xTaskIncrementTick+0x160>)
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009972:	4613      	mov	r3, r2
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4a1f      	ldr	r2, [pc, #124]	; (80099f8 <xTaskIncrementTick+0x164>)
 800997c:	441a      	add	r2, r3
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	3304      	adds	r3, #4
 8009982:	4619      	mov	r1, r3
 8009984:	4610      	mov	r0, r2
 8009986:	f7fe fb00 	bl	8007f8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998e:	4b1b      	ldr	r3, [pc, #108]	; (80099fc <xTaskIncrementTick+0x168>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	429a      	cmp	r2, r3
 8009996:	d3b8      	bcc.n	800990a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800999c:	e7b5      	b.n	800990a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800999e:	4b17      	ldr	r3, [pc, #92]	; (80099fc <xTaskIncrementTick+0x168>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a4:	4914      	ldr	r1, [pc, #80]	; (80099f8 <xTaskIncrementTick+0x164>)
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d907      	bls.n	80099c6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80099b6:	2301      	movs	r3, #1
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e004      	b.n	80099c6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80099bc:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <xTaskIncrementTick+0x16c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3301      	adds	r3, #1
 80099c2:	4a0f      	ldr	r2, [pc, #60]	; (8009a00 <xTaskIncrementTick+0x16c>)
 80099c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80099c6:	4b0f      	ldr	r3, [pc, #60]	; (8009a04 <xTaskIncrementTick+0x170>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80099ce:	2301      	movs	r3, #1
 80099d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80099d2:	697b      	ldr	r3, [r7, #20]
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3718      	adds	r7, #24
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000c18 	.word	0x20000c18
 80099e0:	20000bf4 	.word	0x20000bf4
 80099e4:	20000ba8 	.word	0x20000ba8
 80099e8:	20000bac 	.word	0x20000bac
 80099ec:	20000c08 	.word	0x20000c08
 80099f0:	20000c10 	.word	0x20000c10
 80099f4:	20000bf8 	.word	0x20000bf8
 80099f8:	20000720 	.word	0x20000720
 80099fc:	2000071c 	.word	0x2000071c
 8009a00:	20000c00 	.word	0x20000c00
 8009a04:	20000c04 	.word	0x20000c04

08009a08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a0e:	4b28      	ldr	r3, [pc, #160]	; (8009ab0 <vTaskSwitchContext+0xa8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d003      	beq.n	8009a1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a16:	4b27      	ldr	r3, [pc, #156]	; (8009ab4 <vTaskSwitchContext+0xac>)
 8009a18:	2201      	movs	r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a1c:	e042      	b.n	8009aa4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009a1e:	4b25      	ldr	r3, [pc, #148]	; (8009ab4 <vTaskSwitchContext+0xac>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a24:	4b24      	ldr	r3, [pc, #144]	; (8009ab8 <vTaskSwitchContext+0xb0>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	e011      	b.n	8009a50 <vTaskSwitchContext+0x48>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d10b      	bne.n	8009a4a <vTaskSwitchContext+0x42>
 8009a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a36:	b672      	cpsid	i
 8009a38:	f383 8811 	msr	BASEPRI, r3
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f3bf 8f4f 	dsb	sy
 8009a44:	b662      	cpsie	i
 8009a46:	607b      	str	r3, [r7, #4]
 8009a48:	e7fe      	b.n	8009a48 <vTaskSwitchContext+0x40>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	491a      	ldr	r1, [pc, #104]	; (8009abc <vTaskSwitchContext+0xb4>)
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4613      	mov	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	440b      	add	r3, r1
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d0e3      	beq.n	8009a2c <vTaskSwitchContext+0x24>
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	4613      	mov	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4a13      	ldr	r2, [pc, #76]	; (8009abc <vTaskSwitchContext+0xb4>)
 8009a70:	4413      	add	r3, r2
 8009a72:	60bb      	str	r3, [r7, #8]
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	605a      	str	r2, [r3, #4]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	3308      	adds	r3, #8
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d104      	bne.n	8009a94 <vTaskSwitchContext+0x8c>
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	685a      	ldr	r2, [r3, #4]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	605a      	str	r2, [r3, #4]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	4a09      	ldr	r2, [pc, #36]	; (8009ac0 <vTaskSwitchContext+0xb8>)
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	4a06      	ldr	r2, [pc, #24]	; (8009ab8 <vTaskSwitchContext+0xb0>)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	6013      	str	r3, [r2, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	20000c18 	.word	0x20000c18
 8009ab4:	20000c04 	.word	0x20000c04
 8009ab8:	20000bf8 	.word	0x20000bf8
 8009abc:	20000720 	.word	0x20000720
 8009ac0:	2000071c 	.word	0x2000071c

08009ac4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d10b      	bne.n	8009aec <vTaskPlaceOnEventList+0x28>
 8009ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad8:	b672      	cpsid	i
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	b662      	cpsie	i
 8009ae8:	60fb      	str	r3, [r7, #12]
 8009aea:	e7fe      	b.n	8009aea <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009aec:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <vTaskPlaceOnEventList+0x48>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3318      	adds	r3, #24
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7fe fa6c 	bl	8007fd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009afa:	2101      	movs	r1, #1
 8009afc:	6838      	ldr	r0, [r7, #0]
 8009afe:	f000 fb7f 	bl	800a200 <prvAddCurrentTaskToDelayedList>
}
 8009b02:	bf00      	nop
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	2000071c 	.word	0x2000071c

08009b10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10b      	bne.n	8009b3a <vTaskPlaceOnEventListRestricted+0x2a>
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	b672      	cpsid	i
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	b662      	cpsie	i
 8009b36:	617b      	str	r3, [r7, #20]
 8009b38:	e7fe      	b.n	8009b38 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b3a:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3318      	adds	r3, #24
 8009b40:	4619      	mov	r1, r3
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f7fe fa21 	bl	8007f8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	68b8      	ldr	r0, [r7, #8]
 8009b58:	f000 fb52 	bl	800a200 <prvAddCurrentTaskToDelayedList>
	}
 8009b5c:	bf00      	nop
 8009b5e:	3718      	adds	r7, #24
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	2000071c 	.word	0x2000071c

08009b68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10b      	bne.n	8009b96 <xTaskRemoveFromEventList+0x2e>
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	b672      	cpsid	i
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	b662      	cpsie	i
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	e7fe      	b.n	8009b94 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	3318      	adds	r3, #24
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fa52 	bl	8008044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba0:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <xTaskRemoveFromEventList+0xb0>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d11d      	bne.n	8009be4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	3304      	adds	r3, #4
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7fe fa49 	bl	8008044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	4b19      	ldr	r3, [pc, #100]	; (8009c1c <xTaskRemoveFromEventList+0xb4>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d903      	bls.n	8009bc6 <xTaskRemoveFromEventList+0x5e>
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	4a16      	ldr	r2, [pc, #88]	; (8009c1c <xTaskRemoveFromEventList+0xb4>)
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4a13      	ldr	r2, [pc, #76]	; (8009c20 <xTaskRemoveFromEventList+0xb8>)
 8009bd4:	441a      	add	r2, r3
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7fe f9d4 	bl	8007f8a <vListInsertEnd>
 8009be2:	e005      	b.n	8009bf0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	3318      	adds	r3, #24
 8009be8:	4619      	mov	r1, r3
 8009bea:	480e      	ldr	r0, [pc, #56]	; (8009c24 <xTaskRemoveFromEventList+0xbc>)
 8009bec:	f7fe f9cd 	bl	8007f8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf4:	4b0c      	ldr	r3, [pc, #48]	; (8009c28 <xTaskRemoveFromEventList+0xc0>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d905      	bls.n	8009c0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c02:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <xTaskRemoveFromEventList+0xc4>)
 8009c04:	2201      	movs	r2, #1
 8009c06:	601a      	str	r2, [r3, #0]
 8009c08:	e001      	b.n	8009c0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c0e:	697b      	ldr	r3, [r7, #20]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000c18 	.word	0x20000c18
 8009c1c:	20000bf8 	.word	0x20000bf8
 8009c20:	20000720 	.word	0x20000720
 8009c24:	20000bb0 	.word	0x20000bb0
 8009c28:	2000071c 	.word	0x2000071c
 8009c2c:	20000c04 	.word	0x20000c04

08009c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c38:	4b06      	ldr	r3, [pc, #24]	; (8009c54 <vTaskInternalSetTimeOutState+0x24>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c40:	4b05      	ldr	r3, [pc, #20]	; (8009c58 <vTaskInternalSetTimeOutState+0x28>)
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	605a      	str	r2, [r3, #4]
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	20000c08 	.word	0x20000c08
 8009c58:	20000bf4 	.word	0x20000bf4

08009c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b088      	sub	sp, #32
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10b      	bne.n	8009c84 <xTaskCheckForTimeOut+0x28>
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	b672      	cpsid	i
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	b662      	cpsie	i
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	e7fe      	b.n	8009c82 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d10b      	bne.n	8009ca2 <xTaskCheckForTimeOut+0x46>
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	b672      	cpsid	i
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	b662      	cpsie	i
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e7fe      	b.n	8009ca0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8009ca2:	f000 ff61 	bl	800ab68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ca6:	4b1d      	ldr	r3, [pc, #116]	; (8009d1c <xTaskCheckForTimeOut+0xc0>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbe:	d102      	bne.n	8009cc6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	61fb      	str	r3, [r7, #28]
 8009cc4:	e023      	b.n	8009d0e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	4b15      	ldr	r3, [pc, #84]	; (8009d20 <xTaskCheckForTimeOut+0xc4>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d007      	beq.n	8009ce2 <xTaskCheckForTimeOut+0x86>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	69ba      	ldr	r2, [r7, #24]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d302      	bcc.n	8009ce2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	61fb      	str	r3, [r7, #28]
 8009ce0:	e015      	b.n	8009d0e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d20b      	bcs.n	8009d04 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff ff99 	bl	8009c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61fb      	str	r3, [r7, #28]
 8009d02:	e004      	b.n	8009d0e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d0e:	f000 ff5d 	bl	800abcc <vPortExitCritical>

	return xReturn;
 8009d12:	69fb      	ldr	r3, [r7, #28]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3720      	adds	r7, #32
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20000bf4 	.word	0x20000bf4
 8009d20:	20000c08 	.word	0x20000c08

08009d24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d24:	b480      	push	{r7}
 8009d26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d28:	4b03      	ldr	r3, [pc, #12]	; (8009d38 <vTaskMissedYield+0x14>)
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	601a      	str	r2, [r3, #0]
}
 8009d2e:	bf00      	nop
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr
 8009d38:	20000c04 	.word	0x20000c04

08009d3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d44:	f000 f852 	bl	8009dec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d48:	4b06      	ldr	r3, [pc, #24]	; (8009d64 <prvIdleTask+0x28>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d9f9      	bls.n	8009d44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <prvIdleTask+0x2c>)
 8009d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d60:	e7f0      	b.n	8009d44 <prvIdleTask+0x8>
 8009d62:	bf00      	nop
 8009d64:	20000720 	.word	0x20000720
 8009d68:	e000ed04 	.word	0xe000ed04

08009d6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d72:	2300      	movs	r3, #0
 8009d74:	607b      	str	r3, [r7, #4]
 8009d76:	e00c      	b.n	8009d92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4a12      	ldr	r2, [pc, #72]	; (8009dcc <prvInitialiseTaskLists+0x60>)
 8009d84:	4413      	add	r3, r2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe f8d2 	bl	8007f30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	607b      	str	r3, [r7, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2b37      	cmp	r3, #55	; 0x37
 8009d96:	d9ef      	bls.n	8009d78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d98:	480d      	ldr	r0, [pc, #52]	; (8009dd0 <prvInitialiseTaskLists+0x64>)
 8009d9a:	f7fe f8c9 	bl	8007f30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d9e:	480d      	ldr	r0, [pc, #52]	; (8009dd4 <prvInitialiseTaskLists+0x68>)
 8009da0:	f7fe f8c6 	bl	8007f30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009da4:	480c      	ldr	r0, [pc, #48]	; (8009dd8 <prvInitialiseTaskLists+0x6c>)
 8009da6:	f7fe f8c3 	bl	8007f30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009daa:	480c      	ldr	r0, [pc, #48]	; (8009ddc <prvInitialiseTaskLists+0x70>)
 8009dac:	f7fe f8c0 	bl	8007f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009db0:	480b      	ldr	r0, [pc, #44]	; (8009de0 <prvInitialiseTaskLists+0x74>)
 8009db2:	f7fe f8bd 	bl	8007f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009db6:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <prvInitialiseTaskLists+0x78>)
 8009db8:	4a05      	ldr	r2, [pc, #20]	; (8009dd0 <prvInitialiseTaskLists+0x64>)
 8009dba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	; (8009de8 <prvInitialiseTaskLists+0x7c>)
 8009dbe:	4a05      	ldr	r2, [pc, #20]	; (8009dd4 <prvInitialiseTaskLists+0x68>)
 8009dc0:	601a      	str	r2, [r3, #0]
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000720 	.word	0x20000720
 8009dd0:	20000b80 	.word	0x20000b80
 8009dd4:	20000b94 	.word	0x20000b94
 8009dd8:	20000bb0 	.word	0x20000bb0
 8009ddc:	20000bc4 	.word	0x20000bc4
 8009de0:	20000bdc 	.word	0x20000bdc
 8009de4:	20000ba8 	.word	0x20000ba8
 8009de8:	20000bac 	.word	0x20000bac

08009dec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009df2:	e019      	b.n	8009e28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009df4:	f000 feb8 	bl	800ab68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009df8:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <prvCheckTasksWaitingTermination+0x4c>)
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7fe f91d 	bl	8008044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e0a:	4b0c      	ldr	r3, [pc, #48]	; (8009e3c <prvCheckTasksWaitingTermination+0x50>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <prvCheckTasksWaitingTermination+0x50>)
 8009e12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e14:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <prvCheckTasksWaitingTermination+0x54>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	4a09      	ldr	r2, [pc, #36]	; (8009e40 <prvCheckTasksWaitingTermination+0x54>)
 8009e1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e1e:	f000 fed5 	bl	800abcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f80e 	bl	8009e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <prvCheckTasksWaitingTermination+0x54>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1e1      	bne.n	8009df4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	20000bc4 	.word	0x20000bc4
 8009e3c:	20000bf0 	.word	0x20000bf0
 8009e40:	20000bd8 	.word	0x20000bd8

08009e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d108      	bne.n	8009e68 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f001 f86e 	bl	800af3c <vPortFree>
				vPortFree( pxTCB );
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f001 f86b 	bl	800af3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e66:	e019      	b.n	8009e9c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d103      	bne.n	8009e7a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 f862 	bl	800af3c <vPortFree>
	}
 8009e78:	e010      	b.n	8009e9c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d00b      	beq.n	8009e9c <prvDeleteTCB+0x58>
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	b672      	cpsid	i
 8009e8a:	f383 8811 	msr	BASEPRI, r3
 8009e8e:	f3bf 8f6f 	isb	sy
 8009e92:	f3bf 8f4f 	dsb	sy
 8009e96:	b662      	cpsie	i
 8009e98:	60fb      	str	r3, [r7, #12]
 8009e9a:	e7fe      	b.n	8009e9a <prvDeleteTCB+0x56>
	}
 8009e9c:	bf00      	nop
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eaa:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <prvResetNextTaskUnblockTime+0x38>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d104      	bne.n	8009ebe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8009eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009eba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ebc:	e008      	b.n	8009ed0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ebe:	4b07      	ldr	r3, [pc, #28]	; (8009edc <prvResetNextTaskUnblockTime+0x38>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	4a04      	ldr	r2, [pc, #16]	; (8009ee0 <prvResetNextTaskUnblockTime+0x3c>)
 8009ece:	6013      	str	r3, [r2, #0]
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	20000ba8 	.word	0x20000ba8
 8009ee0:	20000c10 	.word	0x20000c10

08009ee4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <xTaskGetSchedulerState+0x34>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d102      	bne.n	8009ef8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	607b      	str	r3, [r7, #4]
 8009ef6:	e008      	b.n	8009f0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ef8:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <xTaskGetSchedulerState+0x38>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d102      	bne.n	8009f06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f00:	2302      	movs	r3, #2
 8009f02:	607b      	str	r3, [r7, #4]
 8009f04:	e001      	b.n	8009f0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f06:	2300      	movs	r3, #0
 8009f08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f0a:	687b      	ldr	r3, [r7, #4]
	}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	20000bfc 	.word	0x20000bfc
 8009f1c:	20000c18 	.word	0x20000c18

08009f20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d051      	beq.n	8009fda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f3a:	4b2a      	ldr	r3, [pc, #168]	; (8009fe4 <xTaskPriorityInherit+0xc4>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d241      	bcs.n	8009fc8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	db06      	blt.n	8009f5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f4c:	4b25      	ldr	r3, [pc, #148]	; (8009fe4 <xTaskPriorityInherit+0xc4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	6959      	ldr	r1, [r3, #20]
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4a1f      	ldr	r2, [pc, #124]	; (8009fe8 <xTaskPriorityInherit+0xc8>)
 8009f6c:	4413      	add	r3, r2
 8009f6e:	4299      	cmp	r1, r3
 8009f70:	d122      	bne.n	8009fb8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	3304      	adds	r3, #4
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe f864 	bl	8008044 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f7c:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <xTaskPriorityInherit+0xc4>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8a:	4b18      	ldr	r3, [pc, #96]	; (8009fec <xTaskPriorityInherit+0xcc>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d903      	bls.n	8009f9a <xTaskPriorityInherit+0x7a>
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f96:	4a15      	ldr	r2, [pc, #84]	; (8009fec <xTaskPriorityInherit+0xcc>)
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4a10      	ldr	r2, [pc, #64]	; (8009fe8 <xTaskPriorityInherit+0xc8>)
 8009fa8:	441a      	add	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	f7fd ffea 	bl	8007f8a <vListInsertEnd>
 8009fb6:	e004      	b.n	8009fc2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <xTaskPriorityInherit+0xc4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	60fb      	str	r3, [r7, #12]
 8009fc6:	e008      	b.n	8009fda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <xTaskPriorityInherit+0xc4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d201      	bcs.n	8009fda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fda:	68fb      	ldr	r3, [r7, #12]
	}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	2000071c 	.word	0x2000071c
 8009fe8:	20000720 	.word	0x20000720
 8009fec:	20000bf8 	.word	0x20000bf8

08009ff0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d058      	beq.n	800a0b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a006:	4b2f      	ldr	r3, [pc, #188]	; (800a0c4 <xTaskPriorityDisinherit+0xd4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d00b      	beq.n	800a028 <xTaskPriorityDisinherit+0x38>
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	b672      	cpsid	i
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	b662      	cpsie	i
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	e7fe      	b.n	800a026 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10b      	bne.n	800a048 <xTaskPriorityDisinherit+0x58>
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	b672      	cpsid	i
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	b662      	cpsie	i
 800a044:	60bb      	str	r3, [r7, #8]
 800a046:	e7fe      	b.n	800a046 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04c:	1e5a      	subs	r2, r3, #1
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d02c      	beq.n	800a0b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a062:	2b00      	cmp	r3, #0
 800a064:	d128      	bne.n	800a0b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	3304      	adds	r3, #4
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fd ffea 	bl	8008044 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a088:	4b0f      	ldr	r3, [pc, #60]	; (800a0c8 <xTaskPriorityDisinherit+0xd8>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d903      	bls.n	800a098 <xTaskPriorityDisinherit+0xa8>
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a094:	4a0c      	ldr	r2, [pc, #48]	; (800a0c8 <xTaskPriorityDisinherit+0xd8>)
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a09c:	4613      	mov	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4413      	add	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4a09      	ldr	r2, [pc, #36]	; (800a0cc <xTaskPriorityDisinherit+0xdc>)
 800a0a6:	441a      	add	r2, r3
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	f7fd ff6b 	bl	8007f8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a0b8:	697b      	ldr	r3, [r7, #20]
	}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	2000071c 	.word	0x2000071c
 800a0c8:	20000bf8 	.word	0x20000bf8
 800a0cc:	20000720 	.word	0x20000720

0800a0d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d06c      	beq.n	800a1c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d10b      	bne.n	800a108 <vTaskPriorityDisinheritAfterTimeout+0x38>
 800a0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f4:	b672      	cpsid	i
 800a0f6:	f383 8811 	msr	BASEPRI, r3
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	f3bf 8f4f 	dsb	sy
 800a102:	b662      	cpsie	i
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	e7fe      	b.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d902      	bls.n	800a118 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	61fb      	str	r3, [r7, #28]
 800a116:	e002      	b.n	800a11e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a11c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	429a      	cmp	r2, r3
 800a126:	d04c      	beq.n	800a1c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12c:	697a      	ldr	r2, [r7, #20]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d147      	bne.n	800a1c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a132:	4b26      	ldr	r3, [pc, #152]	; (800a1cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69ba      	ldr	r2, [r7, #24]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d10b      	bne.n	800a154 <vTaskPriorityDisinheritAfterTimeout+0x84>
 800a13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a140:	b672      	cpsid	i
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	b662      	cpsie	i
 800a150:	60bb      	str	r3, [r7, #8]
 800a152:	e7fe      	b.n	800a152 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a158:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	69fa      	ldr	r2, [r7, #28]
 800a15e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	2b00      	cmp	r3, #0
 800a166:	db04      	blt.n	800a172 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	6959      	ldr	r1, [r3, #20]
 800a176:	693a      	ldr	r2, [r7, #16]
 800a178:	4613      	mov	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	4413      	add	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4a13      	ldr	r2, [pc, #76]	; (800a1d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a182:	4413      	add	r3, r2
 800a184:	4299      	cmp	r1, r3
 800a186:	d11c      	bne.n	800a1c2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	3304      	adds	r3, #4
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fd ff59 	bl	8008044 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a192:	69bb      	ldr	r3, [r7, #24]
 800a194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a196:	4b0f      	ldr	r3, [pc, #60]	; (800a1d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d903      	bls.n	800a1a6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a2:	4a0c      	ldr	r2, [pc, #48]	; (800a1d4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4a07      	ldr	r2, [pc, #28]	; (800a1d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a1b4:	441a      	add	r2, r3
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7fd fee4 	bl	8007f8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1c2:	bf00      	nop
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	2000071c 	.word	0x2000071c
 800a1d0:	20000720 	.word	0x20000720
 800a1d4:	20000bf8 	.word	0x20000bf8

0800a1d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a1dc:	4b07      	ldr	r3, [pc, #28]	; (800a1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d004      	beq.n	800a1ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a1e4:	4b05      	ldr	r3, [pc, #20]	; (800a1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a1ea:	3201      	adds	r2, #1
 800a1ec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a1ee:	4b03      	ldr	r3, [pc, #12]	; (800a1fc <pvTaskIncrementMutexHeldCount+0x24>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
	}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	2000071c 	.word	0x2000071c

0800a200 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a20a:	4b21      	ldr	r3, [pc, #132]	; (800a290 <prvAddCurrentTaskToDelayedList+0x90>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a210:	4b20      	ldr	r3, [pc, #128]	; (800a294 <prvAddCurrentTaskToDelayedList+0x94>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	3304      	adds	r3, #4
 800a216:	4618      	mov	r0, r3
 800a218:	f7fd ff14 	bl	8008044 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a222:	d10a      	bne.n	800a23a <prvAddCurrentTaskToDelayedList+0x3a>
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a22a:	4b1a      	ldr	r3, [pc, #104]	; (800a294 <prvAddCurrentTaskToDelayedList+0x94>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3304      	adds	r3, #4
 800a230:	4619      	mov	r1, r3
 800a232:	4819      	ldr	r0, [pc, #100]	; (800a298 <prvAddCurrentTaskToDelayedList+0x98>)
 800a234:	f7fd fea9 	bl	8007f8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a238:	e026      	b.n	800a288 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4413      	add	r3, r2
 800a240:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a242:	4b14      	ldr	r3, [pc, #80]	; (800a294 <prvAddCurrentTaskToDelayedList+0x94>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	68ba      	ldr	r2, [r7, #8]
 800a248:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d209      	bcs.n	800a266 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a252:	4b12      	ldr	r3, [pc, #72]	; (800a29c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b0f      	ldr	r3, [pc, #60]	; (800a294 <prvAddCurrentTaskToDelayedList+0x94>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fd feb7 	bl	8007fd2 <vListInsert>
}
 800a264:	e010      	b.n	800a288 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a266:	4b0e      	ldr	r3, [pc, #56]	; (800a2a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <prvAddCurrentTaskToDelayedList+0x94>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	3304      	adds	r3, #4
 800a270:	4619      	mov	r1, r3
 800a272:	4610      	mov	r0, r2
 800a274:	f7fd fead 	bl	8007fd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a278:	4b0a      	ldr	r3, [pc, #40]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d202      	bcs.n	800a288 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a282:	4a08      	ldr	r2, [pc, #32]	; (800a2a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	6013      	str	r3, [r2, #0]
}
 800a288:	bf00      	nop
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	20000bf4 	.word	0x20000bf4
 800a294:	2000071c 	.word	0x2000071c
 800a298:	20000bdc 	.word	0x20000bdc
 800a29c:	20000bac 	.word	0x20000bac
 800a2a0:	20000ba8 	.word	0x20000ba8
 800a2a4:	20000c10 	.word	0x20000c10

0800a2a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08a      	sub	sp, #40	; 0x28
 800a2ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a2b2:	f000 fb0d 	bl	800a8d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2b6:	4b1d      	ldr	r3, [pc, #116]	; (800a32c <xTimerCreateTimerTask+0x84>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d021      	beq.n	800a302 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2c6:	1d3a      	adds	r2, r7, #4
 800a2c8:	f107 0108 	add.w	r1, r7, #8
 800a2cc:	f107 030c 	add.w	r3, r7, #12
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fd fe13 	bl	8007efc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	9202      	str	r2, [sp, #8]
 800a2de:	9301      	str	r3, [sp, #4]
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	460a      	mov	r2, r1
 800a2e8:	4911      	ldr	r1, [pc, #68]	; (800a330 <xTimerCreateTimerTask+0x88>)
 800a2ea:	4812      	ldr	r0, [pc, #72]	; (800a334 <xTimerCreateTimerTask+0x8c>)
 800a2ec:	f7fe ff52 	bl	8009194 <xTaskCreateStatic>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	4b11      	ldr	r3, [pc, #68]	; (800a338 <xTimerCreateTimerTask+0x90>)
 800a2f4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2f6:	4b10      	ldr	r3, [pc, #64]	; (800a338 <xTimerCreateTimerTask+0x90>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2fe:	2301      	movs	r3, #1
 800a300:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10b      	bne.n	800a320 <xTimerCreateTimerTask+0x78>
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	b672      	cpsid	i
 800a30e:	f383 8811 	msr	BASEPRI, r3
 800a312:	f3bf 8f6f 	isb	sy
 800a316:	f3bf 8f4f 	dsb	sy
 800a31a:	b662      	cpsie	i
 800a31c:	613b      	str	r3, [r7, #16]
 800a31e:	e7fe      	b.n	800a31e <xTimerCreateTimerTask+0x76>
	return xReturn;
 800a320:	697b      	ldr	r3, [r7, #20]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	20000c4c 	.word	0x20000c4c
 800a330:	0800b24c 	.word	0x0800b24c
 800a334:	0800a475 	.word	0x0800a475
 800a338:	20000c50 	.word	0x20000c50

0800a33c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b08a      	sub	sp, #40	; 0x28
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
 800a348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10b      	bne.n	800a36c <xTimerGenericCommand+0x30>
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	b672      	cpsid	i
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	b662      	cpsie	i
 800a368:	623b      	str	r3, [r7, #32]
 800a36a:	e7fe      	b.n	800a36a <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a36c:	4b19      	ldr	r3, [pc, #100]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d02a      	beq.n	800a3ca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b05      	cmp	r3, #5
 800a384:	dc18      	bgt.n	800a3b8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a386:	f7ff fdad 	bl	8009ee4 <xTaskGetSchedulerState>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d109      	bne.n	800a3a4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a390:	4b10      	ldr	r3, [pc, #64]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	f107 0110 	add.w	r1, r7, #16
 800a398:	2300      	movs	r3, #0
 800a39a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a39c:	f7fe f882 	bl	80084a4 <xQueueGenericSend>
 800a3a0:	6278      	str	r0, [r7, #36]	; 0x24
 800a3a2:	e012      	b.n	800a3ca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a3a4:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a3a6:	6818      	ldr	r0, [r3, #0]
 800a3a8:	f107 0110 	add.w	r1, r7, #16
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f7fe f878 	bl	80084a4 <xQueueGenericSend>
 800a3b4:	6278      	str	r0, [r7, #36]	; 0x24
 800a3b6:	e008      	b.n	800a3ca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3b8:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <xTimerGenericCommand+0x98>)
 800a3ba:	6818      	ldr	r0, [r3, #0]
 800a3bc:	f107 0110 	add.w	r1, r7, #16
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	f7fe f970 	bl	80086a8 <xQueueGenericSendFromISR>
 800a3c8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3728      	adds	r7, #40	; 0x28
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	20000c4c 	.word	0x20000c4c

0800a3d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b088      	sub	sp, #32
 800a3dc:	af02      	add	r7, sp, #8
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e2:	4b23      	ldr	r3, [pc, #140]	; (800a470 <prvProcessExpiredTimer+0x98>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	68db      	ldr	r3, [r3, #12]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fd fe27 	bl	8008044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d023      	beq.n	800a44c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	699a      	ldr	r2, [r3, #24]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	18d1      	adds	r1, r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	6978      	ldr	r0, [r7, #20]
 800a412:	f000 f8d3 	bl	800a5bc <prvInsertTimerInActiveList>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d020      	beq.n	800a45e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a41c:	2300      	movs	r3, #0
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	2300      	movs	r3, #0
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	2100      	movs	r1, #0
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff ff88 	bl	800a33c <xTimerGenericCommand>
 800a42c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d114      	bne.n	800a45e <prvProcessExpiredTimer+0x86>
 800a434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a438:	b672      	cpsid	i
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	b662      	cpsie	i
 800a448:	60fb      	str	r3, [r7, #12]
 800a44a:	e7fe      	b.n	800a44a <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a452:	f023 0301 	bic.w	r3, r3, #1
 800a456:	b2da      	uxtb	r2, r3
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	6a1b      	ldr	r3, [r3, #32]
 800a462:	6978      	ldr	r0, [r7, #20]
 800a464:	4798      	blx	r3
}
 800a466:	bf00      	nop
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	20000c44 	.word	0x20000c44

0800a474 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a47c:	f107 0308 	add.w	r3, r7, #8
 800a480:	4618      	mov	r0, r3
 800a482:	f000 f857 	bl	800a534 <prvGetNextExpireTime>
 800a486:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	4619      	mov	r1, r3
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 f803 	bl	800a498 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a492:	f000 f8d5 	bl	800a640 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a496:	e7f1      	b.n	800a47c <prvTimerTask+0x8>

0800a498 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a4a2:	f7ff f93b 	bl	800971c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4a6:	f107 0308 	add.w	r3, r7, #8
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 f866 	bl	800a57c <prvSampleTimeNow>
 800a4b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d130      	bne.n	800a51a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <prvProcessTimerOrBlockTask+0x3c>
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d806      	bhi.n	800a4d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4c6:	f7ff f937 	bl	8009738 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4ca:	68f9      	ldr	r1, [r7, #12]
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff ff83 	bl	800a3d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4d2:	e024      	b.n	800a51e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d008      	beq.n	800a4ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4da:	4b13      	ldr	r3, [pc, #76]	; (800a528 <prvProcessTimerOrBlockTask+0x90>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <prvProcessTimerOrBlockTask+0x50>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e000      	b.n	800a4ea <prvProcessTimerOrBlockTask+0x52>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4ec:	4b0f      	ldr	r3, [pc, #60]	; (800a52c <prvProcessTimerOrBlockTask+0x94>)
 800a4ee:	6818      	ldr	r0, [r3, #0]
 800a4f0:	687a      	ldr	r2, [r7, #4]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	f7fe fe17 	bl	800912c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4fe:	f7ff f91b 	bl	8009738 <xTaskResumeAll>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10a      	bne.n	800a51e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a508:	4b09      	ldr	r3, [pc, #36]	; (800a530 <prvProcessTimerOrBlockTask+0x98>)
 800a50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50e:	601a      	str	r2, [r3, #0]
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	f3bf 8f6f 	isb	sy
}
 800a518:	e001      	b.n	800a51e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a51a:	f7ff f90d 	bl	8009738 <xTaskResumeAll>
}
 800a51e:	bf00      	nop
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20000c48 	.word	0x20000c48
 800a52c:	20000c4c 	.word	0x20000c4c
 800a530:	e000ed04 	.word	0xe000ed04

0800a534 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a53c:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <prvGetNextExpireTime+0x44>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <prvGetNextExpireTime+0x16>
 800a546:	2201      	movs	r2, #1
 800a548:	e000      	b.n	800a54c <prvGetNextExpireTime+0x18>
 800a54a:	2200      	movs	r2, #0
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d105      	bne.n	800a564 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a558:	4b07      	ldr	r3, [pc, #28]	; (800a578 <prvGetNextExpireTime+0x44>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	e001      	b.n	800a568 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a568:	68fb      	ldr	r3, [r7, #12]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	20000c44 	.word	0x20000c44

0800a57c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a584:	f7ff f976 	bl	8009874 <xTaskGetTickCount>
 800a588:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a58a:	4b0b      	ldr	r3, [pc, #44]	; (800a5b8 <prvSampleTimeNow+0x3c>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	429a      	cmp	r2, r3
 800a592:	d205      	bcs.n	800a5a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a594:	f000 f936 	bl	800a804 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	e002      	b.n	800a5a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a5a6:	4a04      	ldr	r2, [pc, #16]	; (800a5b8 <prvSampleTimeNow+0x3c>)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	20000c54 	.word	0x20000c54

0800a5bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d812      	bhi.n	800a608 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	1ad2      	subs	r2, r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d302      	bcc.n	800a5f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	e01b      	b.n	800a62e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5f6:	4b10      	ldr	r3, [pc, #64]	; (800a638 <prvInsertTimerInActiveList+0x7c>)
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4619      	mov	r1, r3
 800a600:	4610      	mov	r0, r2
 800a602:	f7fd fce6 	bl	8007fd2 <vListInsert>
 800a606:	e012      	b.n	800a62e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d206      	bcs.n	800a61e <prvInsertTimerInActiveList+0x62>
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d302      	bcc.n	800a61e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a618:	2301      	movs	r3, #1
 800a61a:	617b      	str	r3, [r7, #20]
 800a61c:	e007      	b.n	800a62e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a61e:	4b07      	ldr	r3, [pc, #28]	; (800a63c <prvInsertTimerInActiveList+0x80>)
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3304      	adds	r3, #4
 800a626:	4619      	mov	r1, r3
 800a628:	4610      	mov	r0, r2
 800a62a:	f7fd fcd2 	bl	8007fd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a62e:	697b      	ldr	r3, [r7, #20]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3718      	adds	r7, #24
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000c48 	.word	0x20000c48
 800a63c:	20000c44 	.word	0x20000c44

0800a640 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b08e      	sub	sp, #56	; 0x38
 800a644:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a646:	e0cc      	b.n	800a7e2 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	da19      	bge.n	800a682 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a64e:	1d3b      	adds	r3, r7, #4
 800a650:	3304      	adds	r3, #4
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <prvProcessReceivedCommands+0x32>
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	b672      	cpsid	i
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	b662      	cpsie	i
 800a66e:	61fb      	str	r3, [r7, #28]
 800a670:	e7fe      	b.n	800a670 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a678:	6850      	ldr	r0, [r2, #4]
 800a67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a67c:	6892      	ldr	r2, [r2, #8]
 800a67e:	4611      	mov	r1, r2
 800a680:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f2c0 80ab 	blt.w	800a7e0 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d004      	beq.n	800a6a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	3304      	adds	r3, #4
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fd fcd2 	bl	8008044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6a0:	463b      	mov	r3, r7
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f7ff ff6a 	bl	800a57c <prvSampleTimeNow>
 800a6a8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2b09      	cmp	r3, #9
 800a6ae:	f200 8098 	bhi.w	800a7e2 <prvProcessReceivedCommands+0x1a2>
 800a6b2:	a201      	add	r2, pc, #4	; (adr r2, 800a6b8 <prvProcessReceivedCommands+0x78>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a6e1 	.word	0x0800a6e1
 800a6bc:	0800a6e1 	.word	0x0800a6e1
 800a6c0:	0800a6e1 	.word	0x0800a6e1
 800a6c4:	0800a757 	.word	0x0800a757
 800a6c8:	0800a76b 	.word	0x0800a76b
 800a6cc:	0800a7b7 	.word	0x0800a7b7
 800a6d0:	0800a6e1 	.word	0x0800a6e1
 800a6d4:	0800a6e1 	.word	0x0800a6e1
 800a6d8:	0800a757 	.word	0x0800a757
 800a6dc:	0800a76b 	.word	0x0800a76b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b2da      	uxtb	r2, r3
 800a6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	18d1      	adds	r1, r2, r3
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a700:	f7ff ff5c 	bl	800a5bc <prvInsertTimerInActiveList>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d06b      	beq.n	800a7e2 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a710:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d060      	beq.n	800a7e2 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	441a      	add	r2, r3
 800a728:	2300      	movs	r3, #0
 800a72a:	9300      	str	r3, [sp, #0]
 800a72c:	2300      	movs	r3, #0
 800a72e:	2100      	movs	r1, #0
 800a730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a732:	f7ff fe03 	bl	800a33c <xTimerGenericCommand>
 800a736:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a738:	6a3b      	ldr	r3, [r7, #32]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d151      	bne.n	800a7e2 <prvProcessReceivedCommands+0x1a2>
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	b672      	cpsid	i
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	b662      	cpsie	i
 800a752:	61bb      	str	r3, [r7, #24]
 800a754:	e7fe      	b.n	800a754 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a75c:	f023 0301 	bic.w	r3, r3, #1
 800a760:	b2da      	uxtb	r2, r3
 800a762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a764:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a768:	e03b      	b.n	800a7e2 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a770:	f043 0301 	orr.w	r3, r3, #1
 800a774:	b2da      	uxtb	r2, r3
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a780:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10b      	bne.n	800a7a2 <prvProcessReceivedCommands+0x162>
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	b672      	cpsid	i
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	b662      	cpsie	i
 800a79e:	617b      	str	r3, [r7, #20]
 800a7a0:	e7fe      	b.n	800a7a0 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	699a      	ldr	r2, [r3, #24]
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	18d1      	adds	r1, r2, r3
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7b0:	f7ff ff04 	bl	800a5bc <prvInsertTimerInActiveList>
					break;
 800a7b4:	e015      	b.n	800a7e2 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7bc:	f003 0302 	and.w	r3, r3, #2
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a7c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7c6:	f000 fbb9 	bl	800af3c <vPortFree>
 800a7ca:	e00a      	b.n	800a7e2 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d2:	f023 0301 	bic.w	r3, r3, #1
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7de:	e000      	b.n	800a7e2 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a7e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7e2:	4b07      	ldr	r3, [pc, #28]	; (800a800 <prvProcessReceivedCommands+0x1c0>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	1d39      	adds	r1, r7, #4
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fe f88a 	bl	8008904 <xQueueReceive>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f47f af28 	bne.w	800a648 <prvProcessReceivedCommands+0x8>
	}
}
 800a7f8:	bf00      	nop
 800a7fa:	3730      	adds	r7, #48	; 0x30
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20000c4c 	.word	0x20000c4c

0800a804 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a80a:	e049      	b.n	800a8a0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a80c:	4b2e      	ldr	r3, [pc, #184]	; (800a8c8 <prvSwitchTimerLists+0xc4>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a816:	4b2c      	ldr	r3, [pc, #176]	; (800a8c8 <prvSwitchTimerLists+0xc4>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	3304      	adds	r3, #4
 800a824:	4618      	mov	r0, r3
 800a826:	f7fd fc0d 	bl	8008044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6a1b      	ldr	r3, [r3, #32]
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a838:	f003 0304 	and.w	r3, r3, #4
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d02f      	beq.n	800a8a0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	4413      	add	r3, r2
 800a848:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d90e      	bls.n	800a870 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a85e:	4b1a      	ldr	r3, [pc, #104]	; (800a8c8 <prvSwitchTimerLists+0xc4>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	3304      	adds	r3, #4
 800a866:	4619      	mov	r1, r3
 800a868:	4610      	mov	r0, r2
 800a86a:	f7fd fbb2 	bl	8007fd2 <vListInsert>
 800a86e:	e017      	b.n	800a8a0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a870:	2300      	movs	r3, #0
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	2300      	movs	r3, #0
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	2100      	movs	r1, #0
 800a87a:	68f8      	ldr	r0, [r7, #12]
 800a87c:	f7ff fd5e 	bl	800a33c <xTimerGenericCommand>
 800a880:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10b      	bne.n	800a8a0 <prvSwitchTimerLists+0x9c>
 800a888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88c:	b672      	cpsid	i
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	b662      	cpsie	i
 800a89c:	603b      	str	r3, [r7, #0]
 800a89e:	e7fe      	b.n	800a89e <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a8a0:	4b09      	ldr	r3, [pc, #36]	; (800a8c8 <prvSwitchTimerLists+0xc4>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d1b0      	bne.n	800a80c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8aa:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <prvSwitchTimerLists+0xc4>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8b0:	4b06      	ldr	r3, [pc, #24]	; (800a8cc <prvSwitchTimerLists+0xc8>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a04      	ldr	r2, [pc, #16]	; (800a8c8 <prvSwitchTimerLists+0xc4>)
 800a8b6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8b8:	4a04      	ldr	r2, [pc, #16]	; (800a8cc <prvSwitchTimerLists+0xc8>)
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	6013      	str	r3, [r2, #0]
}
 800a8be:	bf00      	nop
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000c44 	.word	0x20000c44
 800a8cc:	20000c48 	.word	0x20000c48

0800a8d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8d6:	f000 f947 	bl	800ab68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8da:	4b15      	ldr	r3, [pc, #84]	; (800a930 <prvCheckForValidListAndQueue+0x60>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d120      	bne.n	800a924 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8e2:	4814      	ldr	r0, [pc, #80]	; (800a934 <prvCheckForValidListAndQueue+0x64>)
 800a8e4:	f7fd fb24 	bl	8007f30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8e8:	4813      	ldr	r0, [pc, #76]	; (800a938 <prvCheckForValidListAndQueue+0x68>)
 800a8ea:	f7fd fb21 	bl	8007f30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8ee:	4b13      	ldr	r3, [pc, #76]	; (800a93c <prvCheckForValidListAndQueue+0x6c>)
 800a8f0:	4a10      	ldr	r2, [pc, #64]	; (800a934 <prvCheckForValidListAndQueue+0x64>)
 800a8f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8f4:	4b12      	ldr	r3, [pc, #72]	; (800a940 <prvCheckForValidListAndQueue+0x70>)
 800a8f6:	4a10      	ldr	r2, [pc, #64]	; (800a938 <prvCheckForValidListAndQueue+0x68>)
 800a8f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	4b11      	ldr	r3, [pc, #68]	; (800a944 <prvCheckForValidListAndQueue+0x74>)
 800a900:	4a11      	ldr	r2, [pc, #68]	; (800a948 <prvCheckForValidListAndQueue+0x78>)
 800a902:	2110      	movs	r1, #16
 800a904:	200a      	movs	r0, #10
 800a906:	f7fd fc31 	bl	800816c <xQueueGenericCreateStatic>
 800a90a:	4602      	mov	r2, r0
 800a90c:	4b08      	ldr	r3, [pc, #32]	; (800a930 <prvCheckForValidListAndQueue+0x60>)
 800a90e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a910:	4b07      	ldr	r3, [pc, #28]	; (800a930 <prvCheckForValidListAndQueue+0x60>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d005      	beq.n	800a924 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a918:	4b05      	ldr	r3, [pc, #20]	; (800a930 <prvCheckForValidListAndQueue+0x60>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	490b      	ldr	r1, [pc, #44]	; (800a94c <prvCheckForValidListAndQueue+0x7c>)
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe fbb2 	bl	8009088 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a924:	f000 f952 	bl	800abcc <vPortExitCritical>
}
 800a928:	bf00      	nop
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	20000c4c 	.word	0x20000c4c
 800a934:	20000c1c 	.word	0x20000c1c
 800a938:	20000c30 	.word	0x20000c30
 800a93c:	20000c44 	.word	0x20000c44
 800a940:	20000c48 	.word	0x20000c48
 800a944:	20000cf8 	.word	0x20000cf8
 800a948:	20000c58 	.word	0x20000c58
 800a94c:	0800b254 	.word	0x0800b254

0800a950 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	3b04      	subs	r3, #4
 800a960:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a968:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3b04      	subs	r3, #4
 800a96e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	f023 0201 	bic.w	r2, r3, #1
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3b04      	subs	r3, #4
 800a97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a980:	4a0c      	ldr	r2, [pc, #48]	; (800a9b4 <pxPortInitialiseStack+0x64>)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3b14      	subs	r3, #20
 800a98a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a98c:	687a      	ldr	r2, [r7, #4]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	3b04      	subs	r3, #4
 800a996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f06f 0202 	mvn.w	r2, #2
 800a99e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	3b20      	subs	r3, #32
 800a9a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	0800a9b9 	.word	0x0800a9b9

0800a9b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9c2:	4b13      	ldr	r3, [pc, #76]	; (800aa10 <prvTaskExitError+0x58>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ca:	d00b      	beq.n	800a9e4 <prvTaskExitError+0x2c>
 800a9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d0:	b672      	cpsid	i
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	b662      	cpsie	i
 800a9e0:	60fb      	str	r3, [r7, #12]
 800a9e2:	e7fe      	b.n	800a9e2 <prvTaskExitError+0x2a>
 800a9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e8:	b672      	cpsid	i
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	b662      	cpsie	i
 800a9f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9fa:	bf00      	nop
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0fc      	beq.n	800a9fc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	20000028 	.word	0x20000028
	...

0800aa20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa20:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <pxCurrentTCBConst2>)
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	6808      	ldr	r0, [r1, #0]
 800aa26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	f380 8809 	msr	PSP, r0
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f04f 0000 	mov.w	r0, #0
 800aa36:	f380 8811 	msr	BASEPRI, r0
 800aa3a:	4770      	bx	lr
 800aa3c:	f3af 8000 	nop.w

0800aa40 <pxCurrentTCBConst2>:
 800aa40:	2000071c 	.word	0x2000071c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa48:	4808      	ldr	r0, [pc, #32]	; (800aa6c <prvPortStartFirstTask+0x24>)
 800aa4a:	6800      	ldr	r0, [r0, #0]
 800aa4c:	6800      	ldr	r0, [r0, #0]
 800aa4e:	f380 8808 	msr	MSP, r0
 800aa52:	f04f 0000 	mov.w	r0, #0
 800aa56:	f380 8814 	msr	CONTROL, r0
 800aa5a:	b662      	cpsie	i
 800aa5c:	b661      	cpsie	f
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	df00      	svc	0
 800aa68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa6a:	bf00      	nop
 800aa6c:	e000ed08 	.word	0xe000ed08

0800aa70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa76:	4b36      	ldr	r3, [pc, #216]	; (800ab50 <xPortStartScheduler+0xe0>)
 800aa78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	22ff      	movs	r2, #255	; 0xff
 800aa86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	4b2e      	ldr	r3, [pc, #184]	; (800ab54 <xPortStartScheduler+0xe4>)
 800aa9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa9e:	4b2e      	ldr	r3, [pc, #184]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaa4:	e009      	b.n	800aaba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aaa6:	4b2c      	ldr	r3, [pc, #176]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	4a2a      	ldr	r2, [pc, #168]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aaae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaba:	78fb      	ldrb	r3, [r7, #3]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac2:	2b80      	cmp	r3, #128	; 0x80
 800aac4:	d0ef      	beq.n	800aaa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aac6:	4b24      	ldr	r3, [pc, #144]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f1c3 0307 	rsb	r3, r3, #7
 800aace:	2b04      	cmp	r3, #4
 800aad0:	d00b      	beq.n	800aaea <xPortStartScheduler+0x7a>
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	b672      	cpsid	i
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	b662      	cpsie	i
 800aae6:	60bb      	str	r3, [r7, #8]
 800aae8:	e7fe      	b.n	800aae8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaea:	4b1b      	ldr	r3, [pc, #108]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	021b      	lsls	r3, r3, #8
 800aaf0:	4a19      	ldr	r2, [pc, #100]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aaf2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aaf4:	4b18      	ldr	r3, [pc, #96]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aafc:	4a16      	ldr	r2, [pc, #88]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aafe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab08:	4b14      	ldr	r3, [pc, #80]	; (800ab5c <xPortStartScheduler+0xec>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a13      	ldr	r2, [pc, #76]	; (800ab5c <xPortStartScheduler+0xec>)
 800ab0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab12:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab14:	4b11      	ldr	r3, [pc, #68]	; (800ab5c <xPortStartScheduler+0xec>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a10      	ldr	r2, [pc, #64]	; (800ab5c <xPortStartScheduler+0xec>)
 800ab1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab1e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab20:	f000 f8d4 	bl	800accc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab24:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <xPortStartScheduler+0xf0>)
 800ab26:	2200      	movs	r2, #0
 800ab28:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab2a:	f000 f8f3 	bl	800ad14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <xPortStartScheduler+0xf4>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a0c      	ldr	r2, [pc, #48]	; (800ab64 <xPortStartScheduler+0xf4>)
 800ab34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab38:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab3a:	f7ff ff85 	bl	800aa48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab3e:	f7fe ff63 	bl	8009a08 <vTaskSwitchContext>
	prvTaskExitError();
 800ab42:	f7ff ff39 	bl	800a9b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	e000e400 	.word	0xe000e400
 800ab54:	20000d48 	.word	0x20000d48
 800ab58:	20000d4c 	.word	0x20000d4c
 800ab5c:	e000ed20 	.word	0xe000ed20
 800ab60:	20000028 	.word	0x20000028
 800ab64:	e000ef34 	.word	0xe000ef34

0800ab68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	b672      	cpsid	i
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	b662      	cpsie	i
 800ab82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab84:	4b0f      	ldr	r3, [pc, #60]	; (800abc4 <vPortEnterCritical+0x5c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	4a0e      	ldr	r2, [pc, #56]	; (800abc4 <vPortEnterCritical+0x5c>)
 800ab8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab8e:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <vPortEnterCritical+0x5c>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d110      	bne.n	800abb8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab96:	4b0c      	ldr	r3, [pc, #48]	; (800abc8 <vPortEnterCritical+0x60>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00b      	beq.n	800abb8 <vPortEnterCritical+0x50>
 800aba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba4:	b672      	cpsid	i
 800aba6:	f383 8811 	msr	BASEPRI, r3
 800abaa:	f3bf 8f6f 	isb	sy
 800abae:	f3bf 8f4f 	dsb	sy
 800abb2:	b662      	cpsie	i
 800abb4:	603b      	str	r3, [r7, #0]
 800abb6:	e7fe      	b.n	800abb6 <vPortEnterCritical+0x4e>
	}
}
 800abb8:	bf00      	nop
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	20000028 	.word	0x20000028
 800abc8:	e000ed04 	.word	0xe000ed04

0800abcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abd2:	4b12      	ldr	r3, [pc, #72]	; (800ac1c <vPortExitCritical+0x50>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10b      	bne.n	800abf2 <vPortExitCritical+0x26>
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	b672      	cpsid	i
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	b662      	cpsie	i
 800abee:	607b      	str	r3, [r7, #4]
 800abf0:	e7fe      	b.n	800abf0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800abf2:	4b0a      	ldr	r3, [pc, #40]	; (800ac1c <vPortExitCritical+0x50>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	4a08      	ldr	r2, [pc, #32]	; (800ac1c <vPortExitCritical+0x50>)
 800abfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abfc:	4b07      	ldr	r3, [pc, #28]	; (800ac1c <vPortExitCritical+0x50>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d104      	bne.n	800ac0e <vPortExitCritical+0x42>
 800ac04:	2300      	movs	r3, #0
 800ac06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac0e:	bf00      	nop
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20000028 	.word	0x20000028

0800ac20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac20:	f3ef 8009 	mrs	r0, PSP
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	4b15      	ldr	r3, [pc, #84]	; (800ac80 <pxCurrentTCBConst>)
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	f01e 0f10 	tst.w	lr, #16
 800ac30:	bf08      	it	eq
 800ac32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3a:	6010      	str	r0, [r2, #0]
 800ac3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac44:	b672      	cpsid	i
 800ac46:	f380 8811 	msr	BASEPRI, r0
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	b662      	cpsie	i
 800ac54:	f7fe fed8 	bl	8009a08 <vTaskSwitchContext>
 800ac58:	f04f 0000 	mov.w	r0, #0
 800ac5c:	f380 8811 	msr	BASEPRI, r0
 800ac60:	bc09      	pop	{r0, r3}
 800ac62:	6819      	ldr	r1, [r3, #0]
 800ac64:	6808      	ldr	r0, [r1, #0]
 800ac66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6a:	f01e 0f10 	tst.w	lr, #16
 800ac6e:	bf08      	it	eq
 800ac70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac74:	f380 8809 	msr	PSP, r0
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop

0800ac80 <pxCurrentTCBConst>:
 800ac80:	2000071c 	.word	0x2000071c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac92:	b672      	cpsid	i
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	b662      	cpsie	i
 800aca2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aca4:	f7fe fdf6 	bl	8009894 <xTaskIncrementTick>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <SysTick_Handler+0x40>)
 800acb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acb4:	601a      	str	r2, [r3, #0]
 800acb6:	2300      	movs	r3, #0
 800acb8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	e000ed04 	.word	0xe000ed04

0800accc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acd0:	4b0b      	ldr	r3, [pc, #44]	; (800ad00 <vPortSetupTimerInterrupt+0x34>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acd6:	4b0b      	ldr	r3, [pc, #44]	; (800ad04 <vPortSetupTimerInterrupt+0x38>)
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acdc:	4b0a      	ldr	r3, [pc, #40]	; (800ad08 <vPortSetupTimerInterrupt+0x3c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a0a      	ldr	r2, [pc, #40]	; (800ad0c <vPortSetupTimerInterrupt+0x40>)
 800ace2:	fba2 2303 	umull	r2, r3, r2, r3
 800ace6:	099b      	lsrs	r3, r3, #6
 800ace8:	4a09      	ldr	r2, [pc, #36]	; (800ad10 <vPortSetupTimerInterrupt+0x44>)
 800acea:	3b01      	subs	r3, #1
 800acec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acee:	4b04      	ldr	r3, [pc, #16]	; (800ad00 <vPortSetupTimerInterrupt+0x34>)
 800acf0:	2207      	movs	r2, #7
 800acf2:	601a      	str	r2, [r3, #0]
}
 800acf4:	bf00      	nop
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	e000e010 	.word	0xe000e010
 800ad04:	e000e018 	.word	0xe000e018
 800ad08:	2000001c 	.word	0x2000001c
 800ad0c:	10624dd3 	.word	0x10624dd3
 800ad10:	e000e014 	.word	0xe000e014

0800ad14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad24 <vPortEnableVFP+0x10>
 800ad18:	6801      	ldr	r1, [r0, #0]
 800ad1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad1e:	6001      	str	r1, [r0, #0]
 800ad20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad22:	bf00      	nop
 800ad24:	e000ed88 	.word	0xe000ed88

0800ad28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad2e:	f3ef 8305 	mrs	r3, IPSR
 800ad32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b0f      	cmp	r3, #15
 800ad38:	d915      	bls.n	800ad66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad3a:	4a18      	ldr	r2, [pc, #96]	; (800ad9c <vPortValidateInterruptPriority+0x74>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad44:	4b16      	ldr	r3, [pc, #88]	; (800ada0 <vPortValidateInterruptPriority+0x78>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	7afa      	ldrb	r2, [r7, #11]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d20b      	bcs.n	800ad66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad52:	b672      	cpsid	i
 800ad54:	f383 8811 	msr	BASEPRI, r3
 800ad58:	f3bf 8f6f 	isb	sy
 800ad5c:	f3bf 8f4f 	dsb	sy
 800ad60:	b662      	cpsie	i
 800ad62:	607b      	str	r3, [r7, #4]
 800ad64:	e7fe      	b.n	800ad64 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad66:	4b0f      	ldr	r3, [pc, #60]	; (800ada4 <vPortValidateInterruptPriority+0x7c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad6e:	4b0e      	ldr	r3, [pc, #56]	; (800ada8 <vPortValidateInterruptPriority+0x80>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d90b      	bls.n	800ad8e <vPortValidateInterruptPriority+0x66>
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	b672      	cpsid	i
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	b662      	cpsie	i
 800ad8a:	603b      	str	r3, [r7, #0]
 800ad8c:	e7fe      	b.n	800ad8c <vPortValidateInterruptPriority+0x64>
	}
 800ad8e:	bf00      	nop
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	e000e3f0 	.word	0xe000e3f0
 800ada0:	20000d48 	.word	0x20000d48
 800ada4:	e000ed0c 	.word	0xe000ed0c
 800ada8:	20000d4c 	.word	0x20000d4c

0800adac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08a      	sub	sp, #40	; 0x28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adb4:	2300      	movs	r3, #0
 800adb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800adb8:	f7fe fcb0 	bl	800971c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adbc:	4b5a      	ldr	r3, [pc, #360]	; (800af28 <pvPortMalloc+0x17c>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adc4:	f000 f916 	bl	800aff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adc8:	4b58      	ldr	r3, [pc, #352]	; (800af2c <pvPortMalloc+0x180>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4013      	ands	r3, r2
 800add0:	2b00      	cmp	r3, #0
 800add2:	f040 8090 	bne.w	800aef6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01e      	beq.n	800ae1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800addc:	2208      	movs	r2, #8
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4413      	add	r3, r2
 800ade2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	2b00      	cmp	r3, #0
 800adec:	d015      	beq.n	800ae1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f023 0307 	bic.w	r3, r3, #7
 800adf4:	3308      	adds	r3, #8
 800adf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f003 0307 	and.w	r3, r3, #7
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00b      	beq.n	800ae1a <pvPortMalloc+0x6e>
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	b672      	cpsid	i
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	b662      	cpsie	i
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	e7fe      	b.n	800ae18 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d06a      	beq.n	800aef6 <pvPortMalloc+0x14a>
 800ae20:	4b43      	ldr	r3, [pc, #268]	; (800af30 <pvPortMalloc+0x184>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d865      	bhi.n	800aef6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae2a:	4b42      	ldr	r3, [pc, #264]	; (800af34 <pvPortMalloc+0x188>)
 800ae2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae2e:	4b41      	ldr	r3, [pc, #260]	; (800af34 <pvPortMalloc+0x188>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae34:	e004      	b.n	800ae40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d903      	bls.n	800ae52 <pvPortMalloc+0xa6>
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f1      	bne.n	800ae36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae52:	4b35      	ldr	r3, [pc, #212]	; (800af28 <pvPortMalloc+0x17c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d04c      	beq.n	800aef6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2208      	movs	r2, #8
 800ae62:	4413      	add	r3, r2
 800ae64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	685a      	ldr	r2, [r3, #4]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	1ad2      	subs	r2, r2, r3
 800ae76:	2308      	movs	r3, #8
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d920      	bls.n	800aec0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4413      	add	r3, r2
 800ae84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	f003 0307 	and.w	r3, r3, #7
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <pvPortMalloc+0xfc>
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	b672      	cpsid	i
 800ae96:	f383 8811 	msr	BASEPRI, r3
 800ae9a:	f3bf 8f6f 	isb	sy
 800ae9e:	f3bf 8f4f 	dsb	sy
 800aea2:	b662      	cpsie	i
 800aea4:	613b      	str	r3, [r7, #16]
 800aea6:	e7fe      	b.n	800aea6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aeba:	69b8      	ldr	r0, [r7, #24]
 800aebc:	f000 f8fc 	bl	800b0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aec0:	4b1b      	ldr	r3, [pc, #108]	; (800af30 <pvPortMalloc+0x184>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	4a19      	ldr	r2, [pc, #100]	; (800af30 <pvPortMalloc+0x184>)
 800aecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aece:	4b18      	ldr	r3, [pc, #96]	; (800af30 <pvPortMalloc+0x184>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	4b19      	ldr	r3, [pc, #100]	; (800af38 <pvPortMalloc+0x18c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d203      	bcs.n	800aee2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aeda:	4b15      	ldr	r3, [pc, #84]	; (800af30 <pvPortMalloc+0x184>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a16      	ldr	r2, [pc, #88]	; (800af38 <pvPortMalloc+0x18c>)
 800aee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	4b11      	ldr	r3, [pc, #68]	; (800af2c <pvPortMalloc+0x180>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	431a      	orrs	r2, r3
 800aeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef2:	2200      	movs	r2, #0
 800aef4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aef6:	f7fe fc1f 	bl	8009738 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	f003 0307 	and.w	r3, r3, #7
 800af00:	2b00      	cmp	r3, #0
 800af02:	d00b      	beq.n	800af1c <pvPortMalloc+0x170>
 800af04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af08:	b672      	cpsid	i
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	b662      	cpsie	i
 800af18:	60fb      	str	r3, [r7, #12]
 800af1a:	e7fe      	b.n	800af1a <pvPortMalloc+0x16e>
	return pvReturn;
 800af1c:	69fb      	ldr	r3, [r7, #28]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3728      	adds	r7, #40	; 0x28
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20004958 	.word	0x20004958
 800af2c:	20004964 	.word	0x20004964
 800af30:	2000495c 	.word	0x2000495c
 800af34:	20004950 	.word	0x20004950
 800af38:	20004960 	.word	0x20004960

0800af3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b086      	sub	sp, #24
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d04a      	beq.n	800afe4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af4e:	2308      	movs	r3, #8
 800af50:	425b      	negs	r3, r3
 800af52:	697a      	ldr	r2, [r7, #20]
 800af54:	4413      	add	r3, r2
 800af56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	4b22      	ldr	r3, [pc, #136]	; (800afec <vPortFree+0xb0>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4013      	ands	r3, r2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10b      	bne.n	800af82 <vPortFree+0x46>
 800af6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af6e:	b672      	cpsid	i
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	b662      	cpsie	i
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	e7fe      	b.n	800af80 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00b      	beq.n	800afa2 <vPortFree+0x66>
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	b672      	cpsid	i
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	b662      	cpsie	i
 800af9e:	60bb      	str	r3, [r7, #8]
 800afa0:	e7fe      	b.n	800afa0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	4b11      	ldr	r3, [pc, #68]	; (800afec <vPortFree+0xb0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4013      	ands	r3, r2
 800afac:	2b00      	cmp	r3, #0
 800afae:	d019      	beq.n	800afe4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d115      	bne.n	800afe4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	4b0b      	ldr	r3, [pc, #44]	; (800afec <vPortFree+0xb0>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	43db      	mvns	r3, r3
 800afc2:	401a      	ands	r2, r3
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afc8:	f7fe fba8 	bl	800971c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	4b07      	ldr	r3, [pc, #28]	; (800aff0 <vPortFree+0xb4>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4413      	add	r3, r2
 800afd6:	4a06      	ldr	r2, [pc, #24]	; (800aff0 <vPortFree+0xb4>)
 800afd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afda:	6938      	ldr	r0, [r7, #16]
 800afdc:	f000 f86c 	bl	800b0b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800afe0:	f7fe fbaa 	bl	8009738 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800afe4:	bf00      	nop
 800afe6:	3718      	adds	r7, #24
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20004964 	.word	0x20004964
 800aff0:	2000495c 	.word	0x2000495c

0800aff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800affa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800affe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b000:	4b27      	ldr	r3, [pc, #156]	; (800b0a0 <prvHeapInit+0xac>)
 800b002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f003 0307 	and.w	r3, r3, #7
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00c      	beq.n	800b028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3307      	adds	r3, #7
 800b012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f023 0307 	bic.w	r3, r3, #7
 800b01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b01c:	68ba      	ldr	r2, [r7, #8]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	4a1f      	ldr	r2, [pc, #124]	; (800b0a0 <prvHeapInit+0xac>)
 800b024:	4413      	add	r3, r2
 800b026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b02c:	4a1d      	ldr	r2, [pc, #116]	; (800b0a4 <prvHeapInit+0xb0>)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b032:	4b1c      	ldr	r3, [pc, #112]	; (800b0a4 <prvHeapInit+0xb0>)
 800b034:	2200      	movs	r2, #0
 800b036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	4413      	add	r3, r2
 800b03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b040:	2208      	movs	r2, #8
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	1a9b      	subs	r3, r3, r2
 800b046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f023 0307 	bic.w	r3, r3, #7
 800b04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4a15      	ldr	r2, [pc, #84]	; (800b0a8 <prvHeapInit+0xb4>)
 800b054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b056:	4b14      	ldr	r3, [pc, #80]	; (800b0a8 <prvHeapInit+0xb4>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2200      	movs	r2, #0
 800b05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b05e:	4b12      	ldr	r3, [pc, #72]	; (800b0a8 <prvHeapInit+0xb4>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	1ad2      	subs	r2, r2, r3
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b074:	4b0c      	ldr	r3, [pc, #48]	; (800b0a8 <prvHeapInit+0xb4>)
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	4a0a      	ldr	r2, [pc, #40]	; (800b0ac <prvHeapInit+0xb8>)
 800b082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	4a09      	ldr	r2, [pc, #36]	; (800b0b0 <prvHeapInit+0xbc>)
 800b08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b08c:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <prvHeapInit+0xc0>)
 800b08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b092:	601a      	str	r2, [r3, #0]
}
 800b094:	bf00      	nop
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	20000d50 	.word	0x20000d50
 800b0a4:	20004950 	.word	0x20004950
 800b0a8:	20004958 	.word	0x20004958
 800b0ac:	20004960 	.word	0x20004960
 800b0b0:	2000495c 	.word	0x2000495c
 800b0b4:	20004964 	.word	0x20004964

0800b0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0c0:	4b28      	ldr	r3, [pc, #160]	; (800b164 <prvInsertBlockIntoFreeList+0xac>)
 800b0c2:	60fb      	str	r3, [r7, #12]
 800b0c4:	e002      	b.n	800b0cc <prvInsertBlockIntoFreeList+0x14>
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	60fb      	str	r3, [r7, #12]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d8f7      	bhi.n	800b0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d108      	bne.n	800b0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685a      	ldr	r2, [r3, #4]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	441a      	add	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	441a      	add	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d118      	bne.n	800b140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	4b15      	ldr	r3, [pc, #84]	; (800b168 <prvInsertBlockIntoFreeList+0xb0>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	429a      	cmp	r2, r3
 800b118:	d00d      	beq.n	800b136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	441a      	add	r2, r3
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	601a      	str	r2, [r3, #0]
 800b134:	e008      	b.n	800b148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b136:	4b0c      	ldr	r3, [pc, #48]	; (800b168 <prvInsertBlockIntoFreeList+0xb0>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	e003      	b.n	800b148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681a      	ldr	r2, [r3, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d002      	beq.n	800b156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b156:	bf00      	nop
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20004950 	.word	0x20004950
 800b168:	20004958 	.word	0x20004958

0800b16c <__libc_init_array>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4e0d      	ldr	r6, [pc, #52]	; (800b1a4 <__libc_init_array+0x38>)
 800b170:	4c0d      	ldr	r4, [pc, #52]	; (800b1a8 <__libc_init_array+0x3c>)
 800b172:	1ba4      	subs	r4, r4, r6
 800b174:	10a4      	asrs	r4, r4, #2
 800b176:	2500      	movs	r5, #0
 800b178:	42a5      	cmp	r5, r4
 800b17a:	d109      	bne.n	800b190 <__libc_init_array+0x24>
 800b17c:	4e0b      	ldr	r6, [pc, #44]	; (800b1ac <__libc_init_array+0x40>)
 800b17e:	4c0c      	ldr	r4, [pc, #48]	; (800b1b0 <__libc_init_array+0x44>)
 800b180:	f000 f82c 	bl	800b1dc <_init>
 800b184:	1ba4      	subs	r4, r4, r6
 800b186:	10a4      	asrs	r4, r4, #2
 800b188:	2500      	movs	r5, #0
 800b18a:	42a5      	cmp	r5, r4
 800b18c:	d105      	bne.n	800b19a <__libc_init_array+0x2e>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b194:	4798      	blx	r3
 800b196:	3501      	adds	r5, #1
 800b198:	e7ee      	b.n	800b178 <__libc_init_array+0xc>
 800b19a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b19e:	4798      	blx	r3
 800b1a0:	3501      	adds	r5, #1
 800b1a2:	e7f2      	b.n	800b18a <__libc_init_array+0x1e>
 800b1a4:	0800b32c 	.word	0x0800b32c
 800b1a8:	0800b32c 	.word	0x0800b32c
 800b1ac:	0800b32c 	.word	0x0800b32c
 800b1b0:	0800b330 	.word	0x0800b330

0800b1b4 <memcpy>:
 800b1b4:	b510      	push	{r4, lr}
 800b1b6:	1e43      	subs	r3, r0, #1
 800b1b8:	440a      	add	r2, r1
 800b1ba:	4291      	cmp	r1, r2
 800b1bc:	d100      	bne.n	800b1c0 <memcpy+0xc>
 800b1be:	bd10      	pop	{r4, pc}
 800b1c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1c8:	e7f7      	b.n	800b1ba <memcpy+0x6>

0800b1ca <memset>:
 800b1ca:	4402      	add	r2, r0
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d100      	bne.n	800b1d4 <memset+0xa>
 800b1d2:	4770      	bx	lr
 800b1d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d8:	e7f9      	b.n	800b1ce <memset+0x4>
	...

0800b1dc <_init>:
 800b1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1de:	bf00      	nop
 800b1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1e2:	bc08      	pop	{r3}
 800b1e4:	469e      	mov	lr, r3
 800b1e6:	4770      	bx	lr

0800b1e8 <_fini>:
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ea:	bf00      	nop
 800b1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ee:	bc08      	pop	{r3}
 800b1f0:	469e      	mov	lr, r3
 800b1f2:	4770      	bx	lr
